<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IdentityServer4系列 | 快速搭建简易项目</title>
      <link href="2020/10/20/identityserver4-xi-lie-kuai-su-da-jian-jian-yi-xiang-mu/"/>
      <url>2020/10/20/identityserver4-xi-lie-kuai-su-da-jian-jian-yi-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="IdentityServer4系列-快速搭建简易项目"><a href="#IdentityServer4系列-快速搭建简易项目" class="headerlink" title="IdentityServer4系列 | 快速搭建简易项目"></a>IdentityServer4系列 | 快速搭建简易项目</h1><h2 id="一-、前言"><a href="#一-、前言" class="headerlink" title="一 、前言"></a>一 、前言</h2><p>从上一篇关于 <a href="https://www.cnblogs.com/i3yuan/p/13795828.html">常见术语说明</a>中，主要是对<strong>IdentityServer4</strong>的说明，以及其中涉及常见的术语的表述说明，包括对身份认证服务器、用户、客户端、资源以及各个令牌等进行对比区别说明。</p><p>而在这一篇中，我们将尝试通过简单的方式来搭一个我们的IdentityServer授权服务器，熟悉IdentityServer4中搭建的流程以及将出现的问题。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210307998-1971947798.png"></p><h2 id="二、-搭建"><a href="#二、-搭建" class="headerlink" title="二、 搭建"></a>二、 搭建</h2><blockquote><p>以下的项目示例都是基于IdentityServer4 <strong>4.x</strong>版本以上进行说明。 </p><p>4.x版本较之前3.x的版本都有一些变更，在本例中，若发现与3.x版本有变更的一些地方，都会进行记录说明。</p></blockquote><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1.创建项目"></a>2.1.创建项目</h3><p>建立一个空的Asp.Net Core项目 ，使用Empty空模板</p><h3 id="2-2-安装配置"><a href="#2-2-安装配置" class="headerlink" title="2.2.安装配置"></a>2.2.安装配置</h3><h4 id="2-2-1-安装程序包"><a href="#2-2-1-安装程序包" class="headerlink" title="2.2.1. 安装程序包"></a>2.2.1. 安装程序包</h4><ul><li><p>可通过命令行的方式</p><blockquote><p>NuGet&gt;Install-Package IdentityServer4　　</p></blockquote></li><li><p>通过包管理器方式 </p><blockquote><p>添加IdentityServer4包</p></blockquote></li></ul><h4 id="2-2-2-配置管道"><a href="#2-2-2-配置管道" class="headerlink" title="2.2.2. 配置管道"></a>2.2.2. 配置管道</h4><p><strong>修改Configure方法，注入到容器</strong></p><pre class=" language-C#"><code class="language-C#"> app.UseIdentityServer();</code></pre><h4 id="2-2-3-配置内容"><a href="#2-2-3-配置内容" class="headerlink" title="2.2.3. 配置内容"></a>2.2.3. 配置内容</h4><p><strong>将服务注入到容器后，还需要对IdentityServce进行配置内容</strong></p><blockquote><ul><li>哪些API需要Authorization Server进行资源保护</li><li>哪些Client可以使用这个Authorization Server</li><li>哪些User可以被这个AuthorizationServer识别并授权</li><li>哪些资源可以指定作用域</li></ul></blockquote><p>这里方便演示，直接以静态化的形式展示，实际开发应用中，可结合数据库或reidis缓存的数据持久化方式获取。</p><p>建立配置内容文件<code> IdentityConfig.cs</code>（具体的 OpenID Connect 配置信息来源文件）</p><pre class=" language-C#"><code class="language-C#">    public class IdentityConfig    {        public static IEnumerable<IdentityResource> IdentityResources =>           new IdentityResource[]           {                new IdentityResources.OpenId(),                new IdentityResources.Profile(),           };        /// <summary>        /// Authorization Server保护了哪些 API Scope（作用域）        /// </summary>        /// <returns></returns>        public static IEnumerable<ApiScope> GetApiScopes()        {            return new[] { new ApiScope("ApiScope1", "ApiScope2") };        }        /// <summary>        /// 哪些客户端 Client（应用） 可以使用这个 Authorization Server        /// </summary>        /// <returns></returns>        public static IEnumerable<Client> GetClients()        {            return new[]            {                new Client()                {                    ClientId="YuanIdentity", ///客户端的标识，要是惟一的                    ClientSecrets=new []{new Secret("6KGqzUx6nfZZp0a4NH2xenWSJQWAT8la".Sha256())}, ////客户端密码，进行了加密                    AllowedGrantTypes= GrantTypes.ClientCredentials, ////授权方式，这里采用的是客户端认证模式，只要ClientId，以及ClientSecrets正确即可访问对应的AllowedScopes里面的api资源                    AllowedScopes=new[]{"ApiScope1" }, //定义这个客户端可以访问的APi资源数组，上面只有一个api                }            };        }        /// <summary>        /// 哪些User可以被这个AuthorizationServer识别并授权        /// </summary>        /// <returns></returns>        public static IEnumerable<TestUser> GetTestUsers()        {            return new[]            {               new TestUser               {                   SubjectId="001",                   Username="i3yuan",                   Password="123456"               }           };        }    }</code></pre><blockquote><p> <strong>注意，如果你的代码没问题，但是依然报错，比如“无效的scope”等，就可能是nuget包版本问题</strong></p><p> 在3.1.x 到 4.x 的变更中，<code>ApiResource</code> 的 <code>Scope</code> 正式独立出来为 <code>ApiScope</code> 对象，区别<code>ApiResource</code> 和 <code>Scope</code>的关系, <code>Scope</code> 是属于<code> ApiResource</code> 的一个属性，可以包含多个<code> Scope</code>。</p><p> 所以</p><p> 在3.x版本中</p><pre class=" language-c#"><code class="language-c#"> public static IEnumerable<ApiResource> GetApiResources() {     return new[] { new ApiResource("ApiScope1", "ApiScope2") }; }</code></pre><p> 改成4.x版本为</p><pre class=" language-c#"><code class="language-c#">public static IEnumerable<ApiScope> GetApiScopes(){ return new[] { new ApiScope("ApiScope1", "ApiScope2") };}</code></pre></blockquote><h4 id="2-2-4-添加配置服务"><a href="#2-2-4-添加配置服务" class="headerlink" title="2.2.4. 添加配置服务"></a>2.2.4. 添加配置服务</h4><p><strong>在Startup.cs文件，ConfigureServices方法中</strong></p><pre class=" language-C#"><code class="language-C#">        public void ConfigureServices(IServiceCollection services)        {            services.AddMvc();            services.AddIdentityServer()                .AddDeveloperSigningCredential() //开发环境                                                 .AddTestUsers(IdentityConfig.GetTestUsers().ToList())                .AddInMemoryClients(IdentityConfig.GetClients())                .AddInMemoryApiScopes(IdentityConfig.GetApiScopes());            services.AddControllers();        }</code></pre><blockquote><p><strong>1.  在学习 IdentityServer4 时熟悉的 InMemory 来说，<code>AddInMemoryApiResources</code> 变为了 <code>AddInMemoryApiScopes</code>  这个 ApiScope</strong></p><p><strong>2.  我们现在是本地调试，可以告诉identity server4在程序的运行时候对这项工作进行设定: AddDeveloperSigningCredential()，它默认会存到硬盘上的， 所以每次重启服务不会破坏开发时的数据同步。这个方法只适合用于identity server4在单个机器运行， 如果是 production 你得使用AddSigningCredential()这个方法</strong></p></blockquote><p>以上操作完成后， 启动项目，通过它的 .well-known 端点来访问服务器的配置信息，在浏览器的地址栏中，输入地址：<a href="http://localhost:5050/.well-known/openid-configuration%EF%BC%8C%E5%B9%B6%E5%9B%9E%E8%BD%A6%E3%80%82%E5%BA%94%E8%AF%A5%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E7%9A%84%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF%E3%80%82">http://localhost:5050/.well-known/openid-configuration，并回车。应该可以看到如下的响应信息。</a> </p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210329575-439370798.png"></p><h3 id="2-3-获取token"><a href="#2-3-获取token" class="headerlink" title="2.3. 获取token"></a>2.3. 获取token</h3><h4 id="2-3-1-启动项目"><a href="#2-3-1-启动项目" class="headerlink" title="2.3.1. 启动项目"></a>2.3.1. 启动项目</h4><h4 id="2-3-2-测试访问地址"><a href="#2-3-2-测试访问地址" class="headerlink" title="2.3.2. 测试访问地址"></a>2.3.2. 测试访问地址</h4><blockquote><p><a href="http://localhost:5050/connect/token">http://localhost:5050/connect/token</a></p></blockquote><p>body参数 application/x-www-form-urlencoded (post)</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210349797-1093176646.png"></p><h4 id="2-3-3-Access-Token"><a href="#2-3-3-Access-Token" class="headerlink" title="2.3.3. Access_Token"></a>2.3.3. Access_Token</h4><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210359631-906997437.png"></p><blockquote><p><strong>需要对token进行签名， 这意味着 identity server 需要一对public和private key。同时也是可以由上图的解析发现是需要一对公私key的。</strong></p></blockquote><h2 id="三、UI界面"><a href="#三、UI界面" class="headerlink" title="三、UI界面"></a>三、UI界面</h2><p>考虑IdentityServer4需要进行管理查看，添加页面管理界面</p><p> 官方为我们提供了一个快速启动的UI界面，我们只需要下载下来即可，这里有两个方法：</p><h3 id="3-1-QuickStart-UI界面"><a href="#3-1-QuickStart-UI界面" class="headerlink" title="3.1. QuickStart UI界面"></a>3.1. QuickStart UI界面</h3><pre class=" language-shell"><code class="language-shell">1、直接从这个地址下来下载，拷贝到项目中，一共三个文件夹；// https://github.com/IdentityServer/IdentityServer4.Quickstart.UI2、在当前文件夹中执行命令，自动下载；iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/IdentityServer/IdentityServer4.Quickstart.UI/master/getmaster.ps1'))</code></pre><h3 id="3-2-默认目录"><a href="#3-2-默认目录" class="headerlink" title="3.2. 默认目录"></a>3.2. 默认目录</h3><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210411415-1724940248.png"></p><p>下载完官方提供的默认UI界面后，会提供默认的三个目录文件夹分别为：Quickstart (控制器方法)、Views(视图)、wwwroot (静态文件)</p><h3 id="3-3-修改配置"><a href="#3-3-修改配置" class="headerlink" title="3.3. 修改配置"></a>3.3. 修改配置</h3><p>配置中间件来使用静态文件：</p><pre class=" language-c#"><code class="language-c#">app.UseStaticFiles();</code></pre><h2 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h2><p>运行展示效果，启动默认的地址如下：</p><blockquote><p><a href="http://localhost:5050/">http://localhost:5050</a></p></blockquote><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210425344-338210082.png"></p><p>运行项目后，可以发现启动默认的欢迎界面，看到对应的项目版本，我们这里用的是最新的<code>IdentityServer4</code>版本为<code>4.1.1</code> ，以及点击 <strong>discovery document</strong>，可以看到了我们上边说到的 token 获取的接口地址 ，其中对应的端点地址信息。</p><blockquote><p><strong>通过它的 .well-known 端点来访问服务器的配置信息，在浏览器的地址栏中，输入地址：<a href="http://localhost:5050/.well-known/openid-configuration%EF%BC%8C%E5%B9%B6%E5%9B%9E%E8%BD%A6,%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF%E3%80%82">http://localhost:5050/.well-known/openid-configuration，并回车,可以看到对应的响应信息。</a></strong>     </p></blockquote><h2 id="五、模板"><a href="#五、模板" class="headerlink" title="五、模板"></a>五、模板</h2><p>在上文中，我们通过手动搭建的方式，从一个空模板的搭建，到引用对应的Nuget包，安装修改配置，并搭配了官方提供的UI界面，初步形成了一个简易的<code>IdentityServer4</code>初始化项目框架，这种一步步的构建项目的方式。</p><p>官方也给我们提供了对应的快捷创建项目的模板，所以，如果你不想创建MVC项目，可以用官方提供的模板方式进行创建初始化项目。</p><h3 id="5-1-安装模板"><a href="#5-1-安装模板" class="headerlink" title="5.1. 安装模板"></a>5.1. 安装模板</h3><pre class=" language-shell"><code class="language-shell">dotnet new -i IdentityServer4.Templates</code></pre><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210446345-781249573.png"></p><p>在命令的输出中，可以看到已经安装了多个关于 IdentityServer4 的模版</p><table><thead><tr><th>模板</th><th>简称</th><th>说明</th></tr></thead><tbody><tr><td>IdentityServer4 with AdminUI</td><td>is4admin</td><td>这为用户、身份、客户端和资源提供了一个基于web的管理界面.该社区版本旨在测试IdentityServer集成场景，并且仅限于本地主机：5000、SQLite、10个用户和2个客户端。社区版不适合生产应用。</td></tr><tr><td>IdentityServer4 with ASP.NET Core Identity</td><td>is4aspid</td><td>添加使用ASP.NET标识进行用户管理的基本IdentityServer。如果您自动启动数据库，您将得到两个用户：Alice和bob–都带有密码Pass123$。检查SeedData.cs文件。</td></tr><tr><td>IdentityServer4 Empty</td><td>is4empty</td><td>在没有UI的情况下创建一个最小的IdentityServer4项目。</td></tr><tr><td>IdentityServer4 with Entity Framework Stores</td><td>is4ef</td><td>添加使用实体框架进行配置和状态管理的基本IdghtyServer。如果您启动数据库，您将获得一些基本的客户端和资源注册，请检查SeedData.cs文件。</td></tr><tr><td>IdentityServer4 with In-Memory Stores and Test Users</td><td>is4inmem</td><td>添加具有UI、测试用户和示例客户端和资源的基本IdentityServer。显示内存中的代码和JSON配置。</td></tr><tr><td>IdentityServer4 Quickstart UI (UI assets only)</td><td>is4ui</td><td>将快速启动UI添加到当前项目(例如，可以在<code>is4empty</code>的基础上添加)</td></tr></tbody></table><h3 id="5-2-选择项目"><a href="#5-2-选择项目" class="headerlink" title="5.2. 选择项目"></a>5.2. 选择项目</h3><p>这里面最为简单的项目模版就是 <code>IdentityServer4 with In-Memory Stores and Test Users</code> 了，它简称为 <code>is4inmem</code> ，我们下面就使用它来创建项目。</p><pre class=" language-shell"><code class="language-shell">dotnet new 模板名 -n 项目名称</code></pre><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210502040-26294769.png"></p><h3 id="5-3-启动应用"><a href="#5-3-启动应用" class="headerlink" title="5.3. 启动应用"></a>5.3. 启动应用</h3><p>启动项目后，</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201019210514685-208572780.png"></p><p>可以看到项目的效果跟我们之前一步步搭建的效果是一样的，这说明我们已经创建了第一个可运行的 IdentityServer4 服务器了。</p><h2 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h2><h3 id="6-1-HS256与RS256"><a href="#6-1-HS256与RS256" class="headerlink" title="6.1. HS256与RS256"></a>6.1. HS256与RS256</h3><p>JWT签名算法中，一般有两个选择，一个采用HS256,另外一个就是采用RS256。</p><blockquote><p><strong>签名实际上是一个加密的过程，生成一段标识（也是JWT的一部分）作为接收方验证信息是否被篡改的依据。</strong></p></blockquote><ol><li><strong>HS256</strong> 使用密钥生成<strong>固定的签名</strong>，简单地说，HS256 必须与任何想要验证 JWT的 客户端或 API <strong>共享密钥</strong>，因此必须注意确保密钥不被泄露。</li><li><strong>RS256</strong> 生成<strong>非对称签名</strong>，这意味着必须使用私钥来签签名 JWT，并且必须使用对应的公钥来验证签名。与对称算法不同，使用 RS256 可以保证服务端是 JWT 的签名者，因为服务端是唯一拥有私钥的一方。这样做将不再需要在许多应用程序之间共享私钥。</li></ol><p>因此，在开发应用的时候启用JWT时候，使用RS256更加安全，你可以控制谁能使用什么类型的密钥。同时可以让服务端是唯一拥有私钥的一方，不需共享私钥。</p><h3 id="6-2-关于证书"><a href="#6-2-关于证书" class="headerlink" title="6.2 关于证书"></a>6.2 关于证书</h3><p>　　生产环境（负载集群）一般需要使用固定的证书签名与验签,以确保重启服务端或负载的时候 Token 都能验签通过。（不使用临时证书）    </p><h4 id="6-2-1-创建证书"><a href="#6-2-1-创建证书" class="headerlink" title="6.2.1 创建证书"></a>6.2.1 创建证书</h4><pre class=" language-shell"><code class="language-shell">#生成私钥文件openssl genrsa -out idsrv4.key 2048#创建证书签名请求文件 CSR（Certificate Signing Request），用于提交给证书颁发机构（即 Certification Authority (CA)）即对证书签名，申请一个数字证书。openssl req -new -key idsrv4.key -out idsrv4.csr#生成自签名证书（证书颁发机构（CA）签名后的证书，因为自己做测试那么证书的申请机构和颁发机构都是自己,crt 证书包含持有人的信息，持有人的公钥，以及签署者的签名等信息。当用户安装了证书之后，便意味着信任了这份证书，同时拥有了其中的公钥。）openssl x509 -req -days 365 -in idsrv4.csr -signkey idsrv4.key -out idsrv4.crt#自签名证书与私匙合并成一个文件openssl pkcs12 -export -in idsrv4.crt -inkey idsrv4.key -out idsrv4.pfx或openssl req -newkey rsa:2048 -nodes -keyout idsrv4.key -x509 -days 365 -out idsrv4.ceropenssl pkcs12 -export -in idsrv4.cer -inkey idsrv4.key -out idsrv4.pfx</code></pre><p>中途提示让你输入Export Password,这个password后面会用到。</p><h4 id="6-2-2-项目配置"><a href="#6-2-2-项目配置" class="headerlink" title="6.2.2 项目配置"></a>6.2.2 项目配置</h4><p>拷贝生成的证书，放到认证/授权服务器项目中。(VS中配置文件设置文件始终复制)，最后把证书路径和密码配置到 IdentityServer 中，因为我们自签名的证书是 PKCS12 (个人数字证书标准，Public Key Cryptography Standards #12) 标准包含私钥与公钥）标准，包含了公钥和私钥。</p><p>A、在<code>appsetting.json</code> 配置文件中添加如下：此处需要配置password，即生成证书的时候输入的密码。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"Certificates"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"CerPath"</span><span class="token operator">:</span> <span class="token string">"certificate\\idsrv4.pfx"</span><span class="token punctuation">,</span>        <span class="token property">"Password"</span><span class="token operator">:</span> <span class="token string">"P@ssw0rd"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>B、在starup.cs中ConfigureServices方法中配置如下即可。</p><pre class=" language-c#"><code class="language-c#">var basePath = PlatformServices.Default.Application.ApplicationBasePath;services.AddIdentityServer().AddSigningCredential(new X509Certificate2(Path.Combine(basePath,Configuration["Certificates:CerPath"]),Configuration["Certificates:Password"]))</code></pre><p>C、配置完后即可。我们启动IDS4项目即可生成加密的token。</p><h4 id="6-2-3-提取补充"><a href="#6-2-3-提取补充" class="headerlink" title="6.2.3 提取补充"></a>6.2.3 提取补充</h4><p>OpenSSL 提取 pfx 证书公钥与私钥</p><pre class=" language-shell"><code class="language-shell">提取pfx证书公钥和私钥从pfx证书中提取密钥信息，并转换为key格式（pfx使用pkcs12模式补足）1. 提取密钥对(如果pfx证书已加密，会提示输入密码)openssl pkcs12 -in idsrv4.pfx -nocerts -nodes -out idsrv4.key2. 从密钥对提取公钥openssl rsa -in idsrv4.key -pubout -out idsrv4_pub.key3. 从密钥对提取私钥openssl rsa -in  idsrv4.key -out idsrv4_pri.key4. 因为RSA算法使用的是 pkcs8 模式补足，需要对提取的私钥进一步处理得到最终私钥openssl pkcs8 -topk8 -inform PEM -in idsrv4_pri.key -outform PEM -nocrypt</code></pre><blockquote><p><strong>注意：</strong></p><p>将得到的token在jwt.io 网站来认证一下,需要将 crt 公钥、key私钥复制到验证中，发现认证ok,则说明实现防篡改。</p><p>后缀为crt公钥需要带着 —–BEGIN CERTIFICATE—– 和 —–END CERTIFICATE—– 一起复制。<br>后缀为key私钥私钥需要带着 —–BEGIN RSA PRIVATE KEY—– 和 —–END RSA PRIVATE KEY—– 一起复制。</p></blockquote><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ol><li>在本篇中我们通过手动或者官方模板的方式简易的实现了我们的IdentityServer授权服务器搭建，并做了相应的配置和UI配置，实现了获取Token方式。</li><li>对于相应的配置我们需要注意的三个点就是，有哪些用户(users)可以通过哪些客户端(clents)来访问我们的哪些API保护资源 (API)。</li><li>在后续会对其中的授权模式，数据库持久化问题，以及如何应用在API资源服务器中和配置在客户端中，会进一步说明。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li><a href="https://github.com/i3yuan/Yuan.IdentityServer4.Demo">项目地址</a></li></ol><h2 id="八、资料"><a href="#八、资料" class="headerlink" title="八、资料"></a>八、资料</h2><p><a href="https://identityserver4.readthedocs.io/en/latest/intro/big_picture.html">IdentityServer4官方文档</a></p><p><a href="https://github.com/IdentityServer/IdentityServer4.Templates">IdentiytServer4模板</a></p><p><a href="https://github.com/IdentityServer/IdentityServer4.Quickstart.UI">IdentityServer4界面</a></p>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> IdentityServer4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IdentityServer4系列 | 常见术语说明</title>
      <link href="2020/10/11/identityserver4-xi-lie-chang-jian-zhu-yu-shuo-ming/"/>
      <url>2020/10/11/identityserver4-xi-lie-chang-jian-zhu-yu-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="IdentityServer4系列-常见术语说明"><a href="#IdentityServer4系列-常见术语说明" class="headerlink" title="IdentityServer4系列 | 常见术语说明"></a>IdentityServer4系列 | 常见术语说明</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在<a href="https://www.cnblogs.com/i3yuan/p/13768815.html">上一篇</a>中，我们<strong>IdentityServer4</strong>的说明，认识到是一个基于OpenID Connect协议标准的身份认证和授权程序，并简单的对基础知识的认识以及区别说明，从OAuth、OpenID、OpenID Connect以及JWT等进行对比区别说明。</p><p>而在这一篇中，我们主要对<strong>IdentityServer4</strong>中涉及使用的特定的相关术语进行说明。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201010230817852-291480491.png"></p><h2 id="二、术语"><a href="#二、术语" class="headerlink" title="二、术语"></a>二、术语</h2><h3 id="2-1-身份认证服务器（IdentityServer）"><a href="#2-1-身份认证服务器（IdentityServer）" class="headerlink" title="2.1 身份认证服务器（IdentityServer）"></a>2.1 身份认证服务器（IdentityServer）</h3><p>IdentityServer 是基于OpenID Connect协议标准的身份认证和授权程序，它实现了OpenID Connect 和 OAuth 2.0 协议。</p><p>同样的角色，不同的文档使用不同的术语。在有些文档中，它（IdentityServer）可能会被叫做安全令牌服务器（security token service）、身份提供者（identity provider）、授权服务器（authorization server）、 标识提供方（(IP-STS，什么是<a href="https://msdn.microsoft.com/zh-cn/library/ee748489.aspx">IP-STS</a>）等等。</p><p>但是它们都是一样的，都是向客户端发送安全令牌（security token），</p><p>IdentityServer有许多功能：</p><ul><li>保护你的资源</li><li>使用本地帐户或通过外部身份提供程序对用户进行身份验证</li><li>提供会话管理和单点登录</li><li>管理和验证客户机</li><li>向客户发出标识和访问令牌</li><li>验证令牌</li></ul><h3 id="2-2-用户（User）"><a href="#2-2-用户（User）" class="headerlink" title="2.2 用户（User）"></a>2.2 用户（User）</h3><p>用户是使用已注册的客户端访问资源的人。</p><blockquote><p><strong>指在id4中已经注册的用户</strong></p></blockquote><h3 id="2-3-客户端（Client）"><a href="#2-3-客户端（Client）" class="headerlink" title="2.3 客户端（Client）"></a>2.3 客户端（Client）</h3><p>客户端就是从identityserver请求令牌的软件，既可以通过身份认证令牌来验证识别用户身份，又可以通过授权令牌来访问服务端的资源。但是客户端首先必须在申请令牌前已经在identityserver服务中注册过。</p><p>实际客户端不仅可以是Web应用程序，app或桌面应用程序，SPA，服务器进程等。</p><blockquote><p><strong>客户端：web、app、桌面应用、SPA、服务器进程</strong></p></blockquote><h3 id="2-4-资源（Resources）"><a href="#2-4-资源（Resources）" class="headerlink" title="2.4 资源（Resources）"></a>2.4 资源（Resources）</h3><p>资源就是你想用identityserver保护的东西，可以是用户的身份数据或者api资源。<br>每一个资源都有一个唯一的名称，客户端使用这个唯一的名称来确定想访问哪一个资源</p><blockquote><p><strong>在访问之前，实际identityserver服务端已经配置好了哪个客户端可以访问哪个资源，所以你不必理解为客户端只要指定名称他们就可以随便访问任何一个资源</strong></p></blockquote><p>用户的身份信息实际由一组claim组成，例如姓名或者邮件都会包含在身份信息中。</p><blockquote><p><strong>用户身份信息将来通过identityserver校验后都会返回给被调用的客户端</strong></p></blockquote><p>API资源就是客户端想要调用的功能——通常通过 Web API 来对 API 资源建模，但这不是必须的，如下说明：</p><blockquote><p><strong>通常以json或xml的格式返回给客户端，例如webapi，wcf,webservice，可以使其他类型的格式，这个要看具体的使用场景了。</strong></p></blockquote><h3 id="2-5-身份令牌（Id-Token）"><a href="#2-5-身份令牌（Id-Token）" class="headerlink" title="2.5 身份令牌（Id Token）"></a>2.5 身份令牌（Id Token）</h3><p><strong>OIDC对OAuth2最主要的扩展就是提供了ID Token</strong>。来解决第三方客户端标识用户身份认证的问题。</p><blockquote><p>OIDC的核心在于在<strong>OAuth2</strong>的授权流程中，一并提供用户的身份认证信息（<strong>ID Token</strong>）给到第三方客户端，<strong>ID Token</strong>使用JWT格式来包装，得益于JWT（JSON Web Token）的自包含性，紧凑性以及防篡改机制，使得<strong>ID Token</strong>可以安全的传递给第三方客户端程序并且容易被验证。此外还提供了UserInfo的接口，用户获取用户的更完整的信息。</p></blockquote><p><strong>ID Token</strong>是一个安全令牌，表示的是认证过程的输出，是一个授权服务器提供的包含<strong>用户信息，还包含了用户的认证时间和认证方式。身份令牌可以包含额外的身份数据。</strong></p><blockquote><p><strong>由一组Cliams构成以及其他辅助的Cliams的JWT格式的数据结构组成。</strong></p></blockquote><p><strong>ID Token</strong>的主要构成部分如下（使用OAuth2流程的OIDC）。</p><blockquote><ol><li>iss = Issuer Identifier：必须。提供认证信息者的唯一标识。一般是一个https的url（不包含querystring和fragment部分）。</li><li>sub = Subject Identifier：必须。iss提供的EU的标识，在iss范围内唯一。它会被RP用来标识唯一的用户。最长为255个ASCII个字符。</li><li>aud = Audience(s)：必须。标识ID Token的受众。必须包含OAuth2的client_id。</li><li>exp = Expiration time：必须。过期时间，超过此时间的ID Token会作废不再被验证通过。</li><li>iat = Issued At Time：必须。JWT的构建的时间。</li><li>auth_time = AuthenticationTime：EU完成认证的时间。如果RP发送AuthN请求的时候携带max_age的参数，则此Claim是必须的。</li><li>nonce：RP发送请求的时候提供的随机字符串，用来减缓重放攻击，也可以来关联ID Token和RP本身的Session信息。</li><li>acr = Authentication Context Class Reference：可选。表示一个认证上下文引用值，可以用来标识认证上下文类。</li><li>amr = Authentication Methods References：可选。表示一组认证方法。</li><li>azp = Authorized party：可选。结合aud使用。只有在被认证的一方和受众（aud）不一致时才使用此值，一般情况下很少使用。</li></ol></blockquote><p>ID Token通常情况下还会包含其他的Claims。</p><blockquote><p>（毕竟上述claim中只有sub是和EU相关的，这在一般情况下是不够的，必须还需要EU的用户名，头像等其他的资料，OIDC提供了一组公共的cliams，请移步这里<a href="http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims%EF%BC%89%E3%80%82%E5%8F%A6%E5%A4%96ID">http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims）。另外ID</a> Token必须使用JWS进行签名和JWE加密，从而提供认证的完整性、不可否认性以及可选的保密性。</p></blockquote><p>简而言之ID Token就是JWT格式的数据，包含一个人类用户的身份认证的信息，一个ID Token的例子如下：</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201010230851281-1768971593.png"></p><h3 id="2-6-访问令牌（Access-Token）"><a href="#2-6-访问令牌（Access-Token）" class="headerlink" title="2.6 访问令牌（Access Token）"></a>2.6 访问令牌（Access Token）</h3><p>访问令牌允许客户端访问某个 API 资源。客户端请求到访问令牌，然后使用这个令牌来访问 API资源。访问令牌包含了客户端和用户（如果有的话，这取决于业务是否需要，但通常不必要）的相关信息，API通过这些令牌信息来授予客户端的数据访问权限。</p><blockquote><p><strong>OAuth2提供了Access Token来解决授权第三方客户端访问受保护资源的问题；</strong></p></blockquote><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201010230833069-1751376909.png"></p><h3 id="2-7-刷新令牌（Refresh-Token）"><a href="#2-7-刷新令牌（Refresh-Token）" class="headerlink" title="2.7 刷新令牌（Refresh Token）"></a>2.7 刷新令牌（Refresh Token）</h3><p><strong>Access Token</strong> 是客户端访问资源服务器的令牌。拥有这个令牌代表着得到用户的授权。然而，这个授权应该是临时的，有一定有效期。这是因为，<strong>Access Token</strong>  在使用的过程中可能会泄露。给 <strong>Access Token</strong>  限定一个较短的有效期可以降低因 <strong>Access Token</strong>  泄露而带来的风险。</p><p>然而引入了有效期之后，客户端使用起来就不那么方便了。每当 <strong>Access Token</strong>  过期，客户端就必须重新向用户索要授权。这样用户可能每隔几天，甚至每天都需要进行授权操作。这是一件非常影响用户体验的事情。希望有一种方法，可以避免这种情况。</p><p>于是 Oauth2.0 引入了 <strong>Refresh Token</strong> 机制。<strong>Refresh Token</strong> 的作用是用来刷新 <strong>Access Token</strong>。鉴权服务器提供一个刷新接口，例如：</p><p><a href="http://xxx.xxx.com/refresh?refreshtoken=&amp;client_id=">http://xxx.xxx.com/refresh?refreshtoken=&amp;client_id=</a></p><p>传入 refresh token 和 client_id，鉴权服务器验证通过后，返回一个新的 access token。为了安全，Oauth2.0 引入了两个措施：</p><p>1，Oauth2.0 要求，refresh token 一定是保存在客户端的服务器上的，而绝不能存放在狭义的客户端（例如移动 app、PC端软件） 上。调用 refresh 接口的时候，一定是从服务器到服务器的访问；</p><p>2，Oauth2.0 引入了 client_secret 机制。即每一个 client_id 都对应一个 client_secret。这个 client_secret 会在客户端申请 client_id 时，随 client_id 一起分配给客户端。客户端必须把 client_secret 妥善保管在服务器上，决不能泄露。刷新 access token 时，需要验证这个 client_secret。</p><p>于是，实际上的刷新接口应该是类似这样的：</p><p><a href="http://xxx.xxx.com/refresh?refreshtoken=&amp;client_id=&amp;client_secret=">http://xxx.xxx.com/refresh?refreshtoken=&amp;client_id=&amp;client_secret=</a></p><p>以上就是 <strong>Refresh Token</strong> 机制。 <strong>Refresh Token</strong>  的有效期非常长，会在用户授权时，随 <strong>Access Token</strong> 一起重定向到回调 url，传递给客户端。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ol><li>本篇主要是对<strong>IdentityServer4</strong>的说明，以及其中涉及常见的术语的表述说明。</li><li>从身份认证服务器、用户、客户端、资源以及各个令牌等进行对比区别说明。</li><li>在后续中会对多种授权模式，数据库持久化以及UI界面优化和常见问题，搭建一个完整可用的认证授权项目。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li></ol><h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><p><strong><a href="http://docs.identityserver.io/en/release/intro/terminology.html">Terminology——常见术语</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> IdentityServer4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS也可以这样进行快捷安装</title>
      <link href="2020/09/29/vs-ye-ke-yi-zhe-yang-jin-xing-kuai-jie-an-zhuang/"/>
      <url>2020/09/29/vs-ye-ke-yi-zhe-yang-jin-xing-kuai-jie-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="VS也可以这样进行快捷安装"><a href="#VS也可以这样进行快捷安装" class="headerlink" title="VS也可以这样进行快捷安装"></a>VS也可以这样进行快捷安装</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>记录带新人的那些事，主要是一些工作技巧上的分享</p></blockquote><p>部门老大：啊元，明天有几个实习生开发来入职，你负责带一下他们</p><p>啊元： 明天吗？哦，好的，顺便问下：男的女的？</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928220653042-994142204.jpg"></p><p>部门老大：女的，还没毕业，你好好好带哦。</p><p>啊元： 好的，没问题，交给我吧（内心开心的.jpg）</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928220734148-2005850009.jpg"></p><p>第二天到来了。。。</p><p>跳过不必要的琐事，就来到了部门老大招呼她们后并安排座位，就这样，把她们安排在我边上了，（激动.jpg）按耐住内心躁动的心，跟打了个招呼，让他们坐下，老大在边上顺道对新来的小妹妹介绍了几句，这个是你们元哥，以后就他带着你们俩，有什么不懂的都可以请教他，老大回去的时候还拍了肩膀说了句，好好带她们。随生应道，嗯呢。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928220750986-1288826615.jpg"></p><p>等做到座位上之后，先让她们熟悉一下工位，随后便给她们安排了任务，先看看自己工位上公司分配的电脑上是不是有VS工具,没有的先装一个，然后再给你们讲讲一些……。两个妹妹听完后，便应声答好。</p><p>时间走呀走呀。。。</p><p>过一会一个妹子（这里称为A）说到：这里面的几个要怎么选呢？</p><p>我看了看就说：emm, 这个，这个，还有这个，还有这个，等等，还有这一个，emm,差不多了，再改一下安装路径吧，嗯，就这些了，点击安装吧，让它安装就可以了。</p><p>旁边的另一个小妹妹也趴了过了看了一下，看了我的操作之后，也会到自己的座位上装起了软件。</p><p>就这样一天的工作持续进行着。</p><p>而我回想刚刚给他们装软件的时候，就想这要是每一次都要给他们说安装那些组件，那确实是有些麻烦，要是有什么方式直接点击运行，自动帮你勾选对应的组件，一键完成安装那就方便许多了。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928220838260-1941129382.jpg"></p><p>所以，这就开始我的捣鼓了。</p><h2 id="二、探索"><a href="#二、探索" class="headerlink" title="二、探索"></a>二、探索</h2><p>经过一番查找资料，发现在安装vs2019<a href="https://docs.microsoft.com/zh-cn/visualstudio/install/use-command-line-parameters-to-install-visual-studio?view=vs-2019">官方文档</a>中介绍到，可以通过命令行参数来安装Visual Studio,使用各种命令行来控制或者自定义安装，可以预先选定了预定选项的安装，以及自动安装过程。命令行选项与安装引导程序结合使用，安装引导程序是启动下载过程的小型 (1 MB) 文件。 安装引导程序是你从 Visual Studio 网站下载时启动的第一个可执行文件。</p><p>再后续的查找中，发现在aspnetcore的源码中的<a href="https://github.com/dotnet/aspnetcore/blob/master/docs/BuildFromSource.md">编译生成源码的文档</a>中指出，在window上构建asp.net core的要求：</p><ol><li>Windows 10版本1803或更高版本。</li><li>至少10 GB的磁盘空间和良好的Internet连接（我们的构建脚本下载了很多工具和依赖项）</li></ol><p>在安装Visual Studio 2019中，要安装所需的确切组件，可以运行<a href="https://github.com/dotnet/aspnetcore/blob/master/eng/scripts/InstallVisualStudio.ps1">eng/scripts/InstallVisualStudio.ps1</a>.</p><pre><code>PS&gt; ./eng/scripts/InstallVisualStudio.ps1</code></pre><p>任何符合要求的Visual Studio 2019实例都可以。有关这些要求，请参见<a href="https://github.com/dotnet/aspnetcore/blob/master/global.json">global.json</a> 和<a href="https://github.com/dotnet/aspnetcore/blob/master/eng/scripts/vs.json">eng / scripts / vs.json</a>。默认情况下，该脚本将安装Visual Studio Enterprise Edition，但是您可以通过传递<code>-Edition</code>标志来使用其他版本。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"channelUri"</span><span class="token operator">:</span> <span class="token string">"https://aka.ms/vs/16/release/channel"</span><span class="token punctuation">,</span>    <span class="token property">"channelId"</span><span class="token operator">:</span> <span class="token string">"VisualStudio.16.Release"</span><span class="token punctuation">,</span>    <span class="token property">"includeRecommended"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"addProductLang"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"en-US"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"add"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"Microsoft.Net.Component.4.6.1.TargetingPack"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.Net.Component.4.6.2.TargetingPack"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.Net.Component.4.7.1.TargetingPack"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.Net.Component.4.7.2.SDK"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.Net.Component.4.7.2.TargetingPack"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.Net.Component.4.7.TargetingPack"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Component.Azure.Storage.Emulator"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Component.VC.ATL"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Component.VC.Tools.x86.x64"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Component.Windows10SDK.17134"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Workload.ManagedDesktop"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Workload.NativeDesktop"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Workload.NetCoreTools"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Workload.NetWeb"</span><span class="token punctuation">,</span>        <span class="token string">"Microsoft.VisualStudio.Workload.VisualStudioExtension"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="三、操作"><a href="#三、操作" class="headerlink" title="三、操作"></a>三、操作</h2><p>查看InstallVisualStudio.ps1，这个是Visual Studio安装的Powershell脚本，它很强大，它会打开Visual Studio Installer，并且会勾选上所有运行该源代码所需要安装的选项。并且可以选择要安装的版本，我们可以先运行它试试效果。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928221858006-515959567.png"></p><p>输入文件名的前一部分：InstallVisu，然后按tab,就会自定补齐文件名，接着输入一些参数;</p><p>-edition 参数表示VS的版本，默认是企业版，企业版可以不加这个参数。但是如果你是communiy, Professional版的话，就需要添加这个参数。</p><pre class=" language-shell"><code class="language-shell">.\InstallVisualStudio.ps1 -Edition Professional</code></pre><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928221910409-2012744400.png"></p><p>执行该脚本后：</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928221921802-1696084602.png"></p><p>稍等一下会弹出Visual Studio Installer：</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928221140582-346330684.png"></p><p>点击继续，会下载并安装一些依赖项：</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928221154652-445728520.png"></p><p>然后会出现下面选择安装组件的窗口，并且把需要安装的组件都自动勾选上了：</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928221231810-338682475.png"></p><p>这时你只需要点击安装按钮去安装就可以了。装完之后关闭就可以了。这样做的好处是，你不需要手动去挨个安装需要的组件，而且不会出错。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200928220850477-1541698001.gif"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ol><li>经过一段时间探索，总算是找到了想要的方式了，直接运行命令，按需加载安装的组件，一键完成安装，方便快捷。</li><li>在往后安装vs，我们就可以直接通过这种方式，来快速选择安装，哈哈哈，真是懒得不想安装.jpg。</li></ol><p>参考资料：</p><ol><li><p><a href="https://docs.microsoft.com/zh-cn/visualstudio/install/use-command-line-parameters-to-install-visual-studio?view=vs-2019">Visual Studio 2019 文档</a></p></li><li><p><a href="https://github.com/dotnet/aspnetcore/blob/master/docs/BuildFromSource.md">aspnetcore源码编译说明</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在网络世界上安一个家</title>
      <link href="2020/09/19/zai-wang-luo-shi-jie-shang-an-yi-ge-jia/"/>
      <url>2020/09/19/zai-wang-luo-shi-jie-shang-an-yi-ge-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="在网络世界上安一个家"><a href="#在网络世界上安一个家" class="headerlink" title="在网络世界上安一个家"></a>在网络世界上安一个家</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近因为忙于项目，所以都没时间更新文章了，正好也在带几个实习小妹。所以也建议他们要善于思考，学会总结，多写写笔记，便于记忆与查阅。</p><blockquote><p>授人以鱼不如授人以渔。</p></blockquote><p>当然了，在你写写笔记的同时，也可以以博客的形式发表个人的笔记，现在网络上又很多博客平台，我们都可以直接在上面发表，但是在这些平台存在比较不自由，会受到各种限制等等。所以，你就可以考虑搭建一个属于自己的平台，一个在网络世界中属于自己的家。</p><blockquote><p>好记性不如烂笔头，将网络笔记当做自己的网络中的家，可以随时随地的查看，不受限制。</p></blockquote><p>如果你有足够的成本和时间，完全可以自己写一个博客程序，通过购买服务器并部署自己编写的博客程序，定期的维护，通过这种方式搭建属于自己的家。当然了，这种方式可行但却太耗精力和成本。所以有的人建议，在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><p>各抒己见，每个人都可以通过自己的方式搭建一个家。</p><blockquote><p>我来说说写博客的好处吧：</p><ol><li><p>当你把经验的总结写成博客的时候思路会很清晰，会有新的启发，尤其是自己实践过后的思考总结；</p></li><li><p>当遇到问题，并解决的时候，可以给自己的技术和解决思路做存档，加深记忆，这样即使过一段时间忘了或者以后需要又或者遇到相同问题的时候，你就可以打开自己的博客看到自己的记录了；</p></li><li><p>可以记录自己的成长，记录自己的工作与生活；</p></li><li><p>当然了，博客给你带来的另一些价值利益好处就不言而喻了。</p></li></ol><p>总的来说，你写了博客和不写，肯定收获是不一样的。</p></blockquote><p>而在本文中，采取的方式利用hexo作为一个快速简洁的博客框架，用它来搭建博客，但因为部署托管到github page平台上有时候网络受限访问太慢了，所以就托管到并发布部署到自己的服务器上。这样不仅可以快速搭建访问博客也能将数据保存在自己手上。</p><blockquote><p>Hexo是一款基于Node.js的静态博客框架, 可以快速生成静态文件，访问速度快；</p><p>方便快捷，可以搭建一个自由的个人博客，不需要后台；</p><p>数据安全，可以自行保存自己的笔记数据；</p><p>博客内容文章可以轻松快速打包、转移、发布到其它平台。</p></blockquote><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919204718636-484754178.jpg" style="zoom:80%;" /><h2 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h2><ol><li><p>安装git客户端 （为了展示效果，我是用的window环境下安装git客户端）</p></li><li><p>安装node.js （这个可以看之前的<a href="https://www.cnblogs.com/i3yuan/p/10247599.html">文章</a>）</p></li><li><p>有一个个人github账号（没有的可以注册一个）（如果有服务器的话，可以直接使用服务器）</p><p>（本文不对git部署方式进行说明，可自行网上查阅。）</p></li><li><p>熟悉markdown语法。（便于后续通过markdown语法编写文章）</p></li></ol><blockquote><p>官网建议Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p><p>本文用的环境：</p><p>node.js@ 12.13.1 ( 指令 ：node -v)</p><p>hexo @ 5.1.1 ( 指令 ：hexo -v)</p><p>git @ 2.24   ( 指令 ：git version)</p></blockquote><h2 id="三、搭建"><a href="#三、搭建" class="headerlink" title="三、搭建"></a>三、搭建</h2><h3 id="3-1-安装-Hexo-包"><a href="#3-1-安装-Hexo-包" class="headerlink" title="3.1 安装 Hexo 包"></a>3.1 安装 Hexo 包</h3><pre class=" language-shell"><code class="language-shell">npm install -g hexo</code></pre><p><strong>注意</strong>：</p><blockquote><p>安装以后，可以通过 Hexo <commd> 指定的方式执行相应的操作。</p><p>如果出现 hexo不存在的情况，需要将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code></p><p>环境变量下：</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180045108-67795135.png" alt="环境变量"></p></blockquote><h3 id="3-2-初始化"><a href="#3-2-初始化" class="headerlink" title="3.2 初始化"></a>3.2 初始化</h3><p>在指定文件位置新建一个文件夹，如果本文的路径<code>F:\site</code>, 切换到相应的文件夹目录后，通过初始化的</p><p>方式将代码存放在这个文件目录下</p><pre class=" language-shell"><code class="language-shell">hexo init</code></pre><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180129489-1970944824.png" alt="1970944824"></p><p>初始化后生成的以下目录结构如下：</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180211166-1490886857.png"></p><h3 id="3-3-生成"><a href="#3-3-生成" class="headerlink" title="3.3 生成"></a>3.3 生成</h3><pre class=" language-shell"><code class="language-shell">hexo g</code></pre><p>执行生成指令后，文件目录下就会有public文件夹，对应的生成相关的html文件。这个public文件夹目录下的文件是可以进行部署个人服务器发布或提交到github上面进行部署的。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180237865-1922149061.png"></p><h3 id="3-4-启动"><a href="#3-4-启动" class="headerlink" title="3.4 启动"></a>3.4 启动</h3><pre class=" language-shell"><code class="language-shell">hexo s</code></pre><p>启动服务，这个是可以进行本地预览效果的，默认端口4000，打开就可以看到你即将部署的站点的模样了。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180302245-204218931.png"></p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180328135-1188838043.png"></p><p>通过以上步骤，hexo已经为我们搭建一个站点的框架和默认的主题样式。当然了，你也可以根据自己的喜欢选择相应的<a href="https://hexo.io/themes/">官方主题</a>进行修改。</p><h2 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h2><p>本文采用的主题是 <a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>, 当然了，我自己现在用的也是这个主题。</p><h3 id="4-1-下载"><a href="#4-1-下载" class="headerlink" title="4.1 下载"></a>4.1 下载</h3><p>切换到目录 <code>F:\site\themes</code>  执行下载主题</p><pre class=" language-shell"><code class="language-shell">git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180500610-256137692.png"></p><p>下载完之后，将<code>F:\site</code>目录下的<code>_config.yml</code>中的<code>theme:landscape</code>改为我们想要的主题<code>theme: hexo-theme-matery</code>, 然后再次执行 <code>hexo g</code>指令重新生成。</p><blockquote><p>如果出现问题，可以尝试先执行<code>hexo clean</code>清理public文件夹的内容，再重新生成<code>hexo g</code>和发布。</p></blockquote><p>再次启动服务<code>hexo s</code>，这次可以预览到的效果就是我们更换主题后想要的效果了。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180524497-2021705715.png"></p><h3 id="4-2-配置"><a href="#4-2-配置" class="headerlink" title="4.2 配置"></a>4.2 配置</h3><h4 id="4-2-1-新建分类-categories-页"><a href="#4-2-1-新建分类-categories-页" class="headerlink" title="4.2.1 新建分类 categories 页"></a>4.2.1 新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-shell"><code class="language-shell">hexo new page "categories"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-shell"><code class="language-shell">---title: "分类"date: 2020-09-13 17:06:27type: "categories"layout: "categories"---</code></pre><h4 id="4-2-2-新建标签-tags-页"><a href="#4-2-2-新建标签-tags-页" class="headerlink" title="4.2.2 新建标签 tags 页"></a>4.2.2 新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-shell"><code class="language-shell">hexo new page "tags"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-shell"><code class="language-shell">---title: "标签"date: 2020-09-13 17:07:18type: "tags"layout: "tags"---</code></pre><h4 id="4-2-3-新建关于我-about-页"><a href="#4-2-3-新建关于我-about-页" class="headerlink" title="4.2.3 新建关于我 about 页"></a>4.2.3 新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-shell"><code class="language-shell">hexo new page "about"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-shell"><code class="language-shell">---title: aboutdate: 2020-09-13 17:07:42type: "about"layout: "about"---</code></pre><h4 id="4-2-4-新建-404-页"><a href="#4-2-4-新建-404-页" class="headerlink" title="4.2.4 新建 404 页"></a>4.2.4 新建 404 页</h4><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p><pre class=" language-shell"><code class="language-shell">---title: 404date: 2018-09-30 17:25:30type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面 :("---</code></pre><h4 id="4-2-4-代码高亮"><a href="#4-2-4-代码高亮" class="headerlink" title="4.2.4 代码高亮"></a>4.2.4 代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-shell"><code class="language-shell">npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-shell"><code class="language-shell">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="4-2-5-搜索"><a href="#4-2-5-搜索" class="headerlink" title="4.2.5 搜索"></a>4.2.5 搜索</h4><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-shell"><code class="language-shell">npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-shell"><code class="language-shell">search:  path: search.xml  field: post</code></pre><h4 id="4-2-6-中文链接转拼音"><a href="#4-2-6-中文链接转拼音" class="headerlink" title="4.2.6 中文链接转拼音"></a>4.2.6 中文链接转拼音</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-shell"><code class="language-shell">npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-shell"><code class="language-shell">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><p>更多具体的操作，可以查阅该主题的具体的<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">操作文档说明</a>。</p><h2 id="五、部署"><a href="#五、部署" class="headerlink" title="五、部署"></a>五、部署</h2><p>根据上文自定义的方式配置主题后，根据自己的需求，修改对应的信息之后，发布部署。</p><h3 id="5-1-部署"><a href="#5-1-部署" class="headerlink" title="5.1 部署"></a>5.1 部署</h3><blockquote><p>如果没有服务器的可以通过注册github账号，通过github pages服务搭建博客。（具体的github发布hexo可以网上查阅）</p></blockquote><p>因为刚好有一个服务器可以使用，暂用的空间也不大，所以我就直接将发布后的文件部署到服务器上了。绑定后域名后，就可以进行访问。</p><p>可以得到如下的效果。</p><h3 id="5-2-最终效果"><a href="#5-2-最终效果" class="headerlink" title="5.2 最终效果"></a>5.2 最终效果</h3><p>站点地址: <a href="http://www.i3yuan.top/">http://www.i3yuan.top</a></p><p><img src="https://img2020.cnblogs.com/blog/1576550/202009/1576550-20200919180823521-474895020.png"></p><h2 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h2><h3 id="6-1-简写指令"><a href="#6-1-简写指令" class="headerlink" title="6.1 简写指令"></a>6.1 简写指令</h3><pre class=" language-shell"><code class="language-shell">`hexo init` #初始化XX文件夹名称`hexo n "我的第一篇文章"` # 等价于  `hexo new "我的第一篇文章"`还等价于`hexo new post "我的第一篇文章"` `hexo p` 等价于 `hexo publish`    #通过 publish 命令将草稿移动到 source/_posts 文件夹 `hexo g` 等价于 `hexo generate`  # 生成静态网页(生成在public文件夹）`hexo s`等价于 `hexo server`     # Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。`hexo d` 等价于 `hexo deploy` # 将本地数据部署到远端服务器(如github)`hexo deploy -g`  等价于 `hexo deploy --generate``hexo generate -d`等价于`hexo generate --deploy`hexo clean` #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</code></pre><p><strong>注: hexo  clean 没有 简写,  git –version 没有简写</strong></p><blockquote><p><code>npm update hexo -g</code>#升级<br><code>npm install hexo -g</code>#安装<br><code>node-v</code>          #查看node.js版本号<br><code>npm -v</code>        #查看npm版本号<br><code>git --version</code>  #查看git版本号<br><code>hexo -v</code>      #查看hexo版本号</p></blockquote><h3 id="6-2-错误"><a href="#6-2-错误" class="headerlink" title="6.2 错误"></a>6.2 错误</h3><ol><li><p>网页将代码中片的 {} 解析为 <code>&amp;#123</code> 的错误</p><p>错误这个问题，无法转换<code>&#123; &#125;</code>,直接找到路径<code>node_modules/hexo_prism_plugin/src/index.js</code>下的文件,代码如下：</p><pre class=" language-json"><code class="language-json">const map = <span class="token punctuation">{</span>  '&amp;#<span class="token number">39</span><span class="token punctuation">;</span>'<span class="token operator">:</span> '\''<span class="token punctuation">,</span>  '&amp;amp<span class="token punctuation">;</span>'<span class="token operator">:</span> '&amp;'<span class="token punctuation">,</span>  '&amp;gt<span class="token punctuation">;</span>'<span class="token operator">:</span> '>'<span class="token punctuation">,</span>  '&amp;lt<span class="token punctuation">;</span>'<span class="token operator">:</span> '&lt;'<span class="token punctuation">,</span>  '&amp;quot<span class="token punctuation">;</span>'<span class="token operator">:</span> '"'<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>解决方法就是多加<code>&amp;#123</code>和<code>&amp;#125</code>对花括号的转义</p><pre class=" language-json"><code class="language-json">const map = <span class="token punctuation">{</span>  '&amp;#<span class="token number">39</span><span class="token punctuation">;</span>'<span class="token operator">:</span> '\''<span class="token punctuation">,</span>  '&amp;amp<span class="token punctuation">;</span>'<span class="token operator">:</span> '&amp;'<span class="token punctuation">,</span>  '&amp;gt<span class="token punctuation">;</span>'<span class="token operator">:</span> '>'<span class="token punctuation">,</span>  '&amp;lt<span class="token punctuation">;</span>'<span class="token operator">:</span> '&lt;'<span class="token punctuation">,</span>  '&amp;quot<span class="token punctuation">;</span>'<span class="token operator">:</span> '"'<span class="token punctuation">,</span>  '&amp;#<span class="token number">123</span>'<span class="token operator">:</span> '<span class="token punctuation">{</span>'<span class="token punctuation">,</span>  '&amp;#<span class="token number">125</span>'<span class="token operator">:</span> '<span class="token punctuation">}</span>'<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这里的采用的方式是直接找到对应的源码修改代码里面内容，实现花括号转换问题。当然了，你也可以采取别的方式，欢迎指定，提出更好的方案。</p><p>如果你在使用搭建过程中也遇到其他问题，可以评论提出，方便大家一并学习汇总。</p></li></ol><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ol><li>在后续中我们可以通过Markdown编写博客文章，发布到各个平台的同时，也可以发布到自己搭建的个人博客站点，方便自己学习记录，便于查阅。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li>本文中参考资料： <a href="https://hexo.io/zh-cn/docs/">Hexo官方简介</a> 、**<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery主题</a>**</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IdentityServer4系列 | 初识基础知识点</title>
      <link href="2020/09/19/identityserver4-xi-lie-chu-shi-ji-chu-zhi-shi-dian/"/>
      <url>2020/09/19/identityserver4-xi-lie-chu-shi-ji-chu-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="IdentityServer4系列-初识基础知识点"><a href="#IdentityServer4系列-初识基础知识点" class="headerlink" title="IdentityServer4系列 | 初识基础知识点"></a>IdentityServer4系列 | 初识基础知识点</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我们现在日常生活中，会使用各式各样的应用程序，层出不穷，其中有基于网页浏览方式的应用，有基于手机端的App，甚至有基于流行的公众号和小程序等等，这些应用，我们不仅要实现各个应用的功能之外，还要考虑各个应用之间的交互作用，其中身份的认证和授权就是每个应用必不可少的的一部分。</p><p>所以我们以身份认证和授权这一部分为例，需要考虑各个应用直接的交互，统一管理以及信息安全问题。</p><p>而现在的互联网，对于信息安全要求又十分苛刻，所以一套统一的身份认证和授权就至关重要。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231601497-1611168987.png"></p><p>所以，我们可以根据<code>Identity Server4</code>框架开发一套统一的身份认证和授权项目应用在平时的多个项目中，实现多平台应用授权统一管理。</p><h2 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明"></a>二、说明</h2><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231430447-1977709387.png"> </p><p>我们通过查看 <a href="https://identityserver4.readthedocs.io/en/latest/">IdentityServer4</a>官网，就可以看到给出的定义：</p><pre class=" language-markdown"><code class="language-markdown">IdentityServer4 is an OpenID Connect and OAuth 2.0 framework for ASP.NET Core.</code></pre><blockquote><p>OpenID Connect + OAuth2.0 相结合的认证框架</p></blockquote><p>由此可见，IdentityServer是基于OpenID Connect协议标准的身份认证和授权程序，实现了OpenID Connect和OAuth2.0协议的结合。 </p><p>所以，IdentityServer4是为ASP.NET CORE量身定制的实现了OpenId Connect和OAuth2.0协议的认证授权中间件。通常，你构建（或重新使用）包含登录和注销页面的应用程序，IdentityServer中间件会向其添加必要的协议头，以便客户端应用程序可以使用这些标准协议与其对话。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231555497-1513467258.png"></p><h3 id="2-1-特性"><a href="#2-1-特性" class="headerlink" title="2.1 特性"></a>2.1 特性</h3><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231504842-1237811853.png"></p><p>通过不同的文献使用的术语我们会发现，同一个概念可能存在着多种解释，比如有些把他称为安全令牌服务（Security Token Service），<br>身份提供（Identity Provider），授权服务器（Authorization Server），IP-STS 等等。其实他们都是一个意思，目的都是在软件应用中为客户端颁发令牌并用于安全访问的。</p><h3 id="2-2-功能"><a href="#2-2-功能" class="headerlink" title="2.2 功能"></a>2.2 功能</h3><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231511802-2052102664.png"></p><h2 id="三、引申"><a href="#三、引申" class="headerlink" title="三、引申"></a>三、引申</h2><h3 id="3-1-OAuth2-0"><a href="#3-1-OAuth2-0" class="headerlink" title="3.1 OAuth2.0"></a>3.1 OAuth2.0</h3><p><strong>OAuth2.0</strong> 是OAuth协议的延续，<strong>OAuth2.0</strong> 关注客户端开发者的简易性，为用户资源提供一个安全的、开放而有建议的标准。是目前流行的授权机制，用于授权第三方应用就可以获取该用户资源。因此OAuth是安全的。</p><p>为了安全，Oauth2.0 引入了两个措施：</p><blockquote><p>　　1，Oauth2.0 要求，refresh token 一定是保存在客户端的服务器上的，而绝不能存放在狭义的客户端（例如移动 app、PC端软件） 上。调用 refresh 接口的时候，一定是从服务器到服务器的访问；</p><p>　　2，Oauth2.0 引入了 client_secret 机制。即每一个 client_id 都对应一个 client_secret。这个 client_secret 会在客户端申请 client_id 时，随 client_id 一起分配给客户端。客户端必须把 client_secret 妥善保管在服务器上，决不能泄露。刷新 access token 时，需要验证这个 client_secret。</p></blockquote><h4 id="3-1-1-场景"><a href="#3-1-1-场景" class="headerlink" title="3.1.1 场景"></a>3.1.1 场景</h4><p><strong>OAuth2.0</strong> 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p><p>（以下以 第三方A网站用户访问授权获取在B网站资源 为例 。参考：<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a>）</p><p>为了让A网站应用访问在B网站上的存储的照片、视频或者联系方式等等私密资源，我们可能需要做到的就是让B网站同意A网站访问读取这些资源，那么，在传统的方式中，会将自己在B网站中的用户名和密码告诉A，后者就可以读取用户的资源信息了，但是这样做存在了严重的问题：</p><ul><li>A网站为了后续服务，会保存用户的密码，这样不安全。</li><li>B网站必须部署密码登录方式，才能以此方式获取，但这种单纯的密码登录也不安全。</li><li>A网站用户获取某个网站资源的权力，但却没有限制获取的范围和期限。</li><li>当用户修改密码的时候，就会收回A网站的权力，但是这样做，会使得其他所有获得用户授权的A应用程序全部失效。</li><li>只要有一个A应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。</li></ul><p>因此，这种方式是不安全的，所以为了解决这种问题，<strong>OAuth</strong>就解决了这种问题。</p><p>允许用户让第三方A应用访问该用户在B网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。就比如我用QQ登录博客园，那博客园（第三方应用）的昵称就可以是我的QQ（某网站）昵称，它获取到了我的QQ昵称，并存到了博客园的数据库，我以后就一直可以使用QQ来登录博客园，但是博客园却不知道我QQ的用户名和密码。</p><h4 id="3-1-2-说明"><a href="#3-1-2-说明" class="headerlink" title="3.1.2 说明"></a>3.1.2 说明</h4><p>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p><p>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004232147717-129403731.jpg"></p><p>（A）用户打开客户端以后，客户端要求用户给予授权。<br> （B）用户同意给予客户端授权。<br> （C）客户端使用上一步获得的授权，向认证服务器申请令牌。<br> （D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。<br> （E）客户端使用令牌，向资源服务器申请获取资源。<br> （F）资源服务器确认令牌无误，同意向客户端开放资源。</p><h4 id="3-1-3-模式"><a href="#3-1-3-模式" class="headerlink" title="3.1.3 模式"></a>3.1.3 模式</h4><p>用户怎样实现客户端授权，所以需要通过不同的授权模式让客户端可以获取令牌，进而获取资源。因此，客户端获取授权常用的模式如下：</p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231517808-917889351.png"></p><blockquote><p> <strong>后续篇章会对这些模式进行说明和搭建应用项目。</strong></p></blockquote><h3 id="3-2-OpenID-Connect"><a href="#3-2-OpenID-Connect" class="headerlink" title="3.2 OpenID Connect"></a>3.2 OpenID Connect</h3><p>OpenID Connect是基于OAuth 2.0规范族的可互操作的身份验证协议。它使用简单的REST / JSON消息流来实现，和之前任何一种身份认证协议相比，开发者可以轻松集成。</p><p>OpenID Connect允许开发者验证跨网站和应用的用户，而无需拥有和管理密码文件。</p><p>OpenID Connect允许所有类型的客户,包括基于浏览器的<a href="https://link.jianshu.com/?t=http://lib.csdn.net/base/javascript">JavaScript</a>和本机移动应用程序,启动登录流动和接收可验证断言对登录用户的身份。</p><p>进一步来说：</p><ul><li>OpenID Connect是OAuth 2.0协议之上的简单身份层，用 API 进行身份交互的框架，允许<strong>客户端根据授权服务器的认证结果最终确认用户的身份，以及获取基本的用户信息</strong>；</li><li>它支持包括Web、移动、JavaScript在内的所有客户端类型；</li><li>它是可扩展的协议，允许你使用某些可选功能，如身份数据加密、OpenID提供商发现、会话管理；</li></ul><p>OpenID Connect vs OpenID 2.0：OpenID Connect完成很多与OpenID 2.0（即认证，对用户的身份进行认证，判断其身份是否有效）相同的任务，是API-friendly，定义了可选的签名和加密的机制；</p><p>OAuth 1.0和OpenID 2.0的集成需要扩展，而OpenID Connect协议本身就建立在OAuth 2.0之上。</p><blockquote><p>(身份验证)+ OAuth 2.0 = OpenID Connect</p></blockquote><p>因此，<strong>OpenID Connect 是“认证”和“授权”的结合。</strong></p><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231540827-279634019.png"></p><blockquote><p><strong>我们经常会混淆OpenID和OAuth协议之间的关系，下文会对这两者进行区分说明。</strong></p></blockquote><p><strong>为什么开发者要使用OpenID Connect？</strong></p><blockquote><p>因为它很简单,可靠,安全,并让他们摆脱困难和危险的存储和管理别人的密码。也有好处,它让用户的生活更容易在网站注册和注册从而减少遗弃。</p></blockquote><h2 id="四、区别"><a href="#四、区别" class="headerlink" title="四、区别"></a>四、区别</h2><h3 id="4-1-OAuth-与-OpenID"><a href="#4-1-OAuth-与-OpenID" class="headerlink" title="4.1 OAuth 与 OpenID"></a>4.1 OAuth 与 OpenID</h3><p>首先，来认识两个英文单词，也是我们在平时中很容易混淆的。</p><ul><li><strong>authorization</strong> : n. 授权，认可；批准，委任。</li><li><strong>authentication</strong> : n. 证明；鉴定；证实。</li></ul><p>而在认证授权服务中，也应用了这两个单词的表面意思。</p><blockquote><p>OpenID 是一个<strong>以用户为中心的数字身份识别框架</strong>，它具有开放、分散性。OpenID 的创建基于这样一个概念：我们可以通过 URI （又叫 URL 或网站地址）来认证一个网站的唯一身份，同理，我们也可以通过这种方式来作为用户的身份认证。</p></blockquote><p><strong>OpenID ：</strong> 是<em>Authentication</em>，即认证，对用户的身份进行认证，判断其身份是否有效，也就是让网站知道“你是你所声称的那个用户”。</p><blockquote><p>侧重的是authentication： 即证明 “用户是谁？”</p></blockquote><p><strong>OAuth ：</strong> 是<em>Authorization</em>，即授权，在已知用户身份合法的情况下，经用户授权来允许某些操作，也就是让网站知道“你能被允许做那些事情”。</p><blockquote><p>侧重的是authorization ：即授权 “用户能做什么？”</p></blockquote><p>由此可知，授权要在认证之后进行，只有确定用户身份只有才能授权。</p><h4 id="4-1-1-场景"><a href="#4-1-1-场景" class="headerlink" title="4.1.1 场景"></a>4.1.1 场景</h4><p> <strong>OpenID</strong> 是证实身份（Authentication）作用的，就好比我们参加大型考试一下，进考场的时候，监考官需要我们拿出身份证和准考证来检验，比对是否是同一个人。这个过程就是在验证 “身份，这就是我”，同时也证实了这不是一个匿名伪造的不可信任信息。考官比对身份成功后，就会进一步询问。</p><blockquote><p>比如我用 Google 的 OpenID 服务登录 xxx.com ， xxx.com 先把我导向 Google 的授权页面，我使用 Google 帐号 <a href="mailto:&#x74;&#101;&#115;&#x74;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#x74;&#101;&#115;&#x74;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a> 登录并同意后，页面跳回 xxx.com ， xxx.com 拿到了我的“唯一标识”，这个唯一标识可能是 abbcccxxxxxxxddccddxxxx11 ，xxx.com 从这个字符串里无法获得任何 <a href="mailto:&#x78;&#x78;&#120;&#x40;&#103;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#x6d;">&#x78;&#x78;&#120;&#x40;&#103;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#x6d;</a> 的个人信息（甚至连邮箱地址也不知道）， xxx.com 只知道以后只要使用谷歌登录并返回 abbcccxxxxxxxddccddxxxx11 这个标识符，那就是我在登录。</p></blockquote><p><strong>但是如果你想在认证过程中获得用户的其他信息（比如手机号等 ）就得多做一步了。</strong></p><p><strong>OAuth</strong> 是关于授权、许可（Authorization）的，当考官看完比对你的身份后，还要求掏出兜里的东西，拿出随身携带里的东西、手机等随身物品以便检查，检查你是否携带考场违规物品，这时就需要得到被检查人的许可才行，被检查人有权利扭头就走，但要想进场考试，必须给予许可、配合检查。这是在回答「我同意让你对我进一步做些什么」，是为了在被授予权限的前提下，更多的获取除了个人信息以外，身上携带的东西是否包含违规物品。（如：手机，计算器，手表，非指定文具等）</p><blockquote><p>我想通过微博登录 xxx.com ，xxx.com 要先把我 redirect 到新浪微博的授权页面，我通过微博帐号登录并授权后，页面跳回 xxx.com ，xxx.com 拿到我的访问 token 后还要再调用一个接口来获得我的会员 UID ，这个 UID 就是新浪用户的“唯一标识”了。</p></blockquote><pre class=" language-markdown"><code class="language-markdown">  <span class="token title important"><span class="token punctuation">#</span> 借鉴网友的说明： </span>   如今越来越多的网站，以及一些应用程序都开始使用第三方社交平台账户登录，那这里就会涉及到安全性的问题，隐私的问题，你不能随意来获取我的资料，当然你来使用我的资料，你要经过用户的同意，那这个用户是不是我平台上，还是要来向我求证，那在这个过程中，实际上就出现了两个过程，我们还是直接使用上次的例子来说明，比较直观，博客园使用QQ登录，进入博客园的登录页，点击使用QQ登录：<span class="token code keyword">    在进入到QQ登录界面后，最开始是要请求认证，用户输入QQ号和密码，点击登录，腾讯互联会先进行验证该用户是否为我的用户，如果是我的用户，那么我会通知你（博客园），他是我的用户，你可以使用该账户登录你的系统，这个过程就是认证（Authentication），认证就是证明你是谁，你是否是真实存在的，就好像，快递员来给你送快递，让你出示你的身份证，他确定你是本人后，把快递给你，这就是OpenID。</span>   而在QQ授权登录下方，有两给CheckBox复选框，可以允许博客园获得您的昵称、头像、性别，这是在认证之后的事了，在腾讯互联你是我平台的用户后，你可以自己选择博客园是否有权去获取你的相关信息，当你勾选后，腾讯互联就把你的这些基本信息给了博客园，这个过程就是授权（Authorization），授权就是确定了你是谁后，又把属于你的东西给了别人，犹如你向快递员出示了身份证，然后你又把你房门的密码给了他，并告诉他说，我把房门密码给你，你帮我放到我客厅里吧。</code></pre><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231533322-1182520118.png"></p><p>可以看出，<strong>OAuth 相对于 OpenID 最大的区别就是</strong>，网站在认证授权的过程中实际上是拿到了你的帐户访问权限继而确认你的身份，但是这同时也存在一个安全隐患，因为网站在拿到你的“唯一标识”的同时还拿到了一把你的账户的 “临时钥匙”。但是你不知道网站会不会拿这把钥匙“干坏事”，这个只有站长心里清楚。同时 OAuth 还比 OpenID 多了几个额外的请求步骤，登录所费时间一定是长于 OpenID 的。</p><h3 id="4-2-OAuth、OpenID-与-OpenID-Connect"><a href="#4-2-OAuth、OpenID-与-OpenID-Connect" class="headerlink" title="4.2  OAuth、OpenID 与 OpenID Connect"></a>4.2  OAuth、OpenID 与 OpenID Connect</h3><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231450112-1259674324.png"></p><p><strong>OpenID Connect</strong> 因为其基于<em>OAuth</em>协议（可以看上文OAuth说明），所以<em>OpenID-Connect</em>协议中也包含了<strong>client_id</strong>、<strong>client_secret</strong>还有<strong>redirect_uri</strong>等字段标识。这些信息被保存在“身份认证服务器”，以确保特定的客户端收到的信息只来自于合法的应用平台。这样做是目的是为了防止<em>client_id</em>泄露而造成的恶意网站发起的<em>OIDC</em>流程。</p><ul><li><p>OpenID Connect完成很多与OpenID 2.0 相同的任务，是API-friendly，定义了可选的签名和加密的机制。</p></li><li><p>OAuth 1.0 和 OpenID 2.0 的集成需要扩展，而OpenID Connect协议本身就建立在OAuth 2.0之上。</p></li></ul><p>因此，<strong>OpenID Connect 是“认证”和“授权”的结合。</strong></p><blockquote><p>(身份验证)+ OAuth 2.0 = OpenID Connect (OIDC) = ( Authentication + Authorization + OAuth2.0)</p></blockquote><p>简要而言，<em>OIDC</em>是一种安全机制，用于应用连接到身份认证服务器（Identity Service）获取用户信息，并将这些信息以安全可靠的方法返回给应用。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 借鉴网友说明</span>举个例子。某个用户使用<span class="token italic"><span class="token punctuation">*</span>Facebook<span class="token punctuation">*</span></span>应用<span class="token italic"><span class="token punctuation">*</span>“What online quiz best describes you?”<span class="token punctuation">*</span></span> ，该应用可以通过<span class="token italic"><span class="token punctuation">*</span>Facebook<span class="token punctuation">*</span></span>账号登录，则你可以在应用中发起请求到“身份认证服务器”（也就是Facebook的服务器）请求登录。这时你会看到界面，询问是否授权。 在 OAuth 中，这些授权被称为scope。OpenID-Connect也有自己特殊的scope--openid ,它必须在第一次请求“身份鉴别服务器”（Identity Provider,简称IDP）时发送过去。</code></pre><p><img src="https://img2020.cnblogs.com/blog/1576550/202010/1576550-20201004231420517-548646317.png"></p><h3 id="4-3-JWT-与-OAuth2-0"><a href="#4-3-JWT-与-OAuth2-0" class="headerlink" title="4.3 JWT 与 OAuth2 .0"></a>4.3 JWT 与 OAuth2 .0</h3><p>要比较JWT和OAuth2，首先要明白一点就是，这两个根本没有可比性，是两个完全不同的东西。</p><p>但是既然是没有可比性，为何还要放一块比较呢？实际开发应用中，就发现很多拿 JWT和OAuth2.0 作对比，很多情况下，在讨论OAuth2的实现时，会把JSON Web Token作为一种认证机制使用。这也是为什么他们会经常一起出现。</p><h4 id="4-3-1-内容区别"><a href="#4-3-1-内容区别" class="headerlink" title="4.3.1 内容区别"></a>4.3.1 内容区别</h4><ul><li>JWT是一种认证协议<br>JWT提供了一种用于发布接入<strong>令牌</strong>（Access Token)，并对发布的签名接入令牌进行验证的方法。 令牌（Token）本身包含了一系列声明，应用程序可以根据这些声明限制用户对资源的访问。</li></ul><blockquote><p>  一个token包含三部分：<strong>header</strong>、<strong>claims</strong>、<strong>signature</strong></p></blockquote><ul><li><p>OAuth2是一种安全的授权框架</p><p>提供了一套详细的授权机制。用户或应用可以通过公开的或私有的<strong>设置</strong>，授权<strong>第三方应用访问特定资源</strong>。 </p></li></ul><blockquote><p>Oauth2定义了一组想当复杂的规范。涉及到：Roles角色、Client Types客户端类型、Client Profile客户端描述、Authorization Grants认证授权、Endpoints终端等。</p></blockquote><h4 id="4-3-2-场景区别"><a href="#4-3-2-场景区别" class="headerlink" title="4.3.2 场景区别"></a>4.3.2 场景区别</h4><ul><li><p><strong>jwt应用场景</strong></p><p><strong>1）无状态的分布式API</strong></p></li></ul><blockquote><p> JWT的主要优势在于使用无状态、可扩展的方式处理应用中的用户会话。服务端可以通过内嵌编码的声明信息，很容易地获取用户的会话信息，而不需要去访问用户或会话的数据库。但是，如果系统中需要使用黑名单实现长期有效的token刷新机制，这种无状态的优势就不明显了。</p></blockquote><ul><li><p><strong>Oauth2应用场景</strong></p><p><strong>1）第三方认证服务器</strong></p><p><strong>2）大型企业解决方案</strong></p></li></ul><blockquote><p>API的使用依赖于外部的第三方认证提供者。去认证服务商 那里注册你的应用，然后设置需要访问的用户信息，比如电子邮箱、姓名等。当用户访问站点的注册页面时，会看到连接到第三方认证提供商的入口。用户点击以后被重定向到对应的认证服务商网站，获得用户的授权后就可以访问到需要的信息，然后重定向回来你的应用中。</p></blockquote><h4 id="4-3-3-归纳说明"><a href="#4-3-3-归纳说明" class="headerlink" title="4.3.3 归纳说明"></a>4.3.3 归纳说明</h4><ul><li><p>Oauth2和JWT是完全不同的两种东西，一个是授权认证的框架，另一种则是认证验证的方式方法。OAuth2不像JWT一样是一个严格的标准协议，因此在实施过程中更容易出错。</p></li><li><p>两种方案都需要SSL安全保护，也就是对要传输的数据进行加密编码。安全地传输用户提供的私密信息，在任何一个安全的系统里都是必要的。否则任何人都可以通过侵入网络，在用户登录的时候窃取用户的用户名和密码等信息。</p></li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ol><li>本篇主要是对<strong>Identity Server4</strong>的说明，认识到是一个基于OpenID Connect协议标准的身份认证和授权程序。</li><li>简单的涉及对基础知识的认识以及区别说明，从OAuth、OpenID、OpenID Connect以及JWT等进行对比区别说明。</li><li>在后续中会对<strong>Identity Server4</strong>中常用术语说明，多种授权模式，数据库持久化以及UI界面优化和常见问题，搭建一个完整可用的认证授权项目。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li></ol><h2 id="六、资料"><a href="#六、资料" class="headerlink" title="六、资料"></a>六、资料</h2><p><strong><a href="http://docs.identityserver.io/en/release/index.html">Identity Server 官方文档</a></strong></p><p><strong><a href="https://jwt.io/introduction/">JSON Web Token</a></strong></p><p><strong><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></strong></p><p><strong><a href="http://docs.identityserver.io/en/release/topics/grant_types.html">Identity Server 授权类型</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> IdentityServer4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 日志记录之初识Serilog</title>
      <link href="2020/08/30/ji-yu.netcore3.1-xi-lie-ri-zhi-ji-lu-zhi-chu-shi-serilog/"/>
      <url>2020/08/30/ji-yu.netcore3.1-xi-lie-ri-zhi-ji-lu-zhi-chu-shi-serilog/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-日志记录之初识Serilog"><a href="#基于-NetCore3-1系列-——-日志记录之初识Serilog" class="headerlink" title="基于.NetCore3.1系列 —— 日志记录之初识Serilog"></a>基于.NetCore3.1系列 —— 日志记录之初识Serilog</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对内置日志系统的整体实现进行了介绍之后，可以通过使用内置记录器来实现日志的输出路径。而在实际项目开发中，使用第三方日志框架（如： <a href="https://github.com/huorswords/Microsoft.Extensions.Logging.Log4Net.AspNetCore">Log4Net</a>、<a href="https://github.com/NLog/NLog.Extensions.Logging">NLog</a>、<a href="https://github.com/TSYS-Merchant/Loggr.Extensions.Logging">Loggr</a>、<a href="https://github.com/serilog/serilog-aspnetcore">Serilog</a>、<a href="https://github.com/getsentry/sentry-dotnet">Sentry</a> 等）来记录也是非常多的。首先一般基础的内置日志记录器在第三方日志框架中都有实现，然后第三方日志框架在功能上更加强大和丰富，能满足我们更多的项目分析和诊断的需求。</p><p>所以在这一篇中，我们将介绍第三方日志记录提供程序——<a href="https://serilog.net/">Serilog</a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>系统内置日志系列：</p><p><a href="https://www.cnblogs.com/i3yuan/p/13411793.html">1. 基于.NetCore3.1系列 —— 日志记录之日志配置揭秘</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/13442509.html">2. 基于.NetCore3.1系列 —— 日志记录之日志核心要素揭秘</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/13411793.html">3. 基于.NetCore3.1系列 —— 日志记录之自定义日志组件</a></p><p>从之前学习的内置日志系统中，我们根据日志配置的方式了解到了通过配置的方式，可以有效的输出日志记录，方便我们查找发现问题。</p><p>而在进一步对内部运行的主要核心机制进行深入探究后发现了内置日志记录的几个核心要素，在日志工厂记录器(<code>ILoggerFactory</code>)中实现将日志记录提供器(<code>ILoggerProvider</code>)对象都可以集成到<code>Logger</code>对象组合中，这样的话，我们就可以通过基于<code>ILoggerProvider</code>自定义日志记录程序集成到<code>Logger</code>中，再创建写日志定义<code>Ilogger</code>，自定义日志记录器实现日志的输出方式，这样实现自定义日志记录工具。</p><p>在最后我们通过自定义的方式简单的实现了自定义日志组件，在这个基础上，我们可以根据具体的需求进行完善修改。当然了，我们也可以借用第三方日志框架组件程序进行使用。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我们都知道日志记录在项目开发中或者生产环境中，都起到举足轻重的作用。因此，我们都会采用在项目加入第三方框架日志或自行封装日志记录来记录日志。</p><p>所以在这一篇中，我们会采用在项目中使用Serilog，目的不仅仅在于希望在用户使用之前发现代码中的BUG和错误，更多的是方便我们可以快速的查询生产环境的日志问题，深入的了解系统运行的表现。</p><p>从<strong>Serilog</strong>的官方介绍中，我们可以发现 其框架是.net中的诊断日志库，可以在所有的.net平台上运行。支持结构化日志记录，对复杂、分布式、异步应用程序的支持非常出色。</p><p><strong>Serilog</strong>是基于<strong>日志事件</strong>(log events),而不是日志消息(log message)。可以将<strong>日志事件</strong>格式化为控制台的<strong>可读文本</strong>或者将事件化为<strong>JSON</strong>格式。应用程序中的日志语句会创建<code>LogEvent</code>对象，而连接到管道的接收器（sinks）会知道如何记录它们。（接收器 包括各种终端、控制台、文本、SqlServer、ElasticSearch等等<a href="https://github.com/serilog/serilog/wiki/Provided-Sinks">可用的列表</a>）</p><blockquote><p><strong>结构化与非结构化之间的问题</strong>：</p><p>对于日志的处理，在大部分情况下，会权衡是否对开发者的友好型以及对程序解析的方便性。在很多情况下，开发者可能只是想记录一段日志而已，所以可以会考虑简单的加上一行代码来以达到记录日志的目的,如(<code>log.debug(&quot;Disk quota &#123;0&#125; exceeded by user &#123;1&#125;&quot;, quota, user);</code>)当然了，日志的执行结构可能被存于文本文件或者数据库中。这样的日志从开发者的角度来说，清晰易懂，十分友好。</p><p>但是如果后续要使用程序取查找海量的的上述例子在某段时间内的特定用户，则很难高效率地完成这一要求，因为需要对每个日志进行字符串解析。因此，我们就需要寻求更快更方便的方式来查找记录。</p><p><strong>非结构的日志：</strong></p><p>对自由格式文本的解析往往依赖于正则表达式，<strong>并且</strong>依赖于<em>不变的</em>文本。这会使解析自由格式的文本变得非常脆弱（即解析与代码中的确切文本紧密耦合）。</p><p>还考虑搜索/查找的情况，<em>例如</em>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">text</span> <span class="token keyword">FROM</span> logs <span class="token keyword">WHERE</span> <span class="token keyword">text</span> <span class="token operator">LIKE</span> <span class="token string">"Disk quota"</span><span class="token punctuation">;</span></code></pre><p><code>LIKE</code>条件需要与每个<code>text</code>行值进行比较；再次，这在计算上是相对浪费的，<em>尤其是</em>在使用通配符时：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">text</span> <span class="token keyword">FROM</span> logs <span class="token keyword">WHERE</span> <span class="token keyword">text</span> <span class="token operator">LIKE</span> <span class="token string">"Disk %"</span><span class="token punctuation">;</span></code></pre><p><strong>结构化的日志：</strong></p><p>使用结构化日志记录，与磁盘错误相关的日志消息在JSON中可能如下所示：</p><pre><code>&#123; &quot;level&quot;: &quot;DEBUG&quot;, &quot;user&quot;: &quot;username&quot;, &quot;error_type&quot;: &quot;disk&quot;, &quot;text&quot;: &quot;Disk quota ... exceeded by user ...&quot; &#125;</code></pre><p>这种结构的字段可以很容易地映射到<em>例如</em> SQL表列名，这意味着查找可以更具体/更细粒度：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">user</span><span class="token punctuation">,</span> <span class="token keyword">text</span> <span class="token keyword">FROM</span> logs <span class="token keyword">WHERE</span> error_type <span class="token operator">=</span> <span class="token string">"disk"</span><span class="token punctuation">;</span></code></pre><p>您可以在希望经常搜索/查找其值的列上放置索引，<em>只要您不对<code>LIKE</code>这些列值使用子句即可</em>。您可以将日志消息细分为特定类别的内容越多，查找的对象就越有针对性。例如，除了<code>error_type</code>上面示例中的字段/列之外，您甚至可以设置为be <code>&quot;error_category&quot;: &quot;disk&quot;, &quot;error_type&quot;: &quot;quota&quot;</code>或诸如此类。</p><p>结构越多，你的日志消息，通过解析/检索系统（如<code>fluentd</code>，<code>elasticsearch</code>，<code>kibana</code>），可以利用该结构，并以更快的速度和更低的CPU /内存执行任务。</p><p><strong>总之</strong>这不仅与速度和效率有关，更重要的是使用结构化日志记录和“结构化查询”时，能以特定格式捕获以及呈现结构化日志，同时提供对开发者与程序友好的解析支持。可以更方便地以其为条件进行筛选，搜索结果的相关性将更高。如果没有这种搜索，那么在不同上下文中出现的任何单词都会给您带来大量无关的点击。</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>为了更好的理解认识Serilog,我们这简单的创建一个新的项目来认识一下Serilog的使用。这里我们就简单的使用<code>Console</code>和<code>Debug</code>的方式来实现，后续有机会我们可以实现更多方式的接收器写入日志。</p><h3 id="4-1-Serilog使用"><a href="#4-1-Serilog使用" class="headerlink" title="4.1 Serilog使用"></a>4.1 <strong>Serilog使用</strong></h3><h4 id="4-1-1-安装依赖包"><a href="#4-1-1-安装依赖包" class="headerlink" title="4.1.1 安装依赖包"></a>4.1.1 安装依赖包</h4><p>Serilog.AspNetCore : 基于AspNetCore框架整合的Serilog日志记录程序包，包含了Serilog基本库和控制台日志的实现。</p><blockquote><p>当然了，你也可以直接安装<strong>Serilog</strong> 基本库，然后根据需要安装对应的拓展包。</p><p>说明：</p><ul><li>Serilog.Extensions.Logging 包含了注入了Serilog的拓展方法。</li><li>Serilog.Sinks.Async 实现了日志异步收集。</li><li>Serilog.Sinks.Console 实现了控制台输出日志。</li><li>Serilog.Sinks.Debug 实现了调试台输出日志。</li><li>Serilog.Sinks.File 实现了文件输出日志。</li></ul></blockquote><h4 id="4-1-2-配置Serilog"><a href="#4-1-2-配置Serilog" class="headerlink" title="4.1.2 配置Serilog"></a>4.1.2 配置Serilog</h4><p>在应用程序中<code>Program.cs</code>文件中，配置Serilog记录，确保正确记录任何配置日志问题。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span>MinimumLevel<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span>MinimumLevel<span class="token punctuation">.</span><span class="token function">Override</span><span class="token punctuation">(</span><span class="token string">"Microsoft"</span><span class="token punctuation">,</span> LogEventLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span>       <span class="token punctuation">.</span>Enrich<span class="token punctuation">.</span><span class="token function">FromLogContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Console</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">Information</span><span class="token punctuation">(</span><span class="token string">"Starting web host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">"Host terminated unexpectedly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">CloseAndFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>然后，添加<code>UseSerilog()</code>到<code>CreateHostBuilder()</code>中的通用主机中。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从appsettings.json中读取配置。</span>         <span class="token punctuation">.</span><span class="token function">UseSerilog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;-- Add this line</span>        <span class="token punctuation">.</span><span class="token function">ConfigureLogging</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">,</span> logging<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            logging<span class="token punctuation">.</span><span class="token function">ClearProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去掉默认添加的日志提供程序</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后，通过删除默认记录器的其余配置进行清理，从<code>appsettings.json</code>文件中删除<code>Logging</code>对应的配置部分。可以再使用根据<code>Serilog</code>的配置规则进行相应配置替换它。</p><blockquote><pre class=" language-json"><code class="language-json"><span class="token property">"Serilog"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"MinimumLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Information"</span><span class="token punctuation">,</span><span class="token property">"Override"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"Microsoft"</span><span class="token operator">:</span> <span class="token string">"Warning"</span><span class="token punctuation">,</span><span class="token property">"System"</span><span class="token operator">:</span> <span class="token string">"Warning"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h4 id="4-1-3-提示"><a href="#4-1-3-提示" class="headerlink" title="4.1.3 提示"></a>4.1.3 提示</h4><p>当在IIS下运行时候，要在Visual Studio输出窗口中查看Serilog输出日志的时候，需要将输出方式选择为 Web 服务器方式，输出窗口查看日志，或者使用<code>WriteTo.Debug()</code>替换记录器配置中的<code>WriteTo.Console()</code>。</p><h3 id="4-2-输出格式"><a href="#4-2-输出格式" class="headerlink" title="4.2 输出格式"></a>4.2 <strong>输出格式</strong></h3><h4 id="4-2-1-文本格式"><a href="#4-2-1-文本格式" class="headerlink" title="4.2.1 文本格式"></a>4.2.1 文本格式</h4><p>作为文本，它的格式如下：</p><pre class=" language-c#"><code class="language-c#">[21:45:15 INF]  HTTP GET / responded 200 in 227.3253 ms</code></pre><p>测试在控制台中输出如下：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200827222706123-1630131750.png"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200827222706123-1630131750.png" alt="serilog"></a></p><p>上述事件格式中，可以看出由以下几个格式组成：</p><ul><li>事件发生时的<strong>时间戳</strong>[<strong>timestamp</strong>]</li><li>描述何时应该捕获事件的<strong>级别</strong>[<strong>level</strong>]</li><li>记录事件的消息[<strong>message</strong>]内容]</li><li>描述事件的命名<strong>属性</strong>[<strong>properties</strong>]</li><li>还可能有一个<strong>Exception</strong>对象</li></ul><h4 id="4-2-2-JSON格式"><a href="#4-2-2-JSON格式" class="headerlink" title="4.2.2 JSON格式"></a>4.2.2 JSON格式</h4><p>作为JSON格式，它的格式如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"@t"</span><span class="token operator">:</span> <span class="token string">"2020-08-27T13:59:44.6410761Z"</span><span class="token punctuation">,</span>  <span class="token property">"@mt"</span><span class="token operator">:</span> <span class="token string">"HTTP {RequestMethod} {RequestPath} responded {StatusCode} in {Elapsed:0.0000} ms"</span><span class="token punctuation">,</span>  <span class="token property">"@r"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"224.5185"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"RequestMethod"</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>  <span class="token property">"RequestPath"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>  <span class="token property">"StatusCode"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>  <span class="token property">"Elapsed"</span><span class="token operator">:</span> <span class="token number">224.5185</span><span class="token punctuation">,</span>  <span class="token property">"RequestId"</span><span class="token operator">:</span> <span class="token string">"0HLNPVG1HI42T:00000001"</span><span class="token punctuation">,</span>  <span class="token property">"CorrelationId"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>  <span class="token property">"ConnectionId"</span><span class="token operator">:</span> <span class="token string">"0HLNPVG1HI42T"</span><span class="token punctuation">}</span></code></pre><p>在写入日志文件中，根据Serilog的多种接收器的中（Console()、Debug()、File()）等支持使用JSON写入日志记录，通过引用紧凑的JSON格式化类库**[Serilog.Formatting.Compact]**接收所有JSON格式的输出。</p><p>要编写以换行符分隔的JSON，请将<code>CompactJsonFormatter</code>或<code>RenderedCompactJsonFormatter</code>传递到接收器配置方法,如下：</p><pre><code> .WriteTo.Console(new RenderedCompactJsonFormatter()) 或  .WriteTo.Console(new CompactJsonFormatter())</code></pre><p>运行这个程序将产生使用Serilog的紧凑格式JSON，并在对应的输出路径中生成换行符分隔的JSON流。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200827222753752-961473024.png"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200827222753752-961473024.png" alt="serilog"></a></p><h3 id="4-3-示例"><a href="#4-3-示例" class="headerlink" title="4.3 示例"></a>4.3 <strong>示例</strong></h3><h4 id="4-3-1-安装依赖包"><a href="#4-3-1-安装依赖包" class="headerlink" title="4.3.1 安装依赖包"></a>4.3.1 安装依赖包</h4><p>安装 <code>Serilog.AspNetCore</code> NuGet 包 ；</p><h4 id="4-3-2-配置文件"><a href="#4-3-2-配置文件" class="headerlink" title="4.3.2 配置文件"></a>4.3.2 配置文件</h4><p>在<code>appsettings.json</code>配置文件添加 <code>Serilog</code> 配置，<code>WriteTo</code> 指定输出目标位置，它是一个数组类型，所以可以指定多个目标位置，这里暂时只指定输出到控制台：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"Serilog"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"MinimumLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Debug"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-3-设置配置信息"><a href="#4-3-3-设置配置信息" class="headerlink" title="4.3.3 设置配置信息"></a>4.3.3 设置配置信息</h4><p>读取配置文件信息，设置配置信息</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IConfiguration Configuration <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">SetBasePath</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span>$<span class="token string">"appsettings.{Environment.GetEnvironmentVariable("</span>ASPNETCORE_ENVIRONMENT<span class="token string">") ?? "</span>Production<span class="token string">"}.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">AddEnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在main方法中，</p><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span>ReadFrom<span class="token punctuation">.</span><span class="token function">Configuration</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span>         <span class="token punctuation">.</span>Enrich<span class="token punctuation">.</span><span class="token function">FromLogContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//输出路径</span>         <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Console</span><span class="token punctuation">(</span>         outputTemplate<span class="token punctuation">:</span> <span class="token string">"[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} {Properties:j}{NewLine}{Exception}"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//模板</span>         <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         Log<span class="token punctuation">.</span><span class="token function">Information</span><span class="token punctuation">(</span><span class="token string">"Starting web host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         Log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">"Host terminated unexpectedly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">finally</span>     <span class="token punctuation">{</span>         Log<span class="token punctuation">.</span><span class="token function">CloseAndFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>在<code>Program.cs</code> 添加 <code>UseSerilog</code>()</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>      webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">UseSerilog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//添加</span></code></pre><h4 id="4-3-4-设置请求管道"><a href="#4-3-4-设置请求管道" class="headerlink" title="4.3.4 设置请求管道"></a>4.3.4 设置请求管道</h4><p>在 Startup.cs 的 中的<code>Configure</code> 请求管道中添加 <code>UseSerilogRequestLogging</code>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseSerilogRequestLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重要的是<code>UseSerilogRequestLogging()</code>调用应出现在诸如MVC之类的处理程序之前。 中间件不会对管道中出现在它之前的组件进行时间或日志记录。通过将<code>UseSerilogRequestLogging()</code>放在它们之后，可以将其用于从日志中排除杂乱的处理程序，例如UseStaticFiles()。）</p><blockquote><p>为了减少每个HTTP请求需要构造，传输和存储的日志事件的数量。 在同一事件上具有许多属性还可以使请求详细信息和其他数据的关联更加容易。</p><p>默认情况下，以下请求信息将作为属性添加：</p><ul><li>请求方法</li><li>请求路径</li><li>状态码</li><li>响应时间</li></ul><p>您可以使用<code>UseSerilogRequestLogging()</code>上的选项回调来修改用于请求完成事件的消息模板，添加其他属性或更改事件级别：</p><pre class=" language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseSerilogRequestLogging</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 自定义消息模板</span>    options<span class="token punctuation">.</span>MessageTemplate <span class="token operator">=</span> <span class="token string">"Handled {RequestPath}"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发出调试级别的事件，而不是默认事件</span>    options<span class="token punctuation">.</span>GetLevel <span class="token operator">=</span> <span class="token punctuation">(</span>httpContext<span class="token punctuation">,</span> elapsed<span class="token punctuation">,</span> ex<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> LogEventLevel<span class="token punctuation">.</span>Debug<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//将其他属性附加到请求完成事件</span>    options<span class="token punctuation">.</span>EnrichDiagnosticContext <span class="token operator">=</span> <span class="token punctuation">(</span>diagnosticContext<span class="token punctuation">,</span> httpContext<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        diagnosticContext<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"RequestHost"</span><span class="token punctuation">,</span> httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>        diagnosticContext<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"RequestScheme"</span><span class="token punctuation">,</span> httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Scheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h4 id="4-3-5-输出效果"><a href="#4-3-5-输出效果" class="headerlink" title="4.3.5 输出效果"></a>4.3.5 输出效果</h4><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200830153324433-2087166203.png"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200830153324433-2087166203.png" alt="serilog"></a></p><p>由于日志总是输出一堆，我们不能快速的查找定位问题，其实 <code>Serilog</code> 输出的日志是非常简洁的，只有 <code>HTTP GET ...</code> 这一条，其他都是 AspNetCore 系统本身输出的，所以我们可以对输出的日志进行简化操作。</p><h4 id="4-3-6-输出简化"><a href="#4-3-6-输出简化" class="headerlink" title="4.3.6 输出简化"></a>4.3.6 输出简化</h4><p>为了使日志输出更简洁，我们可以设置不输出 AspNetCore Info 日志，只需在 <code>Serilog</code>配置节点中设置 AspNetCore 日志输出级别为 <code>Warning</code>：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"Serilog"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"MinimumLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span>      <span class="token property">"Override"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"Microsoft"</span><span class="token operator">:</span> <span class="token string">"Warning"</span><span class="token punctuation">,</span>        <span class="token property">"System"</span><span class="token operator">:</span> <span class="token string">"Warning"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200830153256242-2031428928.png"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200830153256242-2031428928.png" alt="serilog"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>本篇主要是对<strong>Serilog</strong>的说明，认识到是一个基于日志事件的而非日志消息的结构化日志类库。</li><li>简单的涉及对基础知识的认识以及使用，通过构建一个新的项目来实现Serilog的日志记录以及怎么使用这个框架。</li><li>在后续中如何结合这个日志类库引入项目中使用，以及对日志怎么存储和查询进行说明（会考虑 ELK存储采集分析 ）。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li>本文中参考资料： <a href="https://serilog.net/">官方简介</a> 、<a href="https://github.com/serilog/serilog/wiki/Getting-Started">Serilog文档</a>、<a href="https://github.com/serilog/serilog-aspnetcore">serilog-aspnetcore</a></li><li>本文<a href="https://files-cdn.cnblogs.com/files/i3yuan/Logging.Core.Serilog.rar">源码下载地址</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> Logging </tag>
            
            <tag> Serilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 基于.NetCore3.1系列 —— 日志记录之自定义日志组件</title>
      <link href="2020/08/11/ji-yu.netcore3.1-xi-lie-ri-zhi-ji-lu-zhi-zi-ding-yi-ri-zhi-zu-jian/"/>
      <url>2020/08/11/ji-yu.netcore3.1-xi-lie-ri-zhi-ji-lu-zhi-zi-ding-yi-ri-zhi-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-日志记录之自定义日志组件"><a href="#基于-NetCore3-1系列-——-日志记录之自定义日志组件" class="headerlink" title="基于.NetCore3.1系列 —— 日志记录之自定义日志组件"></a>基于.NetCore3.1系列 —— 日志记录之自定义日志组件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>回顾：<a href="https://www.cnblogs.com/i3yuan/p/13442509.html">日志记录之日志核心要素揭秘</a></p><p>在上一篇中，我们通过学习了解在.net core 中内置的日志记录中的几大核心要素，在日志工厂记录器(<code>ILoggerFactory</code>)中实现将日志记录提供器(<code>ILoggerProvider</code>)对象都可以集成到<code>Logger</code>对象组合中，这样的话，我们就可以通过基于<code>ILoggerProvider</code>自定义日志记录程序集成到<code>Logger</code>中，再创建写日志定义<code>Ilogger</code>，自定义日志记录器实现日志的输出方式，这样实现自定义日志记录工具。</p><p>在这个过程中，日志记录器<code>ILogger</code>中的<strong>Log()**方法会记录执行日志，通过在<code>ILoggerFactory</code>产生的是<code>ILogger</code>类型（也就是我们最终使用的<code>Logger</code>），其</strong>Log()<strong>方法是依次调用<code>Logger</code>中包含的<code>LoggerInformation[]</code>数组中的<code>ILogger</code>。而<code>ILoggerProvider</code>产生的为各类不同的XxxLogger（也就是上面说的<code>Logger</code>中的<code>LoggerInformation</code>数组包含的如ConsoleLogger、<code>DebugLogger</code>），其</strong>Log()**方法是把日志写到具体的目标上去，所以我们自定义的日志程序也可以在日志记录器工厂中实现添加日志程序，达到将日志写到具体目标的作用。</p><p>所以下文我们通过自定义的方式实现<code>ILogger</code>、<code>ILoggerProvider</code>两个接口来实现我们自己想要的日志记录程序，实现自定义输出目标方式。（下文只是简单的根据接口自定义实现输出日志记录到控制台的demo）</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200810225315400-475690883.jpg"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200810225315400-475690883.jpg" alt="img"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="2-1-自定义Logger"><a href="#2-1-自定义Logger" class="headerlink" title="2.1 自定义Logger"></a>2.1 自定义Logger</h3><p>创建一个自定义Logger，目的是将指定的等级日志输出到控制台。所以我们创建一个<code>ExtensionLogger</code>的类，指定输出的日志等级。所以在这之前，我们需要配置一下输入日志的等级，因此我们需要增加一个等级的配置类<code>ExtensionsConfiguration</code>。</p><p>在<code>ExtensionsConfiguration</code>中，</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionsConfiguration</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 日志等级</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> LogLevel LogLevel <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> LogLevel<span class="token punctuation">.</span>Warning<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再自定义日志记录类<code>ExtensionLogger</code>，实现接口<code>ILogger</code>,</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionsLogger</span> <span class="token punctuation">:</span> ILogger<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> ExtensionsConfiguration _config<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExtensionsLogger</span><span class="token punctuation">(</span>ExtensionsConfiguration extensionsConfiguration<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _config <span class="token operator">=</span> extensionsConfiguration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IDisposable <span class="token generic-method function">BeginScope<span class="token punctuation">&lt;</span>TState<span class="token punctuation">></span></span><span class="token punctuation">(</span>TState state<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">IsEnabled</span><span class="token punctuation">(</span>LogLevel logLevel<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> logLevel <span class="token operator">==</span> _config<span class="token punctuation">.</span>LogLevel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token generic-method function">Log<span class="token punctuation">&lt;</span>TState<span class="token punctuation">></span></span><span class="token punctuation">(</span>LogLevel logLevel<span class="token punctuation">,</span> EventId eventId<span class="token punctuation">,</span> TState state<span class="token punctuation">,</span>        Exception exception<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>TState<span class="token punctuation">,</span> Exception<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> formatter<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEnabled</span><span class="token punctuation">(</span>logLevel<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">" {logLevel} - {eventId.Id} : "</span> <span class="token operator">+</span> <span class="token function">formatter</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据<code>ILogger</code>接口实现，其中实现<code>Log()</code>接口方法，将日志输出到指定目标，这里是输出到控制台，在设置了日志等级的情况条件下，当满足条件后，才能输出对应的日志。</p><h3 id="2-2-自定义LoggerProvider"><a href="#2-2-自定义LoggerProvider" class="headerlink" title="2.2 自定义LoggerProvider"></a>2.2 自定义LoggerProvider</h3><p>在创建了日志输出记录后，我们同时需要提供一个日志程序来增加和创建上面的<code>Logger</code>记录，所以我们通过自定义日志提供器类<code>ExtensionsLoggerProvider</code>,实现<code>ILoggerProvider</code>类。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionsLoggerProvider</span> <span class="token punctuation">:</span> ILoggerProvider<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> ExtensionsConfiguration _config<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExtensionsLoggerProvider</span><span class="token punctuation">(</span>ExtensionsConfiguration extensionsConfiguration<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _config <span class="token operator">=</span> extensionsConfiguration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ILogger <span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token keyword">string</span> categoryName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionsLogger</span><span class="token punctuation">(</span>_config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>基于<code>ILoggerProvider</code>接口实现自定义类，实现方法<code>CreateLogger</code>,来创建上面的日志记录。</p><h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><p>在Startup.cs中,通过<code>Configure</code>方法调用配置日志记录。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env <span class="token punctuation">,</span> ILoggerFactory loggerFactory<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注入ILogggerFactory,然后配置参数</span>        <span class="token comment" spellcheck="true">//添加日志等级</span>        loggerFactory<span class="token punctuation">.</span><span class="token function">AddProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExtensionsLoggerProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExtensionsConfiguration</span> <span class="token punctuation">{</span> LogLevel<span class="token operator">=</span> LogLevel<span class="token punctuation">.</span>Warning <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在此之前，我们可以清空默认的配置，然后根据日志等级，在控制台中输出对应的日志记录。</p><h3 id="2-4-效果"><a href="#2-4-效果" class="headerlink" title="2.4 效果"></a>2.4 效果</h3><p>在等级为<code>Information</code>情况下，输出效果如下：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200810224124542-1281485756.png"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200810224124542-1281485756.png" alt="img"></a></p><p>这个就是我们通过自定义的方式实现的按日志等级输出的记录。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="3-1-写入本地文件"><a href="#3-1-写入本地文件" class="headerlink" title="3.1 写入本地文件"></a>3.1 写入本地文件</h3><p>第一步：为LoggerFactory扩张一个方法，提供增加日志写文件方式的入口。相关的配置来自appsettings.json</p><p>第二步：实现我们的logger提供程序，实现ILoggerProvider接口，关键方法CreateLogger，创建真正写日志的logger。对当前的logger可以做适当的缓存，配置logger</p><p>第三步：实现我们的logger，实现ILogger接口。真正将log写入file。</p><blockquote><p>这里可以参考网友的资料 ：<a href="https://www.cnblogs.com/calvinK/p/5673218.html">.Net Core Logger 实现log写入本地文件系统</a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>上文中，我们通过自定义的方式实现了根据日志等级将日志记录输出到指定目标的方式，在这种基础上，我们可以根据具体的需求做完善修改，实现自己的日志记录输出方式。</li><li>除了我们通过自定义的方式之外，我们也可以借用第三方日志框架组件程序进行使用，根据拓展方法进行调用，在后续中我们会使用第三方日志记录程序来实现日志记录的输出。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li>官方<a href="https://github.com/dotnet/extensions/tree/master/src/Logging">源码</a> 和 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/logging/?view=aspnetcore-3.1">参考资料</a></li><li>本文<a href="https://files-cdn.cnblogs.com/files/i3yuan/Logging.Core.rar">项目源码下载</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> Logging </tag>
            
            <tag> aspnetcore源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 日志记录之日志核心要素揭秘</title>
      <link href="2020/08/05/ji-yu.netcore3.1-xi-lie-ri-zhi-ji-lu-zhi-ri-zhi-he-xin-yao-su-jie-mi/"/>
      <url>2020/08/05/ji-yu.netcore3.1-xi-lie-ri-zhi-ji-lu-zhi-ri-zhi-he-xin-yao-su-jie-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-日志记录之日志核心要素揭秘"><a href="#基于-NetCore3-1系列-——-日志记录之日志核心要素揭秘" class="headerlink" title="基于.NetCore3.1系列 —— 日志记录之日志核心要素揭秘"></a>基于.NetCore3.1系列 —— 日志记录之日志核心要素揭秘</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>回顾：<a href="https://www.cnblogs.com/i3yuan/p/13411793.html">日志记录之日志配置揭秘</a><br>在<a href="https://www.cnblogs.com/i3yuan/p/13411793.html">上一篇</a>中，我们已经了解了内置系统的默认配置和自定义配置的方式，在学习了配置的基础上，我们进一步的对日志在程序中是如何使用的深入了解学习。所以在这一篇中，主要是对日志记录的核心机制进行学习说明。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200805215124725-1430080791.gif"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200805215124725-1430080791.gif" alt="logging"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在上一篇中，我们留下了两个问题</p><blockquote><ol><li>日志记录的输出可以在哪里查看？而又由什么实现决定的呢？</li><li>如何管理输出不同的日志呢？都有哪些方式呢？</li></ol></blockquote><p>第一个问题：在官方的实现有：Console 、Debug 、EventSource 、EventLog 、TraceSource 、Azure App Service，还有一些第三方实现，当然了我们自己也是可以实现的。 是由<code>ILoggerProvider</code>接口来决定实现的。</p><p>第二个问题：由 log Level、EventId、Logger Provider、Log filtering、Log category、Log scopes 合作解决。</p><p>由上面的问题可以发现，我们可以实现多种不同的输出目标方式来实现写日志记录，但是又如何控制在写日志这个操作不变的情况下，实现不同的输入目标，这个时候我们就会想到，可以通过抽象的方式，<strong>将写日志这个操作动作抽象出来，而输出目标依赖这个动作实现具体的操作。所以当我们调用写日志操作方法的时候，由此依次调用对应的具体实现方法，把日志写到具体的目标上。</strong></p><p>这个过程具体是怎么实现的呢？我们接着往下看。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>其实在学习之前，我们应该都已经了解.net core框架有一个重要的特征就是依赖注入，通过在应用启动时候，将各种定义好的实现类型放入到一个集合容器中，通过在运行时，将从集合容器中取出放入对应的类型中。</p><p>日志记录的的实现方式也离不开这个。下面让我们一起来看看。</p><h3 id="3-1-日志记录器工厂"><a href="#3-1-日志记录器工厂" class="headerlink" title="3.1 日志记录器工厂"></a>3.1 日志记录器工厂</h3><h4 id="3-1-1-ILoggerFactory-接口"><a href="#3-1-1-ILoggerFactory-接口" class="headerlink" title="3.1.1 ILoggerFactory 接口"></a>3.1.1 ILoggerFactory 接口</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoggerFactory</span> <span class="token punctuation">:</span> IDisposable<span class="token punctuation">{</span>    ILogger <span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token keyword">string</span> categoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">AddProvider</span><span class="token punctuation">(</span>ILoggerProvider provider<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ILoggerFactory</code>是日志记录器的工厂接口类，用于配置日志记录系统并创建Logger实例的类，默认实现两个接口方法为，通过<code>CreateLogger()</code>方法来创建<code>ILogger</code>实例，（其中参数<code>categoryName</code>是一个日志类别，用于调用<code>Logger</code>所在类的全名，类别指明日志消息是谁写入的，一般我们将日志所属的的组件、服务或者消息类型名称作为日志类别。） 而<code>AddProvider()</code>添加日志记录提供程序，向日志系统注册添加一个<code>ILoggerProvider</code>。工厂接口类的默认实现类为<code>LoggerFactory</code>, 我们继续往下看：</p><h4 id="3-1-2-LoggerFactory-实现"><a href="#3-1-2-LoggerFactory-实现" class="headerlink" title="3.1.2 LoggerFactory 实现"></a>3.1.2 LoggerFactory 实现</h4><p><strong>ILoggerFactory</strong> 的默认实现是 <strong>LoggerFactory</strong> ,在构造函数中，如下：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerFactory</span> <span class="token punctuation">:</span> ILoggerFactory    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> LoggerRuleSelector RuleSelector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerRuleSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Logger<span class="token operator">></span> _loggers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Logger<span class="token operator">></span><span class="token punctuation">(</span>StringComparer<span class="token punctuation">.</span>Ordinal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> List<span class="token operator">&lt;</span>ProviderRegistration<span class="token operator">></span> _providerRegistrations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>ProviderRegistration<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">object</span> _sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">bool</span> _disposed<span class="token punctuation">;</span>        <span class="token keyword">private</span> IDisposable _changeTokenRegistration<span class="token punctuation">;</span>        <span class="token keyword">private</span> LoggerFilterOptions _filterOptions<span class="token punctuation">;</span>        <span class="token keyword">private</span> LoggerExternalScopeProvider _scopeProvider<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">LoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>Enumerable<span class="token punctuation">.</span><span class="token generic-method function">Empty<span class="token punctuation">&lt;</span>ILoggerProvider<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">LoggerFactory</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>ILoggerProvider<span class="token operator">></span> providers<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>providers<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StaticFilterOptionsMonitor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggerFilterOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">LoggerFactory</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>ILoggerProvider<span class="token operator">></span> providers<span class="token punctuation">,</span> LoggerFilterOptions filterOptions<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>providers<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StaticFilterOptionsMonitor</span><span class="token punctuation">(</span>filterOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">LoggerFactory</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>ILoggerProvider<span class="token operator">></span> providers<span class="token punctuation">,</span> IOptionsMonitor<span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span> filterOption<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> provider <span class="token keyword">in</span> providers<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">AddProviderRegistration</span><span class="token punctuation">(</span>provider<span class="token punctuation">,</span> dispose<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            _changeTokenRegistration <span class="token operator">=</span> filterOption<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span>RefreshFilters<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RefreshFilters</span><span class="token punctuation">(</span>filterOption<span class="token punctuation">.</span>CurrentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">AddProviderRegistration</span><span class="token punctuation">(</span>ILoggerProvider provider<span class="token punctuation">,</span> <span class="token keyword">bool</span> dispose<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _providerRegistrations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProviderRegistration</span>            <span class="token punctuation">{</span>                Provider <span class="token operator">=</span> provider<span class="token punctuation">,</span>                ShouldDispose <span class="token operator">=</span> dispose            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token keyword">is</span> ISupportExternalScope supportsExternalScope<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>_scopeProvider <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _scopeProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerExternalScopeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                supportsExternalScope<span class="token punctuation">.</span><span class="token function">SetScopeProvider</span><span class="token punctuation">(</span>_scopeProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>从<code>LoggerFactory</code> 中 的构造函数中可以发现，通过注入的方式获取到<code>ILoggerProvider</code>（这个在下文中会说明），并调用<code>AddProviderRegistration</code>方法添加注册程序，将<code>ILoggerProvider</code>保存到<code>ProviderRegistration</code>集合中。</p><blockquote><p><strong>AddProviderRegistration</strong> 方法：</p><p>这是一个日志程序提供器，将<code>ILoggerProvider</code>保存到<code>ProviderRegistration</code>集合中。当日志提供器实现 <strong>ISupportExternalScope</strong> 接口将单例 <strong>LoggerExternalScopeProvider</strong> 保存到 provider._scopeProvider 中。</p></blockquote><blockquote><p><strong>ProviderRegistration</strong>集合:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">struct</span> ProviderRegistration<span class="token punctuation">{</span>   <span class="token keyword">public</span> ILoggerProvider Provider<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">bool</span> ShouldDispose<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中的 <strong>ShouldDispose</strong> 字段标识在在<code>LoggerFactory</code>生命周期结束之后，该<code>ILoggerProvider</code>是否需要释放。虽然在系统中<code>LoggerFactory</code>为单例模式，但是其提供了一个静态方法生成一个可释放的<code>DisposingLoggerFactory</code>。</p></blockquote><p>在<code>LoggerFactory</code> 实现默认的接口方法<code>CreateLogger()</code>,<code>AddProvider()</code></p><p>查看源码如下：</p><p><strong>CreateLogger</strong></p><p>创建<code>ILogger</code>实例，<code>CreateLogger()</code> 源码如下：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerFactory</span> <span class="token punctuation">:</span> ILoggerFactory    <span class="token punctuation">{</span>         <span class="token keyword">private</span> <span class="token keyword">readonly</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Logger<span class="token operator">></span> _loggers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Logger<span class="token operator">></span><span class="token punctuation">(</span>StringComparer<span class="token punctuation">.</span>Ordinal<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">private</span> <span class="token keyword">readonly</span> List<span class="token operator">&lt;</span>ProviderRegistration<span class="token operator">></span> _providerRegistrations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>ProviderRegistration<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">struct</span> ProviderRegistration        <span class="token punctuation">{</span>            <span class="token keyword">public</span> ILoggerProvider Provider<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">bool</span> ShouldDispose<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ILogger <span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token keyword">string</span> categoryName<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">CheckDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ObjectDisposedException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>LoggerFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">lock</span> <span class="token punctuation">(</span>_sync<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_loggers<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>categoryName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> logger<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span>                    <span class="token punctuation">{</span>                        Loggers <span class="token operator">=</span> <span class="token function">CreateLoggers</span><span class="token punctuation">(</span>categoryName<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span>logger<span class="token punctuation">.</span>MessageLoggers<span class="token punctuation">,</span> logger<span class="token punctuation">.</span>ScopeLoggers<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ApplyFilters</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>Loggers<span class="token punctuation">)</span><span class="token punctuation">;</span>                    _loggers<span class="token punctuation">[</span>categoryName<span class="token punctuation">]</span> <span class="token operator">=</span> logger<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> logger<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> LoggerInformation<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">CreateLoggers</span><span class="token punctuation">(</span><span class="token keyword">string</span> categoryName<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> loggers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerInformation</span><span class="token punctuation">[</span>_providerRegistrations<span class="token punctuation">.</span>Count<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _providerRegistrations<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                loggers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerInformation</span><span class="token punctuation">(</span>_providerRegistrations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Provider<span class="token punctuation">,</span> categoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> loggers<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>从源码可以看出，<code>CreateLogger</code>方法中，会检测资源是否被释放，在方法中，根据内部定义的字典集合<code>Dictionary _loggers</code>,判断字典中是否存在对应的<code>Logger</code>属性对象，如果不存在，会调用<code>CreateLoggers</code>方法根据之前注册的的所有<code>ILoggerProvider</code>所创建出来 <strong>ProviderRegistration</strong> 集合来实现创建<code>Logger</code>属性集合（根据日志类别生成了对应实际的日志写入类<code>FileLogger</code>、<code>ConsoleLogger</code>等），并通过字典集合的方式保存<code>categoryName</code>和对应的<code>Logger</code>。</p><blockquote><p>创建 <strong>Logger</strong> 需要的 <code>LoggerInformation[]</code></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> LoggerInformation<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token function">LoggerInformation</span><span class="token punctuation">(</span>ILoggerProvider provider<span class="token punctuation">,</span> <span class="token keyword">string</span> category<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ProviderType <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Logger <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>Category <span class="token operator">=</span> category<span class="token punctuation">;</span>ExternalScope <span class="token operator">=</span> provider <span class="token keyword">is</span> ISupportExternalScope<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> ILogger Logger <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">string</span> Category <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> Type ProviderType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">bool</span> ExternalScope <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据注册的<strong>ILoggerProvider</strong>，创建<code>ILogger</code> 其中的字段说明：</p><p>Logger ：具体日志类别写入途径实现类</p><p>Category ： 日志类别名称</p><p>ProviderType ： 日志提供器Type</p><p>ExternalScope ：是否支持 ExternalScope</p></blockquote><p>继续看<code>CreateLogger</code>方法，在创建<code>Logger</code>之后，还调用了<code>ApplyFilters</code>方法：</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">private</span> <span class="token punctuation">(</span>MessageLogger<span class="token punctuation">[</span><span class="token punctuation">]</span> MessageLoggers<span class="token punctuation">,</span> ScopeLogger<span class="token punctuation">[</span><span class="token punctuation">]</span> ScopeLoggers<span class="token punctuation">)</span> <span class="token function">ApplyFilters</span><span class="token punctuation">(</span>LoggerInformation<span class="token punctuation">[</span><span class="token punctuation">]</span> loggers<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> messageLoggers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>MessageLogger<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> scopeLoggers <span class="token operator">=</span> _filterOptions<span class="token punctuation">.</span>CaptureScopes <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>ScopeLogger<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> loggerInformation <span class="token keyword">in</span> loggers<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                RuleSelector<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>_filterOptions<span class="token punctuation">,</span>                    loggerInformation<span class="token punctuation">.</span>ProviderType<span class="token punctuation">,</span>                    loggerInformation<span class="token punctuation">.</span>Category<span class="token punctuation">,</span>                    <span class="token keyword">out</span> <span class="token keyword">var</span> minLevel<span class="token punctuation">,</span>                    <span class="token keyword">out</span> <span class="token keyword">var</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>minLevel <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> minLevel <span class="token operator">></span> LogLevel<span class="token punctuation">.</span>Critical<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                messageLoggers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageLogger</span><span class="token punctuation">(</span>loggerInformation<span class="token punctuation">.</span>Logger<span class="token punctuation">,</span> loggerInformation<span class="token punctuation">.</span>Category<span class="token punctuation">,</span> loggerInformation<span class="token punctuation">.</span>ProviderType<span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> minLevel<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loggerInformation<span class="token punctuation">.</span>ExternalScope<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    scopeLoggers<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScopeLogger</span><span class="token punctuation">(</span>logger<span class="token punctuation">:</span> loggerInformation<span class="token punctuation">.</span>Logger<span class="token punctuation">,</span> externalScopeProvider<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_scopeProvider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                scopeLoggers<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScopeLogger</span><span class="token punctuation">(</span>logger<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> externalScopeProvider<span class="token punctuation">:</span> _scopeProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>messageLoggers<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scopeLoggers<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>由源码可以看出，</p><p><strong>MessageLogger[]</strong> 集合取值：</p><p>在获取<code>LoggerInformation[]</code>后进行传参，进行遍历，根据<code>RuleSelector</code>过滤器，从配置文件中读取对应的日志级别，过滤器会返回获取最低级别和对应的一条过滤规则，如果配置文件中没有对应的配置，默认取全局最低级别（MinLevel）,如果读取到的日志级别大于<code>LogLevel.Critical</code>,则将其加入<code>MessageLogger[]</code>。</p><blockquote><p>过滤器的规则：</p><ol><li>选择当前记录器类型的规则，如果没有，请选择未指定记录器类型的规则</li><li>选择最长匹配类别的规则</li><li>如果没有与类别匹配的内容，则采用所有没有类别的规则</li><li>如果只有一条规则，则使用它的级别和过滤器</li><li>如果有多个规则，请选择使用最后一条。</li><li>如果没有适用的规则，请使用全局最低级别</li></ol></blockquote><p>通过<code>MessageLogger[]</code>添加消息日志集合</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> MessageLogger<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MessageLogger</span><span class="token punctuation">(</span>ILogger logger<span class="token punctuation">,</span> <span class="token keyword">string</span> category<span class="token punctuation">,</span> <span class="token keyword">string</span> providerTypeFullName<span class="token punctuation">,</span> LogLevel<span class="token operator">?</span> minLevel<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> filter<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>        Category <span class="token operator">=</span> category<span class="token punctuation">;</span>        ProviderTypeFullName <span class="token operator">=</span> providerTypeFullName<span class="token punctuation">;</span>        MinLevel <span class="token operator">=</span> minLevel<span class="token punctuation">;</span>        Filter <span class="token operator">=</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ILogger Logger <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Category <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">string</span> ProviderTypeFullName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> LogLevel<span class="token operator">?</span> MinLevel <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> Func<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> Filter <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">IsEnabled</span><span class="token punctuation">(</span>LogLevel level<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>MinLevel <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> level <span class="token operator">&lt;</span> MinLevel<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Filter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Filter</span><span class="token punctuation">(</span>ProviderTypeFullName<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> ScopeLogger<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ScopeLogger</span><span class="token punctuation">(</span>ILogger logger<span class="token punctuation">,</span> IExternalScopeProvider externalScopeProvider<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>        ExternalScopeProvider <span class="token operator">=</span> externalScopeProvider<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ILogger Logger <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> IExternalScopeProvider ExternalScopeProvider <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> IDisposable <span class="token generic-method function">CreateScope<span class="token punctuation">&lt;</span>TState<span class="token punctuation">></span></span><span class="token punctuation">(</span>TState state<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ExternalScopeProvider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ExternalScopeProvider<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Logger<span class="token punctuation">.</span><span class="token generic-method function">BeginScope<span class="token punctuation">&lt;</span>TState<span class="token punctuation">></span></span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在<code>MessageLogger[]</code>中带有<strong>MinLevel</strong>属性和<strong>Filter</strong>委托两种过滤配置，而这两种配置的来源，在上一章中可以看到，分别是从配置文件（AddConfiguration）和直接使用委托（AddFilter）来进行配置的。</p><p>再由上面的<code>IsEnabled</code>方法可以看出，会先使用 <code>MinLevel</code> 过滤，再使用 <code>Filter</code> 进行过滤。所以这两者存在优先级。</p><p><strong>ScopeLogger[ ]</strong> 取值 :</p><p>如果 <code>ILoggerProvider</code>实现了<code>ISupportExternalScope</code>接口，那么使用<code>LoggerExternalScopeProvider</code>作为<code>Scope</code>功能的实现。反之，使用<code>ILogger</code>作为其<code>Scope</code>功能的实现。</p><blockquote><p><code>LoggerExternalScopeProvider</code> ：</p><ul><li>通过 <code>Scope</code> 组成了一个单向链表，每次 <code>beginscope</code> 向链表末端增加一个新的元素，<code>Dispose</code>的时候，删除链表最末端的元素。我们知道<code>LoggerExternalScopeProvider</code> 在系统中是单例模式，多个请求进来，加入线程池处理。通过使用<code>AsyncLoca</code>来实现不同线程间数据独立。</li><li>有两个地方开启了日志作用域：</li><li>1、通过<code>socket</code>监听到请求后，将<code>KestrelConnection</code>加入线程池，线程池调度执行<code>IThreadPoolWorkItem.Execute()</code>方法。在这里开启了一次</li><li>2、在构建请求上下文对象的时候(<code>HostingApplication.CreateContext()</code>)，开启了一次</li></ul></blockquote><p>由上源码可以得出：在工厂记录器类中，通过系统<strong>依赖注入</strong>的方式解析所有注册的<code>ILoggerProvider</code>，然后调用其中的<code>CreateLogger</code>方法实现创建一个<code>Logger</code>实例对象，而这个<code>Logger</code>实例对象会根据根据注册的<code>ILoggerProvider</code>创建需要的<code>LoggerInformation[]</code>，并将此对象作为参数进行<code>ApplyFilters</code>过滤器筛选,得到对应的最低等级或过滤规则，最后通过调用<code>Log</code>方法日志记录的时候，会遍历<code>MessageLogger[]</code>集合，根据<code>logger</code>日志类别对应实际不同的日志写入类，调用<code>ILoggerProvider</code>具体实现类 (可以看下文说明) 中的<code>Log</code>方法。</p><blockquote><p>AddProviderRegistration→CreateLoggers→LoggerInformation[]→ApplyFilters→MessageLogger[]→Log→ILoggerProvider ( 执行具体类中的Log方法 )</p></blockquote><blockquote><p><code>ILoggerFactory</code> <strong>来源</strong>：</p><p>在上一篇中我们在对日志配置进行说明的时候，应用程序在启动初始化的时候会通过注入的方式<code>CreateDefaultBuilder</code>→<code>ConfigureLogging</code>→<code>AddLogging</code></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddLogging</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span>ILoggingBuilder<span class="token operator">></span> configure<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>services <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>services<span class="token punctuation">.</span><span class="token function">AddOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Singleton<span class="token punctuation">&lt;</span>ILoggerFactory<span class="token punctuation">,</span> LoggerFactory<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>Logger<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">TryAddEnumerable</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span>Singleton<span class="token operator">&lt;</span>IConfigureOptions<span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>   <span class="token keyword">new</span> <span class="token class-name">DefaultLoggerLevelConfigureOptions</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingBuilder</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> services<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现将把<code>ILoggerFactory</code>对象以依赖注入的方式托管到集合容器中，为程序调用提供使用。</p></blockquote><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200805204832261-1339141968.jpg"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200805204832261-1339141968.jpg" alt="logging"></a></p><h3 id="3-2-日志记录提供器"><a href="#3-2-日志记录提供器" class="headerlink" title="3.2 日志记录提供器"></a>3.2 日志记录提供器</h3><h4 id="3-2-1-ILoggerProvider-接口"><a href="#3-2-1-ILoggerProvider-接口" class="headerlink" title="3.2.1 ILoggerProvider 接口"></a>3.2.1 ILoggerProvider 接口</h4><p>创建<code>ILogger</code>实例的类型，根据日志类别名称创建一个新的<code>ILogger</code>实例</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoggerProvider</span> <span class="token punctuation">:</span> IDisposable<span class="token punctuation">{</span>    ILogger <span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token keyword">string</span> categoryName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个是具体的日志写入类，在工厂记录器中我们已经提到了这个，在<code>LoggerInformation[]</code>中会根据日志类别注册对应的<code>ILoggerProvider</code>，在系统中我们就可以通过<code>ILogger</code>同时向多个途经写入日志信息。（这也是对上一篇中留下的问题进行再次说明）</p><blockquote><p><code>ILoogerProvider</code>继承了<code>IDisposable</code>接口，如果某个具体的<code>ILoggerProvider</code>对象需要释放资源，就可以将相关的操作实现在<code>Dispose</code>方法中。</p></blockquote><p>默认的实现方式为多个，官方实现的由<code>ConsoleLoggerProvider</code> 、<code>DebugLoggerProvider</code> 、<code>EventSourceLoggerProvider</code>、<code>EventLogLoggerProvider</code>、<code>TraceSourceLoggerProvider</code></p><p>以<code>ConsoleLoggerProvider</code>为列</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token punctuation">[</span><span class="token function">ProviderAlias</span><span class="token punctuation">(</span><span class="token string">"Console"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleLoggerProvider</span> <span class="token punctuation">:</span> ILoggerProvider<span class="token punctuation">,</span> ISupportExternalScope    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> IOptionsMonitor<span class="token operator">&lt;</span>ConsoleLoggerOptions<span class="token operator">></span> _options<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> ConcurrentDictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> ConsoleLogger<span class="token operator">></span> _loggers<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> ConsoleLoggerProcessor _messageQueue<span class="token punctuation">;</span>        <span class="token keyword">private</span> IDisposable _optionsReloadToken<span class="token punctuation">;</span>        <span class="token keyword">private</span> IExternalScopeProvider _scopeProvider <span class="token operator">=</span> NullExternalScopeProvider<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ConsoleLoggerProvider</span><span class="token punctuation">(</span>IOptionsMonitor<span class="token operator">&lt;</span>ConsoleLoggerOptions<span class="token operator">></span> options<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _options <span class="token operator">=</span> options<span class="token punctuation">;</span>            _loggers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentDictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> ConsoleLogger<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ReloadLoggerOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>CurrentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            _optionsReloadToken <span class="token operator">=</span> _options<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span>ReloadLoggerOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>            _messageQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLoggerProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>RuntimeInformation<span class="token punctuation">.</span><span class="token function">IsOSPlatform</span><span class="token punctuation">(</span>OSPlatform<span class="token punctuation">.</span>Windows<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                _messageQueue<span class="token punctuation">.</span>Console <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsLogConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                _messageQueue<span class="token punctuation">.</span>ErrorConsole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsLogConsole</span><span class="token punctuation">(</span>stdErr<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                _messageQueue<span class="token punctuation">.</span>Console <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnsiLogConsole</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnsiSystemConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                _messageQueue<span class="token punctuation">.</span>ErrorConsole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnsiLogConsole</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnsiSystemConsole</span><span class="token punctuation">(</span>stdErr<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ReloadLoggerOptions</span><span class="token punctuation">(</span>ConsoleLoggerOptions options<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> logger <span class="token keyword">in</span> _loggers<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Options <span class="token operator">=</span> options<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ILogger <span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> _loggers<span class="token punctuation">.</span><span class="token function">GetOrAdd</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> loggerName <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> _messageQueue<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Options <span class="token operator">=</span> _options<span class="token punctuation">.</span>CurrentValue<span class="token punctuation">,</span>                ScopeProvider <span class="token operator">=</span> _scopeProvider            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _optionsReloadToken<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _messageQueue<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetScopeProvider</span><span class="token punctuation">(</span>IExternalScopeProvider scopeProvider<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _scopeProvider <span class="token operator">=</span> scopeProvider<span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> logger <span class="token keyword">in</span> _loggers<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>ScopeProvider <span class="token operator">=</span> _scopeProvider<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在<code>ConsoleLoggerProvider</code>类型定义中，标注了<code>ProviderAliasAttribute</code>特性，并设置别名为<code>Console</code>,所以在配置过滤规则的时候，可以直接使用这个名称。<code>ILogger</code>的创建实现了具体日志类<code>ConsoleLogger</code>。<br><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200805204901992-1817017747.jpg"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200805204901992-1817017747.jpg" alt="LogerProvider"></a></p><h3 id="3-3-日志记录器"><a href="#3-3-日志记录器" class="headerlink" title="3.3 日志记录器"></a>3.3 日志记录器</h3><h4 id="3-3-1-ILogger-接口"><a href="#3-3-1-ILogger-接口" class="headerlink" title="3.3.1 ILogger 接口"></a>3.3.1 ILogger 接口</h4><p>表示用于执行日志记录的类型，是系统中写入日志的统一入口。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILogger</span><span class="token punctuation">{</span>     <span class="token keyword">void</span> <span class="token generic-method function">Log<span class="token punctuation">&lt;</span>TState<span class="token punctuation">></span></span><span class="token punctuation">(</span>LogLevel logLevel<span class="token punctuation">,</span> EventId eventId<span class="token punctuation">,</span> TState state<span class="token punctuation">,</span> Exception exception<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>TState<span class="token punctuation">,</span> Exception<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">bool</span> <span class="token function">IsEnabled</span><span class="token punctuation">(</span>LogLevel logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>     IDisposable <span class="token generic-method function">BeginScope<span class="token punctuation">&lt;</span>TState<span class="token punctuation">></span></span><span class="token punctuation">(</span>TState state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义了三个方法，<code>Log()</code> 用于写入日志，<code>IsEnabled()</code>用于检查判断日志级别是否开启，<code>BeginScope()</code> 用于指日志作用域。</p><h4 id="3-3-2-Logger-实现"><a href="#3-3-2-Logger-实现" class="headerlink" title="3.3.2 Logger 实现"></a>3.3.2 Logger 实现</h4><p><code>ILogger</code>执行记录接口类的具体实现<code>Logger</code>如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">:</span> ILogger<span class="token punctuation">{</span>    <span class="token keyword">public</span> LoggerInformation<span class="token punctuation">[</span><span class="token punctuation">]</span> Loggers <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> MessageLogger<span class="token punctuation">[</span><span class="token punctuation">]</span> MessageLoggers <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> ScopeLogger<span class="token punctuation">[</span><span class="token punctuation">]</span> ScopeLoggers <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token generic-method function">Log<span class="token punctuation">&lt;</span>TState<span class="token punctuation">></span></span><span class="token punctuation">(</span>LogLevel logLevel<span class="token punctuation">,</span> EventId eventId<span class="token punctuation">,</span> TState state<span class="token punctuation">,</span> Exception exception<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>TState<span class="token punctuation">,</span> Exception<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> formatter<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> loggers <span class="token operator">=</span> MessageLoggers<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loggers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Exception<span class="token operator">></span> exceptions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loggers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">ref</span> <span class="token keyword">readonly</span> <span class="token keyword">var</span> loggerInfo <span class="token operator">=</span> <span class="token keyword">ref</span> loggers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loggerInfo<span class="token punctuation">.</span><span class="token function">IsEnabled</span><span class="token punctuation">(</span>logLevel<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">LoggerLog</span><span class="token punctuation">(</span>logLevel<span class="token punctuation">,</span> eventId<span class="token punctuation">,</span> loggerInfo<span class="token punctuation">.</span>Logger<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> formatter<span class="token punctuation">,</span> <span class="token keyword">ref</span> exceptions<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> exceptions<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ThrowLoggingError</span><span class="token punctuation">(</span>exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LoggerLog</span><span class="token punctuation">(</span>LogLevel logLevel<span class="token punctuation">,</span> EventId eventId<span class="token punctuation">,</span> ILogger logger<span class="token punctuation">,</span> Exception exception<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>TState<span class="token punctuation">,</span> Exception<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> formatter<span class="token punctuation">,</span> <span class="token keyword">ref</span> List<span class="token operator">&lt;</span>Exception<span class="token operator">></span> exceptions<span class="token punctuation">,</span> <span class="token keyword">in</span> TState state<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>logLevel<span class="token punctuation">,</span> eventId<span class="token punctuation">,</span> state<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptions <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    exceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Exception<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                exceptions<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">IsEnabled</span><span class="token punctuation">(</span>LogLevel logLevel<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> loggers <span class="token operator">=</span> MessageLoggers<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loggers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Exception<span class="token operator">></span> exceptions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loggers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">ref</span> <span class="token keyword">readonly</span> <span class="token keyword">var</span> loggerInfo <span class="token operator">=</span> <span class="token keyword">ref</span> loggers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loggerInfo<span class="token punctuation">.</span><span class="token function">IsEnabled</span><span class="token punctuation">(</span>logLevel<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LoggerIsEnabled</span><span class="token punctuation">(</span>logLevel<span class="token punctuation">,</span> loggerInfo<span class="token punctuation">.</span>Logger<span class="token punctuation">,</span> <span class="token keyword">ref</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> exceptions<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ThrowLoggingError</span><span class="token punctuation">(</span>exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i <span class="token operator">&lt;</span> loggers<span class="token punctuation">.</span>Length <span class="token operator">?</span> <span class="token keyword">true</span> <span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">LoggerIsEnabled</span><span class="token punctuation">(</span>LogLevel logLevel<span class="token punctuation">,</span> ILogger logger<span class="token punctuation">,</span> <span class="token keyword">ref</span> List<span class="token operator">&lt;</span>Exception<span class="token operator">></span> exceptions<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">IsEnabled</span><span class="token punctuation">(</span>logLevel<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptions <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    exceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Exception<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                exceptions<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>源码中<code>MessageLogger[]</code>在上文已经提到了，其中保存了在配置中启用的那些对应的<code>ILogger</code>。</p><blockquote><p>需要注意的是，由于配置文件更改后，会调用<code>ApplyFilters()</code>方法，并为<code>MessageLogger[]</code>赋新值，所以在遍历之前，需要保存当前值，再进行处理。否则会出现修改异常。</p></blockquote><p>在系统中统一写入日志的入口，通过日志等级作为参数调用其<code>IsEnabled</code>方法来确定当前日志是否执行对应具体日志的实现类，当符合条件执行具体日志输出到对应的写入途径中会调用对应的<code>Log</code>方法（需要提供一个<code>EventId</code>来标识当前日志事件）</p><blockquote><p><code>ILogger</code>默认的实现方式为多个，官方实现的由<code>ConsoleLogger</code> 、<code>DebugLogger</code> 、<code>EventSourceLogger</code>、<code>EventLogLogger</code>、<code>TraceSourceLogger</code> 具体日志实现类代表不同的日志写入途径。</p></blockquote><p><a href="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200805204923623-1536977055.jpg"><img src="https://img2020.cnblogs.com/blog/1576550/202008/1576550-20200805204923623-1536977055.jpg" alt="logger"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>在<code>ILoggerFactory</code>和<code>ILoggerProvider</code>中都会通过方法创建<strong>ILogger</strong>对象，但两者是不相同的。在工厂默认实现<code>LoggerFactory</code>类型中它创建的<strong>ILogger</strong>对象是由注册到<code>LoggerFactory</code>对象上的所有ILoggerProvider对象提供一组 <strong>ILogger</strong>对象组合而成。而日志提供器<code>ILoggerProvider</code>创建的<strong>ILogger</strong>是日志实现输出到对应的渠道目标，写入日志。</li><li>日志记录器<code>ILogger</code>中的<strong>Log()**方法会记录执行日志，在日志记录器工厂<code>ILoggerFactory</code>和日志记录提供器<code>ILoggerProvider</code>中两种不同的<code>ILogger</code>实现对应的<code>Log()</code>方法实现的意思也是不同的。在<code>ILoggerFactory</code>产生的是<code>ILogger</code>类型（也就是我们最终使用的<code>Logger</code>），其</strong>Log()<strong>方法是依次调用<code>Logger</code>中包含的<code>LoggerInformation[]</code>数组中的<code>ILogger</code>。而<code>ILoggerProvider</code>产生的为各类不同的XxxLogger（也就是上面说的<code>Logger</code>中的<code>LoggerInformation</code>数组包含的如ConsoleLogger、<code>DebugLogger</code>），其</strong>Log()**方法是把日志写到具体的目标上去。</li><li>由上文可以发现，在asp.net core提供的日志记录的组件，通过工厂的一种方式，将日志记录器和日志记录提供器都放入到工厂这样的容器中，满足定义多个不同的记录方式。在后续我们可以通过自定义<code>ILoggerProvider</code>集成到<code>Logger</code>中，实现自己需要的日志记录输出方式。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li>官方<a href="https://github.com/dotnet/extensions/tree/master/src/Logging">源码</a> 和 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/logging/?view=aspnetcore-3.1">参考资料</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> Logging </tag>
            
            <tag> aspnetcore源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 日志记录之日志配置揭秘</title>
      <link href="2020/07/31/ji-yu.netcore3.1-xi-lie-ri-zhi-ji-lu-zhi-ri-zhi-pei-zhi-jie-mi/"/>
      <url>2020/07/31/ji-yu.netcore3.1-xi-lie-ri-zhi-ji-lu-zhi-ri-zhi-pei-zhi-jie-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-日志记录之日志配置揭秘"><a href="#基于-NetCore3-1系列-——-日志记录之日志配置揭秘" class="headerlink" title="基于.NetCore3.1系列 —— 日志记录之日志配置揭秘"></a>基于.NetCore3.1系列 —— 日志记录之日志配置揭秘</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在项目的开发维护阶段，有时候我们关注的问题不仅仅在于功能的实现，甚至需要关注系统发布上线后遇到的问题能否及时的查找并解决。所以我们需要有一个好的解决方案来及时的定位错误的根源并做出正确及时的修复，这样才能不影响系统正常的运行状态。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200731201133128-18030309.gif"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200731201133128-18030309.gif" alt="logging"></a></p><p>这个时候我们发现，其实在asp.net core中已经内置了日志系统，并提供了各种内置和第三方日志记录提供程序的日志记录接口，在进行应用开发中，可以进行统一配置，并且利用第三方日志框架相结合，更加有效的实现日志记录。所以在这个系列中，主要是对内置日志记录系统的学习，以及后续使用第三方日志框架集成我们需要的日志系统。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在这一篇中主要是对日志记录的配置进行说明，从开始配置日志，以及后续使用配置进行日志处理。</p><p>在新建项目成功之后，我们都会看到一个命名为<code>appsettings.json</code>配置，打开一看，短短的几行配置，</p><pre class=" language-json"><code class="language-json">  <span class="token property">"Logging"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"LogLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Information"</span><span class="token punctuation">,</span>      <span class="token property">"Microsoft"</span><span class="token operator">:</span> <span class="token string">"Warning"</span><span class="token punctuation">,</span>      <span class="token property">"Microsoft.Hosting.Lifetime"</span><span class="token operator">:</span> <span class="token string">"Information"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>然后启动运行的时候，程序会在调试面板和控制台中分别输出显示来源如下：</p><p>在控制台中：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200731193603821-1240776226.png"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200731193603821-1240776226.png" alt="logging"></a></p><p>在调试面板中：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200731193623232-2102907278.png"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200731193623232-2102907278.png" alt="img"></a></p><p>这里的日志配置，在系统中到底都起来什么作用？让我们来一探究竟吧！</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="3-1-默认配置"><a href="#3-1-默认配置" class="headerlink" title="3.1 默认配置"></a>3.1 默认配置</h3><p>我们查看源代码发现，在程序的入口点中发现，在初始化时候，通过<code>CreateDefaultBuilder</code>方法来实现日志记录的默认配置。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以下面我们看一下<code>CreateDefaultBuilder</code>在源码中都对日志做了哪些默认配置？</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">UseContentRoot</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">ConfigureHostConfiguration</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                config<span class="token punctuation">.</span><span class="token function">AddEnvironmentVariables</span><span class="token punctuation">(</span>prefix<span class="token punctuation">:</span> <span class="token string">"DOTNET_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    config<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> env <span class="token operator">=</span> hostingContext<span class="token punctuation">.</span>HostingEnvironment<span class="token punctuation">;</span>                config<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span>$<span class="token string">"appsettings.{env.EnvironmentName}.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>ApplicationName<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">var</span> appAssembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AssemblyName</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>ApplicationName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>appAssembly <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        config<span class="token punctuation">.</span><span class="token function">AddUserSecrets</span><span class="token punctuation">(</span>appAssembly<span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                config<span class="token punctuation">.</span><span class="token function">AddEnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    config<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ConfigureLogging</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">,</span> logging<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> isWindows <span class="token operator">=</span> RuntimeInformation<span class="token punctuation">.</span><span class="token function">IsOSPlatform</span><span class="token punctuation">(</span>OSPlatform<span class="token punctuation">.</span>Windows<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isWindows<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    logging<span class="token punctuation">.</span><span class="token generic-method function">AddFilter<span class="token punctuation">&lt;</span>EventLogLoggerProvider<span class="token punctuation">></span></span><span class="token punctuation">(</span>level <span class="token operator">=</span><span class="token operator">></span> level <span class="token operator">>=</span> LogLevel<span class="token punctuation">.</span>Warning<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> logging<span class="token punctuation">.</span><span class="token function">AddConfiguration</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"Logging"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logging<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logging<span class="token punctuation">.</span><span class="token function">AddDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logging<span class="token punctuation">.</span><span class="token function">AddEventSourceLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isWindows<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    logging<span class="token punctuation">.</span><span class="token function">AddEventLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">UseDefaultServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> isDevelopment <span class="token operator">=</span> context<span class="token punctuation">.</span>HostingEnvironment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                options<span class="token punctuation">.</span>ValidateScopes <span class="token operator">=</span> isDevelopment<span class="token punctuation">;</span>                options<span class="token punctuation">.</span>ValidateOnBuild <span class="token operator">=</span> isDevelopment<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>通过上面这一段源码我们可以看到一个命名为<code>ConfigureLogging</code>的对象，我们根据命名的意思大致可以看出，这是一个配置日志的方法，继续查看<code>ConfigureLogging</code>源码</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">ConfigureLogging</span><span class="token punctuation">(</span><span class="token keyword">this</span> IHostBuilder hostBuilder<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span>HostBuilderContext<span class="token punctuation">,</span> ILoggingBuilder<span class="token operator">></span> configureLogging<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> hostBuilder<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> collection<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span> <span class="token function">configureLogging</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> builder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>通过<code>IServiceCollection</code>注册服务集合容器，将日志服务添加到这个服务容器，使用<code>AddLogging</code>方法实现对日志服务的注册。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddLogging</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span>ILoggingBuilder<span class="token operator">></span> configure<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>services <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        services<span class="token punctuation">.</span><span class="token function">AddOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Singleton<span class="token punctuation">&lt;</span>ILoggerFactory<span class="token punctuation">,</span> LoggerFactory<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>Logger<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        services<span class="token punctuation">.</span><span class="token function">TryAddEnumerable</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span>Singleton<span class="token operator">&lt;</span>IConfigureOptions<span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">DefaultLoggerLevelConfigureOptions</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingBuilder</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> services<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>通过<code>AddLogging</code>添加到服务集合容器，先通过添加所需的配置<code>AddOptions</code>,通过注入的方式实现默认的<code>ILoggerFactory</code>,<code>ILogger</code> ( 这个会在后续的篇章中进行说明)，再后通过<code>LoggingBuilder</code>完成日志对象的创建，</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoggingBuilder</span><span class="token punctuation">{</span>    IServiceCollection Services <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">LoggingBuilder</span> <span class="token punctuation">:</span> ILoggingBuilder<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">LoggingBuilder</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    Services <span class="token operator">=</span> services<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IServiceCollection Services <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对日志系统的配置，用于提供程序的接口，<code>ILoggingBuilder</code>后面可以对该对象进行拓展使用。</p><p>通过以上的流程<code>CreateDefaultBuilder</code>方法，实现对预先配置的默认值初始化，因此也发现了其中的<code>ConfigureLogging</code>也是其中要进行默认初始化的值，也就是系统默认的日志配置。</p><p>单独把<code>ConfigureLogging</code>这一块的源码拎出来再看看：</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token punctuation">.</span><span class="token function">ConfigureLogging</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">,</span> logging<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> isWindows <span class="token operator">=</span> RuntimeInformation<span class="token punctuation">.</span><span class="token function">IsOSPlatform</span><span class="token punctuation">(</span>OSPlatform<span class="token punctuation">.</span>Windows<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isWindows<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logging<span class="token punctuation">.</span><span class="token generic-method function">AddFilter<span class="token punctuation">&lt;</span>EventLogLoggerProvider<span class="token punctuation">></span></span><span class="token punctuation">(</span>level <span class="token operator">=</span><span class="token operator">></span> level <span class="token operator">>=</span> LogLevel<span class="token punctuation">.</span>Warning<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            logging<span class="token punctuation">.</span><span class="token function">AddConfiguration</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"Logging"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logging<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logging<span class="token punctuation">.</span><span class="token function">AddDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logging<span class="token punctuation">.</span><span class="token function">AddEventSourceLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isWindows<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logging<span class="token punctuation">.</span><span class="token function">AddEventLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在asp.net core启动中，根据操作系统平台适应不同的服务，在windows服务中，将<code>EventLogLoggerProvider</code>的默认值设置为警告或者更高的级别。</p><p><strong>AddConfiguration</strong> : 添加系统日志的全局配置。</p><p>在配置中，可以根据提供的不同类型程序来针对实现日志记录的输出方式。而这里默认实现的<code>AddConsole()</code>、<code>AddDebug</code>() 和<code>AddEventSourceLogger()</code>分别是将日志输出到控制台、调试窗口中，以及提供写入事件源。</p><p><strong>AddConsole</strong> : 添加控制台到工厂方法中，用来将日志记录到控制台中。</p><p><strong>AddDebug</strong> : 添加Debug窗口到工厂方法中，用来将日志记录到窗口中。</p><blockquote><p>说明：asp.net core 内置的日志接口中，实现了多种内置的日志提供器，除了上面默认实现的<code>Console</code>、<code>Debug</code>和<code>EventSource</code>，还包括下面的这几个</p><p>EventLog :</p><p>TraceSource</p><p>AzureAppServicesFile</p><p>AzureAppServicesBlob</p><p>ApplicationInsights</p></blockquote><p>还记得上面提到的<code>appsettings.json</code>配置吗？在这里，我们来看看</p><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">{</span>  <span class="token string">"Logging"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"LogLevel"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"Default"</span><span class="token punctuation">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span>      <span class="token string">"Microsoft"</span><span class="token punctuation">:</span> <span class="token string">"Information"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"Console"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"LogLevel"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"Default"</span><span class="token punctuation">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span>        <span class="token string">"System"</span><span class="token punctuation">:</span> <span class="token string">"Warning"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在<code>AddConfiguration</code>中，</p><pre class=" language-c#"><code class="language-c#">logging.AddConfiguration(hostingContext.Configuration.GetSection("Logging"));</code></pre><p>获取配置文件的<code>Logging</code>数据，实现全局配置，</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">public</span> <span class="token keyword">static</span> ILoggingBuilder <span class="token function">AddConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span> ILoggingBuilder builder<span class="token punctuation">,</span> IConfiguration configuration<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">AddConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>AddSingleton<span class="token operator">&lt;</span>IConfigureOptions<span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggerFilterConfigureOptions</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>AddSingleton<span class="token operator">&lt;</span>IOptionsChangeTokenSource<span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfigurationChangeTokenSource</span><span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingConfiguration</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">LoggerFilterConfigureOptions</span> <span class="token punctuation">:</span> IConfigureOptions<span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">string</span> LogLevelKey <span class="token operator">=</span> <span class="token string">"LogLevel"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">string</span> DefaultCategory <span class="token operator">=</span> <span class="token string">"Default"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IConfiguration _configuration<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LoggerFilterConfigureOptions</span><span class="token punctuation">(</span>IConfiguration configuration<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>LoggerFilterOptions options<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LoadDefaultConfigValues</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">LoadDefaultConfigValues</span><span class="token punctuation">(</span>LoggerFilterOptions options<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_configuration <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        options<span class="token punctuation">.</span>CaptureScopes <span class="token operator">=</span> _configuration<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>CaptureScopes<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>CaptureScopes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> configurationSection <span class="token keyword">in</span> _configuration<span class="token punctuation">.</span><span class="token function">GetChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>configurationSection<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>LogLevelKey<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Load global category defaults</span>                <span class="token function">LoadRules</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> configurationSection<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> logLevelSection <span class="token operator">=</span> configurationSection<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span>LogLevelKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevelSection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Load logger specific rules</span>                    <span class="token keyword">var</span> logger <span class="token operator">=</span> configurationSection<span class="token punctuation">.</span>Key<span class="token punctuation">;</span>                    <span class="token function">LoadRules</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> logLevelSection<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">LoadRules</span><span class="token punctuation">(</span>LoggerFilterOptions options<span class="token punctuation">,</span> IConfigurationSection configurationSection<span class="token punctuation">,</span> <span class="token keyword">string</span> logger<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> section <span class="token keyword">in</span> configurationSection<span class="token punctuation">.</span><span class="token function">AsEnumerable</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TryGetSwitch</span><span class="token punctuation">(</span>section<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> level<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> category <span class="token operator">=</span> section<span class="token punctuation">.</span>Key<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>DefaultCategory<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    category <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">var</span> newRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerFilterRule</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> category<span class="token punctuation">,</span> level<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                options<span class="token punctuation">.</span>Rules<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>newRule<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上是<code>AddConfiguration</code>实现的整体流程源码，默认注册实现<code>LoggerFilterConfigureOptions</code>对配置数据的读取，其中定义的 <strong>LogLevelKey = “LogLevel”</strong> 、<strong>DefaultCategory = “Default”</strong> 默认字符串，以此来获取默认全局配置数据。</p><p>在默认配置的文本格式<code>appsettings.json</code>中,<code>Logging</code>属性可以具有<code>LogLevel</code>和日志提供程序属性。<code>Logging</code> 下的 <code>LogLevel</code> 属性指定了用于记录所选类别的最低级别。在本例中， <code>Microsoft</code> 类别在 <code>Information</code> 级别记录，其他均在 <code>Debug</code> 级别记录。</p><blockquote><p><strong>日志级别说明</strong>：每一个日志都有指定的日志级别值，日志级别判断指示严重性或重要性。使用日志等级可以很好的过滤想要的日志，记录日志记录问题的同时，甚至为我们提供非常详细的日志信息。</p><p><strong>LogLevel 严重性：Trace &lt; Debug &lt; Information &lt; Warning &lt; Error &lt; Critical &lt; None。</strong></p><table><thead><tr><th>日志级别</th><th>常用场景</th></tr></thead><tbody><tr><td><strong>Trace = 0</strong></td><td>记录一些对程序员调试问题有帮助的信息, 其中可能包含一些敏感信息, 所以应该避免在 生产环境中启用Trace日志，因此不应该用于生产环境。默认应禁用。</td></tr><tr><td><strong>Debug = 1</strong></td><td>记录一些在开发和调试阶段有用的短时变 量(Short-term usefulness), 所以除非为了临时排除生产环境的 故障，开发人员应该尽量避免在生产环境中启用Debug日志，默认情况下这是最详细的日志。</td></tr><tr><td><strong>Information = 2</strong></td><td>记录跟踪应用程序的一些流程, 例如，记录当前api请求的url。</td></tr><tr><td><strong>Warning = 3</strong></td><td>记录应用程序中发生出现错误或其它导致程序停止的流程异常信息。 这些信息中可能包含错误消息或者错误产生的条件, 可供后续调查，例如, 文件未找到</td></tr><tr><td><strong>Error = 4</strong></td><td>记录应用程序中某个操作产生的错误和异常信息。这些消息应该指明当前活动或操作（比如当前的 HTTP 请求），而不是应用程序范围的故障。</td></tr><tr><td><strong>Critical = 5</strong></td><td>记录一些需要立刻修复，急需被关注的问题，应当记录关键级别的日志。例如数据丢失，磁盘空间不足等。</td></tr></tbody></table><p>日志级别只需要简单的通过 <code>AddFilter</code> 对日志的过滤级别配置一下就行了。同时也可以通过自定义在</p><p>在 <code>Logging.&#123;providername&#125;.LogLevel</code> 中指定了级别，则这些级别将重写 <code>Logging.LogLevel</code> 中设置的所有内容。（在下文自定义中说明）</p></blockquote><p>由此可以看出，日志记录提供程序配置由一个或多个配置提供程序提供，如文件格式（系统自带的<code>appsettings.json</code>）或者通过（已安装或已创建的）自定义提供程序（下文会说明自定义方式）。</p><h3 id="3-2-自定义配置"><a href="#3-2-自定义配置" class="headerlink" title="3.2 自定义配置"></a>3.2 自定义配置</h3><p>看完了上面实现的默认配置之后，我们也清楚了可以修改默认配置实现不同等级日志的输出，因此，我们也可以通过自定义的方式，对默认配置的修改，实现我们想要的日志记录方式。</p><p>可以通过自行选择添加提供程序来替换默认配置的提供的程序。这样就实现自定义。自定义的方式有很多，比如</p><h4 id="3-2-1-代码添加提供程序"><a href="#3-2-1-代码添加提供程序" class="headerlink" title="3.2.1 代码添加提供程序"></a>3.2.1 代码添加提供程序</h4><p>调用<code>ClearProviders</code>，清除默认之后，可添加所需的提供程序。如下：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//可以看出在使用模板创建项目的时候，默认添加了控制台和调试日志组件，并从appsettings.json中读取配置。</span>        <span class="token punctuation">.</span><span class="token function">ConfigureLogging</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">,</span> logging<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            logging<span class="token punctuation">.</span><span class="token function">ClearProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去掉默认添加的日志提供程序</span>            <span class="token comment" spellcheck="true">//添加控制台输出</span>            logging<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加调试输出</span>            logging<span class="token punctuation">.</span><span class="token function">AddDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>              webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由上可以发现我们可以通过在入口程序中直接对添加<code>ConfigureLogging</code>（在上文中源码可以看出）拓展方法来实现我们的自定义配置。</p><h4 id="3-2-2-代码添加过滤器"><a href="#3-2-2-代码添加过滤器" class="headerlink" title="3.2.2 代码添加过滤器"></a>3.2.2 代码添加过滤器</h4><p>过滤器<code>AddFilter</code>,添加过滤规则，可以为不同的日志提供者指定不同的过滤器，实现有效的自定义日志的输出。如下代码：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">.</span><span class="token function">ConfigureLogging</span><span class="token punctuation">(</span>logging <span class="token operator">=</span><span class="token operator">></span>    logging<span class="token punctuation">.</span><span class="token function">AddFilter</span><span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Debug<span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token generic-method function">AddFilter<span class="token punctuation">&lt;</span>DebugLoggerProvider<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"Microsoft"</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>添加指定了全局的过滤器，作用于所有日志提供者，示例中的第二个 <code>AddFilter</code> 使用类型名称来指定调试提供程序。 第一个 <code>AddFilter</code> 应用于全部提供程序，因为它未指定提供程序类型。</p><p>这里的<code>AddFilter</code>其实于之前读取配置文件信息添加配置<code>AddConfiguration</code>的作用相似，只是从配置文件的逻辑改成了以代码的方式实现过滤筛选，到最终也是对<code>ConfigureOptions</code>的配置。</p><h4 id="3-2-3-配置文件自定义"><a href="#3-2-3-配置文件自定义" class="headerlink" title="3.2.3 配置文件自定义"></a>3.2.3 配置文件自定义</h4><p>ASP.NET Core默认会从appSetting.json中的Logging属性读取日志的配置(当然你也可以从其他文件中读取配置)，这里设置了不同的日志提供器产生的最低的日志级别，配置样例如下。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"Logging"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"Debug"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"LogLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Information"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"Console"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"LogLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"Microsoft.AspNetCore.Mvc.Razor.Internal"</span><span class="token operator">:</span> <span class="token string">"Warning"</span><span class="token punctuation">,</span>        <span class="token property">"Microsoft.AspNetCore.Mvc.Razor.Razor"</span><span class="token operator">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span>        <span class="token property">"Microsoft.AspNetCore.Mvc.Razor"</span><span class="token operator">:</span> <span class="token string">"Error"</span><span class="token punctuation">,</span>        <span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Information"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"LogLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Debug"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此 JSON 将创建 6 条筛选规则：<code>Debug</code>中1 条用于调试提供程序，<code>Console</code>中 4 条用于控制台提供程序，最后一条<code>LogLevel</code> 用于所有提供程序。 创建 <code>ILogger</code> 对象时，为每个提供程序选择一个规则。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>虽然在这一节中只是对日志记录的配置进行了说明，但是在后续中也会对日志内部的核心运行机制进行说明介绍。所以，在这一篇中留下几个疑问</p><ol><li>日志记录的输出可以在哪里查看？而又由什么实现决定的呢？</li><li>如何管理输出不同的日志呢？都有哪些方式呢？</li></ol><p>以上的这些内容，会在下一篇进行介绍说明。</p><p>好了，今天的日志配置内容就说到这里了，希望能给大家在使用Core开发项目中对日志系统有进一步的认识。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>本篇主要是对net core3.1中内置的系统日志进行配置使用，不管是基于默认配置的输出方式，还是自定义形式的配置，都是为了有效的输出日志记录，便于我们查找发现问题。</li><li>关于日志配置，其实都是在对<code>ConfigureOptions</code>的配置，只是在形式上是直接读取配置文件或通过代码的方式实现自定义来实现日志配置。</li><li>后续会对内置的日志系统进一步说明，以及内部运行的主要核心机制。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li>官方<a href="https://github.com/dotnet/extensions/tree/master/src/Logging">源码</a> 和 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/logging/?view=aspnetcore-3.1">参考资料</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> Logging </tag>
            
            <tag> aspnetcore源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 ——认证授权方案之Swagger加锁</title>
      <link href="2020/07/14/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-swagger-jia-suo/"/>
      <url>2020/07/14/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-swagger-jia-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——认证授权方案之Swagger加锁"><a href="#基于-NetCore3-1系列-——认证授权方案之Swagger加锁" class="headerlink" title="基于.NetCore3.1系列 ——认证授权方案之Swagger加锁"></a>基于.NetCore3.1系列 ——认证授权方案之Swagger加锁</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的使用Swagger做Api文档中，我们已经使用Swagger进行开发接口文档，以及更加方便的使用。这一转换，让更多的接口可以以通俗易懂的方式展现给开发人员。而在后续的内容中，为了对api资源的保护，我们引入了认证授权方案，利用HTTP提供了一套标准的身份验证框架，服务端可以用来针对客户端的请求发送质询(challenge)，客户端根据质询提供应答身份验证凭证，进而实现对资源的保护。</p><p>因为之前在使用Swagger的系列中还没有加身份认证授权这一块，所以我们使用的接口都是没有进行资源保护的，而再后续又对认证授权这一块进行讲解又没有将Swagger好好的利用起来，使得每一次要测试授权认证的时候，都得使用postman在Hearer请求头中加入Authorization属性，导致每测试一个接口就得输入一次token令牌来实现认证，重复操作频繁，降低工作效率。</p><p>这个时候，我们刚好发现，Swagger已经帮我们是实现了一次输入令牌，不同接口多次调用，提高效率。这样，我们就可以将之前的Swagger系列和认证授权系列相结合。</p><p>说干就干。。。</p><p><a href="https://i02piccdn.sogoucdn.com/d9d838bbc0216c46"><img src="https://i02piccdn.sogoucdn.com/d9d838bbc0216c46" alt="img"></a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>Swagger系列：</p><p><a href="https://www.cnblogs.com/i3yuan/p/12539597.html">基于.NetCore3.1系列 —— 使用Swagger做Api文档 (上篇)</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/12542291.html">基于.NetCore3.1系列 —— 使用Swagger做Api文档 (下篇)</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/12633768.html">基于.NetCore3.1系列 —— 使用Swagger导出文档 (番外篇)</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/12682728.html">基于.NetCore3.1系列 —— 使用Swagger导出文档 (补充篇)</a></p><p>JWT认证授权系列：</p><p><a href="https://www.cnblogs.com/i3yuan/p/11519431.html">基于.NetCore3.1系列 —— 认证方案之初步认识JWT</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/13160022.html">基于.NetCore3.1系列 —— 认证授权方案之JwtBearer认证</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/13198355.html">基于.NetCore3.1系列 —— 认证授权方案之授权初识</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/13236777.html">基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (上篇)</a></p><p><a href="https://www.cnblogs.com/i3yuan/p/13275774.html">基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (下篇)</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="3-1-添加Swagger"><a href="#3-1-添加Swagger" class="headerlink" title="3.1. 添加Swagger"></a>3.1. 添加Swagger</h3><p>这里我们使用之前Swagger系列中的<a href="https://files-cdn.cnblogs.com/files/i3yuan/XUnit.Core%E7%95%AA%E5%A4%96%E7%AF%87.rar">源码</a>，可以发现这个在没有使用配置我们认证授权代码的情况下，资源api都是处于没有保护的情况下，任何人都可以调用使用，没有安全性。</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">"V1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiInfo</span>                <span class="token punctuation">{</span>                    Version <span class="token operator">=</span> <span class="token string">"V1"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//版本 </span>                    Title <span class="token operator">=</span> $<span class="token string">"XUnit.Core 接口文档-NetCore3.1"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//标题</span>                    Description <span class="token operator">=</span> $<span class="token string">"XUnit.Core Http API v1"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//描述</span>                    Contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiContact</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"艾三元"</span><span class="token punctuation">,</span> Email <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> Url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://i3yuan.cnblogs.com"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                      License <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiLicense</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"艾三元许可证"</span><span class="token punctuation">,</span> Url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://i3yuan.cnblogs.com"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> basePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>Location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）</span>               <span class="token comment" spellcheck="true">//var basePath = AppContext.BaseDirectory;</span>                <span class="token keyword">var</span> xmlPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> <span class="token string">"XUnit.Core.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个就是刚刚配置的xml文件名</span>                c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认的第二个参数是false,对方法的注释</span>                <span class="token comment" spellcheck="true">// c.IncludeXmlComments(xmlPath,true); //这个是controller的注释</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="3-2-添加认证授权"><a href="#3-2-添加认证授权" class="headerlink" title="3.2. 添加认证授权"></a>3.2. 添加认证授权</h3><p>基于之前的认证授权方案系列，我们这一节的认证授权就使用之前使用的<a href="https://www.cnblogs.com/i3yuan/p/13198355.html#autoid-9-0-0">基于自定义策略授权</a>的方式，实现授权。</p><h4 id="3-2-1-定义权限策略"><a href="#3-2-1-定义权限策略" class="headerlink" title="3.2.1. 定义权限策略"></a>3.2.1. 定义权限策略</h4><p>定义一个权限策略<code>PermissionRequirement</code>，这个策略并包含一些属性。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionRequirement</span><span class="token punctuation">:</span> IAuthorizationRequirement<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> _permissionName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">PermissionRequirement</span><span class="token punctuation">(</span><span class="token keyword">string</span> PermissionName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _permissionName <span class="token operator">=</span> PermissionName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-2-再定义一个策略处理类"><a href="#3-2-2-再定义一个策略处理类" class="headerlink" title="3.2.2. 再定义一个策略处理类"></a>3.2.2. 再定义一个策略处理类</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionRequirementHandler</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>PermissionRequirement<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> PermissionRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> role <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> roleValue <span class="token operator">=</span> role<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>roleValue<span class="token operator">==</span>requirement<span class="token punctuation">.</span>_permissionName<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-3-下面展示了如何将自定义要求添加到策略"><a href="#3-2-3-下面展示了如何将自定义要求添加到策略" class="headerlink" title="3.2.3. 下面展示了如何将自定义要求添加到策略"></a>3.2.3. 下面展示了如何将自定义要求添加到策略</h4><p>（请注意，由于这是自定义要求，因此没有扩展方法，而必须继续处理策略对象的整个 <code>Requirements</code> 集合）：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基于自定义策略授权</span>        services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"customizePermisson"</span><span class="token punctuation">,</span>              policy <span class="token operator">=</span><span class="token operator">></span> policy                <span class="token punctuation">.</span>Requirements                <span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PermissionRequirement</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//此外，还需要在 IAuthorizationHandler 类型的范围内向 DI 系统注册新的处理程序：</span>        services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> PermissionRequirementHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如前所述，要求可包含多个处理程序。如果为授权层的同一要求向 DI 系统注册多个处理程序，有一个成功就足够了。</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-2-4-应用自定义的策略的特性"><a href="#3-2-4-应用自定义的策略的特性" class="headerlink" title="3.2.4. 应用自定义的策略的特性"></a>3.2.4. 应用自定义的策略的特性</h4><p>指定当前用户必须是应用对控制器或控制器内的操作，如</p><pre class=" language-csharp"><code class="language-csharp">   <span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Policy <span class="token operator">=</span> <span class="token string">"customizePermisson"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieController</span> <span class="token punctuation">:</span> ControllerBase    <span class="token punctuation">{</span>     <span class="token punctuation">}</span></code></pre><h3 id="3-3-添加Swagger锁"><a href="#3-3-添加Swagger锁" class="headerlink" title="3.3. 添加Swagger锁"></a>3.3. 添加Swagger锁</h3><p>利用Swagger为我们提供的接口，在AddSwaggerGen服务中，添加保护api资源的描述。</p><pre class=" language-csharp"><code class="language-csharp">  <span class="token keyword">var</span> openApiSecurity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiSecurityScheme</span>  <span class="token punctuation">{</span>      Description <span class="token operator">=</span> <span class="token string">"JWT认证授权，使用直接在下框中输入Bearer {token}（注意两者之间是一个空格）\""</span><span class="token punctuation">,</span>      Name <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//jwt 默认参数名称</span>      In <span class="token operator">=</span> ParameterLocation<span class="token punctuation">.</span>Header<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//jwt默认存放Authorization信息的位置（请求头）</span>      Type <span class="token operator">=</span> SecuritySchemeType<span class="token punctuation">.</span>ApiKey  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>添加请求头的Header中的token,传递到后台。</p><pre class=" language-csharp"><code class="language-csharp">c<span class="token punctuation">.</span><span class="token generic-method function">OperationFilter<span class="token punctuation">&lt;</span>SecurityRequirementsOperationFilter<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>开启加权锁</p><pre class=" language-csharp"><code class="language-csharp">c<span class="token punctuation">.</span><span class="token generic-method function">OperationFilter<span class="token punctuation">&lt;</span>AddResponseHeadersFilter<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token generic-method function">OperationFilter<span class="token punctuation">&lt;</span>AppendAuthorizeToSummaryOperationFilter<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>代码整合如下</strong>：在<strong>ConfigureServices</strong>服务中</p><pre class=" language-csharp"><code class="language-csharp">        services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">"V1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiInfo</span>            <span class="token punctuation">{</span>                Version <span class="token operator">=</span> <span class="token string">"V1"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//版本 </span>                Title <span class="token operator">=</span> $<span class="token string">"XUnit.Core 接口文档-NetCore3.1"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//标题</span>                Description <span class="token operator">=</span> $<span class="token string">"XUnit.Core Http API v1"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//描述</span>                Contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiContact</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"艾三元"</span><span class="token punctuation">,</span> Email <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> Url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://i3yuan.cnblogs.com"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  License <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiLicense</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"艾三元许可证"</span><span class="token punctuation">,</span> Url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://i3yuan.cnblogs.com"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> basePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>Location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）</span>           <span class="token comment" spellcheck="true">//var basePath = AppContext.BaseDirectory;</span>            <span class="token keyword">var</span> xmlPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> <span class="token string">"XUnit.Core.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个就是刚刚配置的xml文件名</span>           <span class="token comment" spellcheck="true">// c.IncludeXmlComments(xmlPath);//默认的第二个参数是false,对方法的注释</span>             c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个是controller的注释</span>            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 加锁</span>            <span class="token keyword">var</span> openApiSecurity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiSecurityScheme</span>            <span class="token punctuation">{</span>                Description <span class="token operator">=</span> <span class="token string">"JWT认证授权，使用直接在下框中输入Bearer {token}（注意两者之间是一个空格）\""</span><span class="token punctuation">,</span>                Name <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//jwt 默认参数名称</span>                In <span class="token operator">=</span> ParameterLocation<span class="token punctuation">.</span>Header<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//jwt默认存放Authorization信息的位置（请求头）</span>                Type <span class="token operator">=</span> SecuritySchemeType<span class="token punctuation">.</span>ApiKey            <span class="token punctuation">}</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">AddSecurityDefinition</span><span class="token punctuation">(</span><span class="token string">"oauth2"</span><span class="token punctuation">,</span> openApiSecurity<span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token generic-method function">OperationFilter<span class="token punctuation">&lt;</span>AddResponseHeadersFilter<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token generic-method function">OperationFilter<span class="token punctuation">&lt;</span>AppendAuthorizeToSummaryOperationFilter<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token generic-method function">OperationFilter<span class="token punctuation">&lt;</span>SecurityRequirementsOperationFilter<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>c.AddSecurityDefinition(&quot;oauth2&quot;, openApiSecurity);</code> 这里的方案名称必须是oauth2</p></blockquote><h1 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h1><p>在<strong>未加锁</strong>的情况下，效果如下：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200713213630012-923688763.png"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200713213630012-923688763.png" alt="认证授权"></a></p><p>加<strong>上锁</strong>的程序后，执行后发现，</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200713213641713-1722828546.png"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200713213641713-1722828546.png" alt="认证授权"></a></p><p><strong>执行效果</strong>：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200713214044778-1002737085.gif"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200713214044778-1002737085.gif" alt="认证授权"></a></p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><ol><li>通过上面的汇总，我们已经实现将Swagger和net core身份认证授权才能访问接口</li><li>在以后测试接口授权的时候，就可以直接通过Swagger中的锁来调试运行，减少重复添加令牌进行操作。</li><li><a href="https://files-cdn.cnblogs.com/files/i3yuan/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83Swagger%E5%8A%A0%E9%94%81.rar">源码地址</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger框架 </tag>
            
            <tag> .net core </tag>
            
            <tag> JWT认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (下篇)</title>
      <link href="2020/07/09/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-shou-quan-jie-mi-xia-pian/"/>
      <url>2020/07/09/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-shou-quan-jie-mi-xia-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-认证授权方案之授权揭秘-下篇"><a href="#基于-NetCore3-1系列-——-认证授权方案之授权揭秘-下篇" class="headerlink" title="基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (下篇)"></a>基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (下篇)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>回顾：<a href="https://www.cnblogs.com/i3yuan/p/13236777.html">基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (上篇)</a></p><p>在上一篇中，主要讲解了授权在配置方面的源码，从添加授权配置开始，我们引入了需要的授权配置选项，而不同的授权要求构建不同的策略方式，从而实现一种自己满意的授权需求配置要求。</p><p>在这一节中，继续上一篇的内容往下深入了解授权内部机制的奥秘以及是如何实现执行授权流程的。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在上一篇中，我们通过定义授权策略，查看源码发现，在对授权配置<code>AuthorizationOptions</code>之后，授权系统通过DI的方式注册了几个核心的默认实现。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200708232437274-1979746218.png"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200708232437274-1979746218.png" alt="img"></a></p><p>之前我们进行对步骤一的授权有了大概了解，所以下面我们将对步骤二进行的注册对象进行说明。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="3-1-IAuthorizationService"><a href="#3-1-IAuthorizationService" class="headerlink" title="3.1 IAuthorizationService"></a>3.1 IAuthorizationService</h3><p>授权服务接口，用来确定授权是否成功的主要服务，接口的定义为</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthorizationService</span>    <span class="token punctuation">{</span>            Task<span class="token operator">&lt;</span>AuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> requirements<span class="token punctuation">)</span><span class="token punctuation">;</span>            Task<span class="token operator">&lt;</span>AuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">,</span> <span class="token keyword">string</span> policyName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>两个接口的参数不同之处在于<code>IAuthorizationRequirement</code>和<code>policyName</code>,分别是指定资源的一组特定要求和指定的授权名称。</p><p>同时asp.net core还为<code>IAuthorizationService</code>接口拓展了几个方法：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServiceExtensions</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Task<span class="token operator">&lt;</span>AuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> IAuthorizationService service<span class="token punctuation">,</span> ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">,</span> IAuthorizationRequirement requirement<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requirement <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IAuthorizationRequirement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> requirement <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Task<span class="token operator">&lt;</span>AuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> IAuthorizationService service<span class="token punctuation">,</span> ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">,</span> AuthorizationPolicy policy<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> policy<span class="token punctuation">.</span>Requirements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Task<span class="token operator">&lt;</span>AuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> IAuthorizationService service<span class="token punctuation">,</span> ClaimsPrincipal user<span class="token punctuation">,</span> AuthorizationPolicy policy<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> resource<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> policy<span class="token punctuation">:</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Task<span class="token operator">&lt;</span>AuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> IAuthorizationService service<span class="token punctuation">,</span> ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">string</span> policyName<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>policyName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> resource<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> policyName<span class="token punctuation">:</span> policyName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>接口的默认实现为<strong>DefaultAuthorizationService</strong></p><p><code>DefaultAuthorizationService</code>的实现主要是用来对 <a href="https://www.cnblogs.com/i3yuan/p/13236777.html#autoid-6-0-0">IAuthorizationRequirement</a>对象的授权检验。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAuthorizationService</span> <span class="token punctuation">:</span> IAuthorizationService<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> AuthorizationOptions _options<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IAuthorizationHandlerContextFactory _contextFactory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IAuthorizationHandlerProvider _handlers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IAuthorizationEvaluator _evaluator<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IAuthorizationPolicyProvider _policyProvider<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> ILogger _logger<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DefaultAuthorizationService</span><span class="token punctuation">(</span>IAuthorizationPolicyProvider policyProvider<span class="token punctuation">,</span> IAuthorizationHandlerProvider handlers<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>DefaultAuthorizationService<span class="token operator">></span> logger<span class="token punctuation">,</span> IAuthorizationHandlerContextFactory contextFactory<span class="token punctuation">,</span> IAuthorizationEvaluator evaluator<span class="token punctuation">,</span> IOptions<span class="token operator">&lt;</span>AuthorizationOptions<span class="token operator">></span> options<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policyProvider <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policyProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>contextFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>contextFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>evaluator <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>evaluator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        _options <span class="token operator">=</span> options<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>        _handlers <span class="token operator">=</span> handlers<span class="token punctuation">;</span>        _policyProvider <span class="token operator">=</span> policyProvider<span class="token punctuation">;</span>        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>        _evaluator <span class="token operator">=</span> evaluator<span class="token punctuation">;</span>        _contextFactory <span class="token operator">=</span> contextFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>AuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> requirements<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requirements <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>requirements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> authContext <span class="token operator">=</span> _contextFactory<span class="token punctuation">.</span><span class="token function">CreateContext</span><span class="token punctuation">(</span>requirements<span class="token punctuation">,</span> user<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> handlers <span class="token operator">=</span> <span class="token keyword">await</span> _handlers<span class="token punctuation">.</span><span class="token function">GetHandlersAsync</span><span class="token punctuation">(</span>authContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> handler <span class="token keyword">in</span> handlers<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> handler<span class="token punctuation">.</span><span class="token function">HandleAsync</span><span class="token punctuation">(</span>authContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_options<span class="token punctuation">.</span>InvokeHandlersAfterFailure <span class="token operator">&amp;&amp;</span> authContext<span class="token punctuation">.</span>HasFailed<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> _evaluator<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span>authContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _logger<span class="token punctuation">.</span><span class="token function">UserAuthorizationSucceeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            _logger<span class="token punctuation">.</span><span class="token function">UserAuthorizationFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>AuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">,</span> <span class="token keyword">string</span> policyName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policyName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> policy <span class="token operator">=</span> <span class="token keyword">await</span> _policyProvider<span class="token punctuation">.</span><span class="token function">GetPolicyAsync</span><span class="token punctuation">(</span>policyName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidOperationException</span><span class="token punctuation">(</span>$<span class="token string">"No policy found: {policyName}."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面的代码可以发现，在对象实例中，通过构造函数的方式分别注入了<code>IAuthorizationPolicyProvider</code>、<code>IAuthorizationHandlerProvider</code>、<code>IAuthorizationEvaluator</code>、<code>IAuthorizationHandlerContextFactory</code>这几个核心服务，以及配置选项的<a href="https://www.cnblogs.com/i3yuan/p/13236777.html#autoid-3-0-0">AuthorizationOptions</a>对象，再通过实现的方法<code>AuthorizeAsync</code>可以看出，在方法中调用<code>GetPolicyAsync</code>来获取<code>Requirements</code>，具体的可以看一下上一节的<a href="https://www.cnblogs.com/i3yuan/p/13236777.html#autoid-4-0-0">AuthorizationPolicy</a>，而后在根据授权上下文来判断。</p><p>这里就用到了注入的几个核心对象来实现完成授权的。下面会分别介绍到的。</p><h3 id="3-2-IAuthorizationPolicyProvider"><a href="#3-2-IAuthorizationPolicyProvider" class="headerlink" title="3.2 IAuthorizationPolicyProvider"></a>3.2 IAuthorizationPolicyProvider</h3><p>由上面的<code>IAuthorizationServer</code>接口的默认实现可以发现，在进行授权检验的时候，<code>DefaultAuthorizationService</code>会利用注入的<code>IAuthorizationPolicyProvider</code>服务来提供注册的授权策略，所以我们查看源码发现，接口提供 了默认的授权策略<code>GetDefaultPolicyAsync</code>和指定名称的授权策略·<code>GetPolicyAsync(string policyName)</code>的方法。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthorizationPolicyProvider</span><span class="token punctuation">{</span>    Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> <span class="token function">GetPolicyAsync</span><span class="token punctuation">(</span><span class="token keyword">string</span> policyName<span class="token punctuation">)</span><span class="token punctuation">;</span>    Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> <span class="token function">GetDefaultPolicyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> <span class="token function">GetFallbackPolicyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再加上在使用<code>[Authorize]</code>进行策略授权的时候，会根据提供的接口方法来获取指定的授权策略。</p><p><code>IAuthorizationPolicyProvider</code>来根据名称获取到策略对象，默认实现为<code>DefaultAuthorizationPolicyProvider</code>：</p><pre class=" language-csharp"><code class="language-csharp">DefaultAuthorizationPolicyProvider    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAuthorizationPolicyProvider</span> <span class="token punctuation">:</span> IAuthorizationPolicyProvider    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> AuthorizationOptions _options<span class="token punctuation">;</span>        <span class="token keyword">private</span> Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> _cachedDefaultPolicy<span class="token punctuation">;</span>        <span class="token keyword">private</span> Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> _cachedFallbackPolicy<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DefaultAuthorizationPolicyProvider</span><span class="token punctuation">(</span>IOptions<span class="token operator">&lt;</span>AuthorizationOptions<span class="token operator">></span> options<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            _options <span class="token operator">=</span> options<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> <span class="token function">GetDefaultPolicyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">GetCachedPolicy</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _cachedDefaultPolicy<span class="token punctuation">,</span> _options<span class="token punctuation">.</span>DefaultPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> <span class="token function">GetFallbackPolicyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">GetCachedPolicy</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _cachedFallbackPolicy<span class="token punctuation">,</span> _options<span class="token punctuation">.</span>FallbackPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> <span class="token function">GetCachedPolicy</span><span class="token punctuation">(</span><span class="token keyword">ref</span> Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> cachedPolicy<span class="token punctuation">,</span> AuthorizationPolicy currentPolicy<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> local <span class="token operator">=</span> cachedPolicy<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>local <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> local<span class="token punctuation">.</span>Result <span class="token operator">!=</span> currentPolicy<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cachedPolicy <span class="token operator">=</span> local <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>currentPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> local<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> <span class="token function">GetPolicyAsync</span><span class="token punctuation">(</span><span class="token keyword">string</span> policyName<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>_options<span class="token punctuation">.</span><span class="token function">GetPolicy</span><span class="token punctuation">(</span>policyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>由上面的代码可以看出，在实现<code>DefaultAuthorizationPolicyProvider</code>对象进行构造函数的方式注入了<code>IOptions options</code>服务来提供配置选项<code>AuthorizationOptions</code>(不懂的可以查看上一篇的<a href="https://www.cnblogs.com/i3yuan/p/13236777.html#autoid-3-0-0">AuthorizationOptions</a>)，再通过实现的方法可以看出是如何获取到注册的授权策略的了。附加一个图片</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200708232457496-1875776595.png"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200708232457496-1875776595.png" alt="img"></a></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200708232509575-2103395855.png"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200708232509575-2103395855.png" alt="img"></a></p><p>在上一章中介绍过，我们定义的策略都保存在<a href="https://www.cnblogs.com/i3yuan/p/13236777.html#autoid-3-0-0">AuthorizationOptions</a>的中<code>PolicyMap</code>字典中，由上代码可以发现这字典的用处。</p><h3 id="3-3-IAuthorizationHandlerContextFactory"><a href="#3-3-IAuthorizationHandlerContextFactory" class="headerlink" title="3.3 IAuthorizationHandlerContextFactory"></a>3.3 IAuthorizationHandlerContextFactory</h3><p>先看看这个接口的源代码</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthorizationHandlerContextFactory</span><span class="token punctuation">{</span>    AuthorizationHandlerContext <span class="token function">CreateContext</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> requirements<span class="token punctuation">,</span> ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接口定义了一个唯一的方法<code>CreateContext</code>,作用在于创建授权上下文<code>AuthorizationHandlerContext</code>对象。接口默认实现方式</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAuthorizationHandlerContextFactory</span> <span class="token punctuation">:</span> IAuthorizationHandlerContextFactory    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> AuthorizationHandlerContext <span class="token function">CreateContext</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> requirements<span class="token punctuation">,</span> ClaimsPrincipal user<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationHandlerContext</span><span class="token punctuation">(</span>requirements<span class="token punctuation">,</span> user<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>再来看看<code>AuthorizationHandlerContext</code>授权上下文对象，可以看出，上下文中主要包括用户的Claims和授权策略的要求<strong>Requirements</strong></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationHandlerContext</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> HashSet<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> _pendingRequirements<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">bool</span> _failCalled<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">bool</span> _succeedCalled<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AuthorizationHandlerContext</span><span class="token punctuation">(</span>        IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> requirements<span class="token punctuation">,</span>        ClaimsPrincipal user<span class="token punctuation">,</span>        <span class="token keyword">object</span> resource<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requirements <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>requirements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Requirements <span class="token operator">=</span> requirements<span class="token punctuation">;</span>        User <span class="token operator">=</span> user<span class="token punctuation">;</span>        Resource <span class="token operator">=</span> resource<span class="token punctuation">;</span>        _pendingRequirements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span><span class="token punctuation">(</span>requirements<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> Requirements <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> ClaimsPrincipal User <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">object</span> Resource <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> PendingRequirements <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _pendingRequirements<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> HasFailed <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _failCalled<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> HasSucceeded    <span class="token punctuation">{</span>        <span class="token keyword">get</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">!</span>_failCalled <span class="token operator">&amp;&amp;</span> _succeedCalled <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>PendingRequirements<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _failCalled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Succeed</span><span class="token punctuation">(</span>IAuthorizationRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _succeedCalled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        _pendingRequirements<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因此，在下面我们刚好会提到了<code>IAuthorizationHandlerProvider</code>中的方法，可以根据授权上下文获取到请求调用的处理程序。</p><h3 id="3-4-IAuthorizationHandlerProvider"><a href="#3-4-IAuthorizationHandlerProvider" class="headerlink" title="3.4 IAuthorizationHandlerProvider"></a>3.4 IAuthorizationHandlerProvider</h3><p>这个是接口的方法，作用是获取所有的授权Handler</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthorizationHandlerProvider</span><span class="token punctuation">{</span>    Task<span class="token operator">&lt;</span>IEnumerable<span class="token operator">&lt;</span>IAuthorizationHandler<span class="token operator">></span><span class="token operator">></span> <span class="token function">GetHandlersAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据之前提到的授权上下文作为<code>GetHandlersAsync</code>方法参数对象来提取<code>IAuthorizationHandler</code>对象。</p><p>默认接口的实现为<code>DefaultAuthorizationHandlerProvider</code>, 处理程序的默认实现，为授权请求提供<code>IAuthorizationHandler</code></p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAuthorizationHandlerProvider</span> <span class="token punctuation">:</span> IAuthorizationHandlerProvider    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> IEnumerable<span class="token operator">&lt;</span>IAuthorizationHandler<span class="token operator">></span> _handlers<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DefaultAuthorizationHandlerProvider</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>IAuthorizationHandler<span class="token operator">></span> handlers<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            _handlers <span class="token operator">=</span> handlers<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Task<span class="token operator">&lt;</span>IEnumerable<span class="token operator">&lt;</span>IAuthorizationHandler<span class="token operator">></span><span class="token operator">></span> <span class="token function">GetHandlersAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">)</span>            <span class="token operator">=</span><span class="token operator">></span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>_handlers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>从默认实现的方式可以看出，利用构造函数的方式注入默认的<code>IAuthorizationHandler</code>的对象，但是我们再看看接口的实现方法可以发现，<code>GetHandlersAsync</code>返回的<code>IAuthorizationHandler</code>对象并不是从给定的<code>AuthorizationHandlerContext</code>上下文中获取的，而是直接通过构造函数的方式注入得到的。</p><p>这个时候，你可能会问，那么<code>IAuthorizationHandler</code>是在哪里注入的呢？</p><p>对应下面的 <a href="https://www.cnblogs.com/i3yuan/p/13275774.html#autoid-8-0-0">IAuthorizationHandler</a></p><h3 id="3-5-IAuthorizationEvaluator"><a href="#3-5-IAuthorizationEvaluator" class="headerlink" title="3.5 IAuthorizationEvaluator"></a>3.5 IAuthorizationEvaluator</h3><p>由<code>DefaultAuthorizationService</code>中的授权方法过程调用了</p><pre class=" language-csharp"><code class="language-csharp">   <span class="token keyword">var</span> result <span class="token operator">=</span> _evaluator<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span>authContext<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>IAuthorizationEvaluator</code>接口，来确定授权结果是否成功。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthorizationEvaluator</span>    <span class="token punctuation">{</span>        AuthorizationResult <span class="token function">Evaluate</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>IAuthorizationEvaluator`的唯一方法`Evaluate`<span class="token punctuation">,</span>该方法会根据之前提供的授权上下文返回一个表示授权成功的`AuthorizationResult`对象。默认实现为`DefaultAuthorizationEvaluator<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAuthorizationEvaluator</span> <span class="token punctuation">:</span> IAuthorizationEvaluator<span class="token punctuation">{</span>    <span class="token keyword">public</span> AuthorizationResult <span class="token function">Evaluate</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">)</span>        <span class="token operator">=</span><span class="token operator">></span> context<span class="token punctuation">.</span>HasSucceeded            <span class="token operator">?</span> AuthorizationResult<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">:</span> AuthorizationResult<span class="token punctuation">.</span><span class="token function">Failed</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>HasFailed                <span class="token operator">?</span> AuthorizationFailure<span class="token punctuation">.</span><span class="token function">ExplicitFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">:</span> AuthorizationFailure<span class="token punctuation">.</span><span class="token function">Failed</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>PendingRequirements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由默认实现可以看出，<code>AuthorizationHandlerContext</code>对象的<code>HasSucceeded</code>属性决定了授权是否成功。当验证通过时，授权上下文中的<code>HasSucceeded</code>才会为True。</p><p>其中的<code>AuthorizationResult</code>和<code>AuthorizationFailure</code>分别为</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationResult</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token function">AuthorizationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> Succeeded <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> AuthorizationFailure Failure <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AuthorizationResult <span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationResult</span> <span class="token punctuation">{</span> Succeeded <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AuthorizationResult <span class="token function">Failed</span><span class="token punctuation">(</span>AuthorizationFailure failure<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationResult</span> <span class="token punctuation">{</span> Failure <span class="token operator">=</span> failure <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AuthorizationResult <span class="token function">Failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationResult</span> <span class="token punctuation">{</span> Failure <span class="token operator">=</span> AuthorizationFailure<span class="token punctuation">.</span><span class="token function">ExplicitFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationFailure</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">AuthorizationFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> FailCalled <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> FailedRequirements <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AuthorizationFailure <span class="token function">ExplicitFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationFailure</span>    <span class="token punctuation">{</span>        FailCalled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>        FailedRequirements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IAuthorizationRequirement</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AuthorizationFailure <span class="token function">Failed</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> failed<span class="token punctuation">)</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationFailure</span> <span class="token punctuation">{</span> FailedRequirements <span class="token operator">=</span> failed <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的两个授权结果 正是<code>IAuthorizationService</code> 进行实现授权<code>AuthorizeAsync</code>来完成校验返回的结果。</p><h3 id="3-6-IAuthorizationHandler"><a href="#3-6-IAuthorizationHandler" class="headerlink" title="3.6 IAuthorizationHandler"></a>3.6 IAuthorizationHandler</h3><p>接口方式实现，判断是否授权，实现此接口的类</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthorizationHandler</span><span class="token punctuation">{</span>    Task <span class="token function">HandleAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果允许授权，可通过此接口的方法来决定是否允许授权。</p><blockquote><p>之前我们还介绍到，我们定义的<em>Requirement</em>，可以直接实现<code>IAuthorizationHandler</code>接口，也可以单独定义Handler，但是需要注册到DI系统中去。</p><p>在默认的<em>AuthorizationHandlerProvider</em>中，会从DI系统中获取到我们注册的所有Handler，最终调用其<code>HandleAsync</code>方法。</p><p>我们在实现<code>IAuthorizationHandler</code>接口时，通常是继承自<code>AuthorizationHandler</code>来实现，它有如下定义：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationHandler</span><span class="token operator">&lt;</span>TRequirement<span class="token operator">></span> <span class="token punctuation">:</span> IAuthorizationHandler <span class="token keyword">where</span> TRequirement <span class="token punctuation">:</span> IAuthorizationRequirement<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">async</span> Task <span class="token function">HandleAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> req <span class="token keyword">in</span> context<span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token generic-method function">OfType<span class="token punctuation">&lt;</span>TRequirement<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">await</span> <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">abstract</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> TRequirement requirement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如上，首先会在<code>HandleAsync</code>过滤出与<em>Requirement</em>对匹配的<em>Handler</em>，然后再调用其<code>HandleRequirementAsync</code>方法。</p><p>那我们定义的直接实现<code>IAuthorizationHandler</code>了接口的<em>Requirement</em>又是如何执行的呢？</p></blockquote><p>我们可以发现，<code>IAuthorizationHandler</code>在<code>AddAuthorization</code>拓展方法中可以看到默认注册了一个<code>PassThroughAuthorizationHandler</code>默认实现为：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PassThroughAuthorizationHandler</span> <span class="token punctuation">:</span> IAuthorizationHandler<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">HandleAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> handler <span class="token keyword">in</span> context<span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token generic-method function">OfType<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> handler<span class="token punctuation">.</span><span class="token function">HandleAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它负责调用该策略中所有实现了<code>IAuthorizationHandler</code>接口的<code>Requirement</code>。通过接口实现的方法可以看出，当<code>PassThroughAuthorizationHandler</code>对象的<code>HandleAsync</code>方法被执行的时候，它会从<code>AuthroizationHanderContext</code>的<code>Requirements</code>属性中提取所有的<code>IAuthoizationHandler</code>对象，并逐个调用它们的<code>HandleAsync</code>方法来实施授权检验。</p><p>所以可以看到的出，<code>PassThroughAuthorizationHandler</code>是一个特殊并且重要的授权处理器类型，其特殊之处在于它并没有实现针对某个具体规则的授权检验，但是AuthorizationHandlerContext上下文所有的<code>IAuthorizationHandler</code>都是通过该对象驱动执行的。</p><h3 id="3-7-IPolicyEvaluator"><a href="#3-7-IPolicyEvaluator" class="headerlink" title="3.7 IPolicyEvaluator"></a>3.7 IPolicyEvaluator</h3><p>接口的方式实现，为特定需求类型调用的授权处理程序的基类</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPolicyEvaluator</span>    <span class="token punctuation">{</span>        Task<span class="token operator">&lt;</span>AuthenticateResult<span class="token operator">></span> <span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>AuthorizationPolicy policy<span class="token punctuation">,</span> HttpContext context<span class="token punctuation">)</span><span class="token punctuation">;</span>        Task<span class="token operator">&lt;</span>PolicyAuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>AuthorizationPolicy policy<span class="token punctuation">,</span> AuthenticateResult authenticationResult<span class="token punctuation">,</span> HttpContext context<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>定义了两个方法<code>AuthenticateAsync</code>和<code>AuthorizeAsync</code>方法</p><pre class=" language-csharp"><code class="language-csharp">IPolicyEvaluator`的默认实现为`PolicyEvaluator    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolicyEvaluator</span> <span class="token punctuation">:</span> IPolicyEvaluator    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> IAuthorizationService _authorization<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">PolicyEvaluator</span><span class="token punctuation">(</span>IAuthorizationService authorization<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _authorization <span class="token operator">=</span> authorization<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>AuthenticateResult<span class="token operator">></span> <span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>AuthorizationPolicy policy<span class="token punctuation">,</span> HttpContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span>AuthenticationSchemes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ClaimsPrincipal newPrincipal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scheme <span class="token keyword">in</span> policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        newPrincipal <span class="token operator">=</span> SecurityHelper<span class="token punctuation">.</span><span class="token function">MergeUserPrincipal</span><span class="token punctuation">(</span>newPrincipal<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newPrincipal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    context<span class="token punctuation">.</span>User <span class="token operator">=</span> newPrincipal<span class="token punctuation">;</span>                    <span class="token keyword">return</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuthenticationTicket</span><span class="token punctuation">(</span>newPrincipal<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span> policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    context<span class="token punctuation">.</span>User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClaimsPrincipal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">NoResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User<span class="token operator">?</span><span class="token punctuation">.</span>Identity<span class="token operator">?</span><span class="token punctuation">.</span>IsAuthenticated <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">false</span><span class="token punctuation">)</span>                 <span class="token operator">?</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuthenticationTicket</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token string">"context.User"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">:</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">NoResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>PolicyAuthorizationResult<span class="token operator">></span> <span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>AuthorizationPolicy policy<span class="token punctuation">,</span> AuthenticateResult authenticationResult<span class="token punctuation">,</span> HttpContext context<span class="token punctuation">,</span> <span class="token keyword">object</span> resource<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> _authorization<span class="token punctuation">.</span><span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>User<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> PolicyAuthorizationResult<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// If authentication was successful, return forbidden, otherwise challenge</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>authenticationResult<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span>                 <span class="token operator">?</span> PolicyAuthorizationResult<span class="token punctuation">.</span><span class="token function">Forbid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token punctuation">:</span> PolicyAuthorizationResult<span class="token punctuation">.</span><span class="token function">Challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>授权中间件委托它来实现身份验证和授权处理，它内部会调用AuthorizationService，进而执行所有授权处理器AuthorizationHandler, （在后面会提到授权中间件用到这两个方法）</p><h3 id="3-7-1、AuthenticateAsync"><a href="#3-7-1、AuthenticateAsync" class="headerlink" title="3.7.1、AuthenticateAsync"></a>3.7.1、AuthenticateAsync</h3><p>当授权策略没有设置AuthenticationSchemes，则只判断下当前请求是否已做身份验证，若做了就返回成功<br>当授权策略设置了AuthenticationSchemes，则遍历身份验证方案逐个进行身份验证处理 。</p><p>其中<code>context.User</code>就是使用<code>context.AuthenticateAsync(DefaultAuthenticateScheme)</code>来赋值的，将所有得到的用户标识重组成一个复合的用户标识。</p><blockquote><p>当我们希望使用非默认的Scheme，或者是想合并多个认证Scheme的Claims时，就需要使用基于Scheme的授权来重置Claims了。</p><p>它的实现也很简单，直接使用我们在授权策略中指定的<em>Schemes</em>来依次调用认证服务的<code>AuthenticateAsync</code>方法，并将生成的<em>Claims</em>合并，最后返回我们熟悉的<code>AuthenticateResult</code>认证结果。</p></blockquote><h3 id="3-7-2、AuthorizeAsync"><a href="#3-7-2、AuthorizeAsync" class="headerlink" title="3.7.2、AuthorizeAsync"></a>3.7.2、AuthorizeAsync</h3><p>该方法会根据<strong>Requirements</strong>来完成授权，具体的实现是通过调用<code>IAuthorizationService</code>调用<code>AuthorizeAsync</code>来实现的。</p><p>最终返回的是一个<code>PolicyAuthorizationResult</code>对象，并在授权失败时，根据认证结果来返回<code>Forbid(未授权)</code>或<code>Challenge(未登录)</code>。</p><hr><p><strong>以上汇总</strong></p><blockquote><ol><li>授权服务<strong>IAuthorizationService</strong>，接口的默认实现为<strong>DefaultAuthorizationService</strong>，进行授权验证。</li><li>在会根据授权策略提供器<code>IAuthorizationPolicyProvider</code>来获取指定名称的授权。</li><li>通过授权处理器上下文对象工厂<strong>IAuthorizationHandlerContextFactory</strong>授权处理器AuthorizationHandler在授权时需要传入AuthorizationHandlerContext（上面说了授权完成后的结果也存储在里面）。所以在执行授权处理器之前需要构建这个上下文对象，就是通过这个工厂构建的，主要的数据来源就是 <strong>当前</strong> 或者 <strong>指定的</strong> 授权策略AuthorizationPolicy。</li><li>所以这个时候会授权处理提供其 <strong>IAuthorizationHandlerProvider</strong>，来获取系统中所有授权处理器。</li><li>授权评估器<strong>IAuthorizationEvaluator</strong>来确定授权结果是否成功，在授权处理器AuthorizationHandler在执行完授权后，结果是存储在AuthorizationHandlerContext中的，这里的评估器只是根据AuthorizationHandlerContext创建一个授权结果AuthorizationResult。</li><li>上面所说的授权处理器就是<strong>IAuthorizationHandler</strong>,处理器中包含主要的授权逻辑，在处理的过程中会将所有的授权处理器一一验证。</li><li>所以在授权中间件中会利用<strong>IPolicyEvaluator</strong>中实现的身份认证和授权处理方法来调用AuthorizationService来执行所有的处理器。</li></ol></blockquote><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>在Configure中注册管道：运行使用调用方法来配置Http请求管道</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启认证授权</span>         app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在这里使用了授权中间件来检查授权，来看看中间件的源码<code>AuthorizationMiddleware</code></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationMiddleware</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Property key is used by Endpoint routing to determine if Authorization has run</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">string</span> AuthorizationMiddlewareInvokedWithEndpointKey <span class="token operator">=</span> <span class="token string">"__AuthorizationMiddlewareWithEndpointInvoked"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">object</span> AuthorizationMiddlewareWithEndpointInvokedValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> RequestDelegate _next<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IAuthorizationPolicyProvider _policyProvider<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AuthorizationMiddleware</span><span class="token punctuation">(</span>RequestDelegate next<span class="token punctuation">,</span> IAuthorizationPolicyProvider policyProvider<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _next <span class="token operator">=</span> next <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _policyProvider <span class="token operator">=</span> policyProvider <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policyProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">Invoke</span><span class="token punctuation">(</span>HttpContext context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> endpoint <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">GetEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>endpoint <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            context<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>AuthorizationMiddlewareInvokedWithEndpointKey<span class="token punctuation">]</span> <span class="token operator">=</span> AuthorizationMiddlewareWithEndpointInvokedValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> authorizeData <span class="token operator">=</span> endpoint<span class="token operator">?</span><span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span><span class="token generic-method function">GetOrderedMetadata<span class="token punctuation">&lt;</span>IAuthorizeData<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> Array<span class="token punctuation">.</span><span class="token generic-method function">Empty<span class="token punctuation">&lt;</span>IAuthorizeData<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> policy <span class="token operator">=</span> <span class="token keyword">await</span> AuthorizationPolicy<span class="token punctuation">.</span><span class="token function">CombineAsync</span><span class="token punctuation">(</span>_policyProvider<span class="token punctuation">,</span> authorizeData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> policyEvaluator <span class="token operator">=</span> context<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token generic-method function">GetRequiredService<span class="token punctuation">&lt;</span>IPolicyEvaluator<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> authenticateResult <span class="token operator">=</span> <span class="token keyword">await</span> policyEvaluator<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>policy<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Allow Anonymous skips all authorization</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>endpoint<span class="token operator">?</span><span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span><span class="token generic-method function">GetMetadata<span class="token punctuation">&lt;</span>IAllowAnonymous<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Note that the resource will be null if there is no matched endpoint</span>        <span class="token keyword">var</span> authorizeResult <span class="token operator">=</span> <span class="token keyword">await</span> policyEvaluator<span class="token punctuation">.</span><span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>policy<span class="token punctuation">,</span> authenticateResult<span class="token punctuation">,</span> context<span class="token punctuation">,</span> resource<span class="token punctuation">:</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authorizeResult<span class="token punctuation">.</span>Challenged<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scheme <span class="token keyword">in</span> policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">ChallengeAsync</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">ChallengeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>authorizeResult<span class="token punctuation">.</span>Forbidden<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scheme <span class="token keyword">in</span> policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">ForbidAsync</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">ForbidAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进行代码分解：</p><ol><li>拿到当前请求的的终结点</li></ol><pre class=" language-csharp"><code class="language-csharp">  <span class="token keyword">var</span> endpoint <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">GetEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>在当前请求拿到终结点<code>endpoint</code>的时候，会通过终结点拿到关联的<code>IAuthorizeData</code>集合</li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> authorizeData <span class="token operator">=</span> endpoint<span class="token operator">?</span><span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span><span class="token generic-method function">GetOrderedMetadata<span class="token punctuation">&lt;</span>IAuthorizeData<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> Array<span class="token punctuation">.</span><span class="token generic-method function">Empty<span class="token punctuation">&lt;</span>IAuthorizeData<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>将根据<code>IAuthorizeData</code>集合调用<strong>AuthorizationPolicy.CombineAsync()**来创建组合策略（具体了可以看一下上一章） （ 用例： **[Authorize(Policy = “BaseRole”)]</strong> ）</li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> policy <span class="token operator">=</span> <span class="token keyword">await</span> AuthorizationPolicy<span class="token punctuation">.</span><span class="token function">CombineAsync</span><span class="token punctuation">(</span>_policyProvider<span class="token punctuation">,</span> authorizeData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li><code>IPolicyEvaluator</code>获取策略评估器对得到的组合策略进行身份验证，多种身份验证得到的用户证件信息会合并进<strong>HttpContext.User</strong></li></ol><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">var</span> policyEvaluator <span class="token operator">=</span> context<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token generic-method function">GetRequiredService<span class="token punctuation">&lt;</span>IPolicyEvaluator<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> authenticateResult <span class="token operator">=</span> <span class="token keyword">await</span> policyEvaluator<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>policy<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>当使用<code>[AllowAnonymous]</code>的时候，则直接跳过授权检验。</li></ol><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">if</span> <span class="token punctuation">(</span>endpoint<span class="token operator">?</span><span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span><span class="token generic-method function">GetMetadata<span class="token punctuation">&lt;</span>IAllowAnonymous<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><ol><li>将<code>IPolicyEvaluator</code>提供的<code>AuthorizeAsync</code>授权检查方法，进行策略授权检查。</li></ol><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">var</span> authorizeResult <span class="token operator">=</span> <span class="token keyword">await</span> policyEvaluator<span class="token punctuation">.</span><span class="token function">AuthorizeAsync</span><span class="token punctuation">(</span>policy<span class="token punctuation">,</span> authenticateResult<span class="token punctuation">,</span> context<span class="token punctuation">,</span> resource<span class="token punctuation">:</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>当进行授权时，遍历策略所有的身份验证方案，进行质询，若策略里木有身份验证方案则使用默认身份验证方案进行质询。</li></ol><p>当授权评估拒绝就直接调用身份验证方案进行拒绝。</p><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">if</span> <span class="token punctuation">(</span>authorizeResult<span class="token punctuation">.</span>Challenged<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scheme <span class="token keyword">in</span> policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">ChallengeAsync</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>         <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">ChallengeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>authorizeResult<span class="token punctuation">.</span>Forbidden<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scheme <span class="token keyword">in</span> policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">ForbidAsync</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">ForbidAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>整个过程中，授权中间件会调用授权服务<code>IAuthorizationService</code>来进行授权处理</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>通过对上述的处理流程的分析，可以看出授权主要是通过<code>IAuthorizationService</code>来实现的，而我们进行使用只需要提供授权策略的<strong>Requirement</strong>，非常方便灵活的使用。</li><li>从源码权限设计来看，系统注册了各种服务，实现多种默认服务，加上默认的处理方式也满足了大部分应用需求， 所以可以看出这一块的功能还是很强大的，就算我们想通过自定义的方式来实现，也可以通过某些接口来实现拓展。</li><li>其中有很多核心源码怕说的不够清楚，所以在平时的开发项目中，再去看官方文档或源码这样理解应该更容易。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/?view=aspnetcore-3.1">参考的文档</a> 和官方<a href="https://github.com/dotnet/aspnetcore">源码</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> aspnetcore源码 </tag>
            
            <tag> JWT认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (上篇)</title>
      <link href="2020/07/05/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-shou-quan-jie-mi-shang-pian/"/>
      <url>2020/07/05/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-shou-quan-jie-mi-shang-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-认证授权方案之授权揭秘-上篇"><a href="#基于-NetCore3-1系列-——-认证授权方案之授权揭秘-上篇" class="headerlink" title="基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (上篇)"></a>基于.NetCore3.1系列 —— 认证授权方案之授权揭秘 (上篇)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>回顾：<a href="https://www.cnblogs.com/i3yuan/p/13198355.html">认证授权方案之授权初识</a></p><p>从上一节中，我们在对授权系统已经有了初步的认识和使用，可以发现，asp.net core为我们提供的授权策略是一个非常强大丰富且灵活的认证授权方案，能够满足大部分的授权场景。</p><p>在ConfigureServices中配置服务：将授权服务添加到容器</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"customizePermisson"</span><span class="token punctuation">,</span>                  policy <span class="token operator">=</span><span class="token operator">></span> policy                    <span class="token punctuation">.</span>Requirements                    <span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PermissionRequirement</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//此外，还需要在 IAuthorizationHandler 类型的范围内向 DI 系统注册新的处理程序：</span>            services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> PermissionRequirementHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在Configure中注册管道：运行使用调用方法来配置Http请求管道</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//开启授权</span>        app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>通过以上几行代码的实现，就可以进行授权了，这个时候，你可以会问，这几行代码都进行了什么操作实现授权的？</p><p>好了，继续回到上节最后说的在这一节中对授权策略的核心进行一步步的揭秘的。<br><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200705171038295-856234940.jpg"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200705171038295-856234940.jpg" alt="img"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>引入整体结构</strong></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200704214056167-1731181699.png"><img src="https://img2020.cnblogs.com/blog/1576550/202007/1576550-20200704214056167-1731181699.png" alt="授权"></a></p><h3 id="2-1-添加授权AddAuthorization"><a href="#2-1-添加授权AddAuthorization" class="headerlink" title="2.1 添加授权AddAuthorization"></a>2.1 添加授权<strong>AddAuthorization</strong></h3><p>添加授权策略服务使用<code>AddAuthorization</code>方法，以便调用。</p><p>从源码可以发现，从core3.0后，由之前在core2.0中的<code>AuthorizationServiceCollectionExtensions.cs</code>文件中，原来的<code>AddAuthorization</code>的方法变为了<code>AddAuthorizationCore</code>方法，微软在这一块进行了封装在<code>PolicyServiceCollectionExtensions.cs</code>文件中，沿用了之前<code>AddAuthorization</code>拓展名称，不影响之前版本的使用。</p><p>我们来看看aspnetcore源码:</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PolicyServiceCollectionExtensions</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddAuthorizationPolicyEvaluator</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>services <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            services<span class="token punctuation">.</span><span class="token generic-method function">TryAddSingleton<span class="token punctuation">&lt;</span>AuthorizationPolicyMarkerService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token generic-method function">TryAddTransient<span class="token punctuation">&lt;</span>IPolicyEvaluator<span class="token punctuation">,</span> PolicyEvaluator<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token generic-method function">TryAddTransient<span class="token punctuation">&lt;</span>IAuthorizationMiddlewareResultHandler<span class="token punctuation">,</span> AuthorizationMiddlewareResultHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> services<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddAuthorization</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>services <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            services<span class="token punctuation">.</span><span class="token function">AddAuthorizationCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddAuthorizationPolicyEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> services<span class="token punctuation">;</span>        <span class="token punctuation">}</span>              <span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddAuthorization</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span>AuthorizationOptions<span class="token operator">></span> configure<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>services <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            services<span class="token punctuation">.</span><span class="token function">AddAuthorizationCore</span><span class="token punctuation">(</span>configure<span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddAuthorizationPolicyEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> services<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServiceCollectionExtensions</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddAuthorizationCore</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>services <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Transient<span class="token punctuation">&lt;</span>IAuthorizationService<span class="token punctuation">,</span> DefaultAuthorizationService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Transient<span class="token punctuation">&lt;</span>IAuthorizationPolicyProvider<span class="token punctuation">,</span> DefaultAuthorizationPolicyProvider<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Transient<span class="token punctuation">&lt;</span>IAuthorizationHandlerProvider<span class="token punctuation">,</span> DefaultAuthorizationHandlerProvider<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Transient<span class="token punctuation">&lt;</span>IAuthorizationEvaluator<span class="token punctuation">,</span> DefaultAuthorizationEvaluator<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Transient<span class="token punctuation">&lt;</span>IAuthorizationHandlerContextFactory<span class="token punctuation">,</span> DefaultAuthorizationHandlerContextFactory<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">TryAddEnumerable</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Transient<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> PassThroughAuthorizationHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> services<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddAuthorizationCore</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span>AuthorizationOptions<span class="token operator">></span> configure<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>services <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            services<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>configure<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> services<span class="token punctuation">.</span><span class="token function">AddAuthorizationCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>由上可知，在调用<code>AddAuthorization</code>方法进行授权配置的时候，需要使用到<code>AuthorizationOptions</code>委托方式传参。</p><p>所以我们再来看看下面这一行代码，通过<code>AddPolicy</code>实现添加策略方式。</p><pre class=" language-csharp"><code class="language-csharp">   options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"customizePermisson"</span><span class="token punctuation">,</span>policy <span class="token operator">=</span><span class="token operator">></span> policy<span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PermissionRequirement</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查看源码发现是引用了<code>AuthorizationOptions</code>对象。</p><h3 id="2-2-配置选项AuthorizationOptions"><a href="#2-2-配置选项AuthorizationOptions" class="headerlink" title="2.2 配置选项AuthorizationOptions"></a>2.2 配置选项<strong>AuthorizationOptions</strong></h3><p>授权选项实现添加和授权配置，提供授权服务的配置。</p><p>源码如下：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationOptions</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AuthorizationPolicy<span class="token operator">></span> PolicyMap <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AuthorizationPolicy<span class="token operator">></span><span class="token punctuation">(</span>StringComparer<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> InvokeHandlersAfterFailure <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> AuthorizationPolicy DefaultPolicy <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationPolicyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireAuthenticatedUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> AuthorizationPolicy<span class="token operator">?</span> FallbackPolicy <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> AuthorizationPolicy policy<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            PolicyMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> policy<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span>AuthorizationPolicyBuilder<span class="token operator">></span> configurePolicy<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>configurePolicy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>configurePolicy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> policyBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationPolicyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">configurePolicy</span><span class="token punctuation">(</span>policyBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            PolicyMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> policyBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> AuthorizationPolicy <span class="token function">GetPolicy</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>PolicyMap<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>定义一个字典</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">private</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AuthorizationPolicy<span class="token operator">></span> PolicyMap <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AuthorizationPolicy<span class="token operator">></span><span class="token punctuation">(</span>StringComparer<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>目的在于将定义的授权策略方式都保存在这个声明的<code>PolicyMap</code>当中，而其中<code>AddPolicy</code>方法是将配置的策略添加到字典中。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> AuthorizationPolicy policy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span>AuthorizationPolicyBuilder<span class="token operator">></span> configurePolicy<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而这方法中涉及到两种不同的传参对象<code>AuthorizationPolicy</code>和<code>AuthorizationPolicyBuilder</code>。</p><h3 id="2-3-授权策略-AuthorizationPolicy"><a href="#2-3-授权策略-AuthorizationPolicy" class="headerlink" title="2.3 授权策略 AuthorizationPolicy"></a>2.3 授权策略 <strong>AuthorizationPolicy</strong></h3><p>表示授权要求和方案的集合。具体源码如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationPolicy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AuthorizationPolicy</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> requirements<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> authenticationSchemes<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requirements <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>requirements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authenticationSchemes <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>authenticationSchemes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requirements<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidOperationException</span><span class="token punctuation">(</span>Resources<span class="token punctuation">.</span>Exception_AuthorizationPolicyEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Requirements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span><span class="token punctuation">(</span>requirements<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AuthenticationSchemes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span>authenticationSchemes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IReadOnlyList<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> Requirements <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> IReadOnlyList<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> AuthenticationSchemes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AuthorizationPolicy <span class="token function">Combine</span><span class="token punctuation">(</span><span class="token keyword">params</span> AuthorizationPolicy<span class="token punctuation">[</span><span class="token punctuation">]</span> policies<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policies <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">Combine</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span><span class="token punctuation">)</span>policies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AuthorizationPolicy <span class="token function">Combine</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> policies<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policies <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationPolicyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> policy <span class="token keyword">in</span> policies<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>AuthorizationPolicy<span class="token operator">></span> <span class="token function">CombineAsync</span><span class="token punctuation">(</span>IAuthorizationPolicyProvider policyProvider<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span>IAuthorizeData<span class="token operator">></span> authorizeData<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policyProvider <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policyProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authorizeData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>authorizeData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Avoid allocating enumerator if the data is known to be empty</span>        <span class="token keyword">var</span> skipEnumeratingData <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authorizeData <span class="token keyword">is</span> IList<span class="token operator">&lt;</span>IAuthorizeData<span class="token operator">></span> dataList<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            skipEnumeratingData <span class="token operator">=</span> dataList<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AuthorizationPolicyBuilder policyBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>skipEnumeratingData<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> authorizeDatum <span class="token keyword">in</span> authorizeData<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>policyBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    policyBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationPolicyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">var</span> useDefaultPolicy <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>authorizeDatum<span class="token punctuation">.</span>Policy<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">var</span> policy <span class="token operator">=</span> <span class="token keyword">await</span> policyProvider<span class="token punctuation">.</span><span class="token function">GetPolicyAsync</span><span class="token punctuation">(</span>authorizeDatum<span class="token punctuation">.</span>Policy<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidOperationException</span><span class="token punctuation">(</span>Resources<span class="token punctuation">.</span><span class="token function">FormatException_AuthorizationPolicyNotFound</span><span class="token punctuation">(</span>authorizeDatum<span class="token punctuation">.</span>Policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    policyBuilder<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>                    useDefaultPolicy <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">var</span> rolesSplit <span class="token operator">=</span> authorizeDatum<span class="token punctuation">.</span>Roles<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rolesSplit <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rolesSplit<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">var</span> trimmedRolesSplit <span class="token operator">=</span> rolesSplit<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>r <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>r <span class="token operator">=</span><span class="token operator">></span> r<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    policyBuilder<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span>trimmedRolesSplit<span class="token punctuation">)</span><span class="token punctuation">;</span>                    useDefaultPolicy <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">var</span> authTypesSplit <span class="token operator">=</span> authorizeDatum<span class="token punctuation">.</span>AuthenticationSchemes<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>authTypesSplit <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> authTypesSplit<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> authType <span class="token keyword">in</span> authTypesSplit<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>authType<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            policyBuilder<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>authType<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>useDefaultPolicy<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    policyBuilder<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token keyword">await</span> policyProvider<span class="token punctuation">.</span><span class="token function">GetDefaultPolicyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// If we have no policy by now, use the fallback policy if we have one</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policyBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> fallbackPolicy <span class="token operator">=</span> <span class="token keyword">await</span> policyProvider<span class="token punctuation">.</span><span class="token function">GetFallbackPolicyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fallbackPolicy <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> fallbackPolicy<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> policyBuilder<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们从源码中可以发现，<code>Authorization</code> 对象 <code>Combine</code>方法目的在于将授权策略进行合并，同时调用了<code>AuthorizationPolicyBuilder</code>对象中<code>Combine</code>方法，对授权方案或者授权策略进行合并。再来看看<code>AuthorizationPolicy</code>对象中的<code>CombineAsync</code>方法，这里的参数用到了<code>IAuthorizeData</code>,同时这个方法的过程是将可能基于角色，基于方案或者基于策略都合并转换为是授权策略的方式，也是通过调用<code>AuthorizationPolicyBuilder</code>对象来实现合并。 所以可以看得出<code>AuthorizationPolicyBuilder</code>提供了一些创建<code>AuthorizationPolicy</code>的方法。</p><blockquote><p>这个时候，我们可以发现，其实之前说的基于角色、基于方案的授权方式本质上来说都是基于策略授权。</p></blockquote><h3 id="2-4-构建策略AuthorizationPolicyBuilder"><a href="#2-4-构建策略AuthorizationPolicyBuilder" class="headerlink" title="2.4 构建策略AuthorizationPolicyBuilder"></a>2.4 构建策略<strong>AuthorizationPolicyBuilder</strong></h3><p>除了上面说到使用<code>AuthorizationPolicy</code>对象之外，我们还可以用<code>AuthorizationPolicyBuilder</code>对象以<code>Buider</code>来创建<code>AuthorizationPolicy</code>对象,将多个<code>AuthorizationPolicy</code>对象提供的数组进行合并，所以<code>AuthorizationPolicyBuilder</code>提供的<code>Combine</code>方法的使用，为<code>AuthorizationPolicy</code>授权构建提供了许多便捷的方式。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationPolicyBuilder</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token function">AuthorizationPolicyBuilder</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> authenticationSchemes<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">AddAuthenticationSchemes</span><span class="token punctuation">(</span>authenticationSchemes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AuthorizationPolicyBuilder</span><span class="token punctuation">(</span>AuthorizationPolicy policy<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Combine</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IList<span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span> Requirements <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>IAuthorizationRequirement<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> IList<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> AuthenticationSchemes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">AddAuthenticationSchemes</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> schemes<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> authType <span class="token keyword">in</span> schemes<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>authType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">AddRequirements</span><span class="token punctuation">(</span><span class="token keyword">params</span> IAuthorizationRequirement<span class="token punctuation">[</span><span class="token punctuation">]</span> requirements<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> req <span class="token keyword">in</span> requirements<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">Combine</span><span class="token punctuation">(</span>AuthorizationPolicy policy<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">AddAuthenticationSchemes</span><span class="token punctuation">(</span>policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AddRequirements</span><span class="token punctuation">(</span>policy<span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token keyword">string</span> claimType<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allowedValues<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>claimType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>claimType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">RequireClaim</span><span class="token punctuation">(</span>claimType<span class="token punctuation">,</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">)</span>allowedValues<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token keyword">string</span> claimType<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> allowedValues<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>claimType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>claimType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClaimsAuthorizationRequirement</span><span class="token punctuation">(</span>claimType<span class="token punctuation">,</span> allowedValues<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token keyword">string</span> claimType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>claimType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>claimType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClaimsAuthorizationRequirement</span><span class="token punctuation">(</span>claimType<span class="token punctuation">,</span> allowedValues<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> roles<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>roles <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">)</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireRole</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> roles<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>roles <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RolesAuthorizationRequirement</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireUserName</span><span class="token punctuation">(</span><span class="token keyword">string</span> userName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NameAuthorizationRequirement</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireAuthenticatedUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DenyAnonymousAuthorizationRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireAssertion</span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>AuthorizationHandlerContext<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> handler<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AssertionRequirement</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AuthorizationPolicyBuilder <span class="token function">RequireAssertion</span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>AuthorizationHandlerContext<span class="token punctuation">,</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> handler<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AssertionRequirement</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> AuthorizationPolicy <span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationPolicy</span><span class="token punctuation">(</span>Requirements<span class="token punctuation">,</span> AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由上面多出出现的<code>IAuthorizationRequirement</code>对象可以发现，授权要求<code>Requirement</code>属性是策略的核心方案，每一种<code>Requirement</code>都代表一种授权方式。同时<code>IAuthorizationPolicyBuilder</code>为这些预定义的方案创建了它们对应的使用方式并将其添加到<code>Requirements</code>集合中。</p><h3 id="2-5-授权要求IAuthorizationRequirement"><a href="#2-5-授权要求IAuthorizationRequirement" class="headerlink" title="2.5 授权要求IAuthorizationRequirement"></a>2.5 授权要求<strong>IAuthorizationRequirement</strong></h3><pre class=" language-csharp"><code class="language-csharp">   <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthorizationRequirement</span>   <span class="token punctuation">{</span>   <span class="token punctuation">}</span></code></pre><p>接口并没有任何实现成员，因为授权要求是具有不同的表现形式的，所有才没有具体的实现成员。授权要求目的在于检验某个当前用户是否具有相应的要求, 所以大部分<code>IAuthorizationRequirement</code>接口的实现类都继承了<code>IAuthorizationHandler</code> 接口来提供HandleAsync方法来实现对应的授权检验。</p><p>下面介绍asp.net core框架里面默认实现的几种<code>IAuthorizationRequirement</code>实现类型。</p><h3 id="2-5-1-DenyAnonymousAuthorizationRequirement"><a href="#2-5-1-DenyAnonymousAuthorizationRequirement" class="headerlink" title="2.5.1 DenyAnonymousAuthorizationRequirement"></a>2.5.1 DenyAnonymousAuthorizationRequirement</h3><p>阻止匿名用户操作，言外之意就是拒绝未被验证的匿名用户访问资源。</p><p>源码如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DenyAnonymousAuthorizationRequirement</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>DenyAnonymousAuthorizationRequirement<span class="token operator">></span><span class="token punctuation">,</span> IAuthorizationRequirement<span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> DenyAnonymousAuthorizationRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> user <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">;</span>        <span class="token keyword">var</span> userIsAnonymous <span class="token operator">=</span>            user<span class="token operator">?</span><span class="token punctuation">.</span>Identity <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>            <span class="token operator">!</span>user<span class="token punctuation">.</span>Identities<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token punctuation">.</span>IsAuthenticated<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userIsAnonymous<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过用户的<code>CliamPrincipal</code>对象身份是否为空或是否是一个经过认证的用户身份，以此来确定当前请求的用户是否来源于匿名用户。</p><h3 id="2-5-2-NameAuthorizationRequirement"><a href="#2-5-2-NameAuthorizationRequirement" class="headerlink" title="2.5.2 NameAuthorizationRequirement"></a>2.5.2 NameAuthorizationRequirement</h3><p>指定用户名的授权方式，判断当前用户与某个指定的用户是否匹配以此来授权访问资源。</p><p>源码如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameAuthorizationRequirement</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>NameAuthorizationRequirement<span class="token operator">></span><span class="token punctuation">,</span> IAuthorizationRequirement<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">NameAuthorizationRequirement</span><span class="token punctuation">(</span><span class="token keyword">string</span> requiredName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>requiredName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        RequiredName <span class="token operator">=</span> requiredName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> RequiredName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> NameAuthorizationRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Identities<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> requirement<span class="token punctuation">.</span>RequiredName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中<code>RequiredName</code>属性为授权用户，通过<code>HandleRequirementAsync</code>方法进行校验当前用户的<code>ClaimPrincipal</code>对象的身份与<code>RequiredName</code>是否具有匹配。</p><blockquote><p>这里的判断用的是 string.Equals() 说明这里比较的用户名是区别大小写的。</p></blockquote><h3 id="2-5-3-ClaimsAuthorizationRequirement"><a href="#2-5-3-ClaimsAuthorizationRequirement" class="headerlink" title="2.5.3 ClaimsAuthorizationRequirement"></a>2.5.3 ClaimsAuthorizationRequirement</h3><p>基于指定声明类型的授权策略，检验当前用户是否声明类型和候选值。</p><p>源码如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClaimsAuthorizationRequirement</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>ClaimsAuthorizationRequirement<span class="token operator">></span><span class="token punctuation">,</span> IAuthorizationRequirement    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">ClaimsAuthorizationRequirement</span><span class="token punctuation">(</span><span class="token keyword">string</span> claimType<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> allowedValues<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>claimType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>claimType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ClaimType <span class="token operator">=</span> claimType<span class="token punctuation">;</span>            AllowedValues <span class="token operator">=</span> allowedValues<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> ClaimType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> AllowedValues <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> ClaimsAuthorizationRequirement requirement<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> found <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>requirement<span class="token punctuation">.</span>AllowedValues <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>requirement<span class="token punctuation">.</span>AllowedValues<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    found <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> requirement<span class="token punctuation">.</span>ClaimType<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    found <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> requirement<span class="token punctuation">.</span>ClaimType<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span>                                                        <span class="token operator">&amp;&amp;</span> requirement<span class="token punctuation">.</span>AllowedValues<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> StringComparer<span class="token punctuation">.</span>Ordinal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>由上我们可以看的出，<code>ClaimType</code>和<code>AllowedValues</code>这两个属性在构造函数中被初始化，分别用来表示当前声明的声明类型和默认允许值。通过<code>HandleRequirementAsync</code>来授权检验是否完成通过。</p><h3 id="2-5-4-RolesAuthorizationRequirement"><a href="#2-5-4-RolesAuthorizationRequirement" class="headerlink" title="2.5.4 RolesAuthorizationRequirement"></a>2.5.4 RolesAuthorizationRequirement</h3><p>基于角色的授权策略，检验当前用户是否拥有约定匹配的角色，如果拥有，则可以访问对应的资源。</p><p>源码如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RolesAuthorizationRequirement</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>RolesAuthorizationRequirement<span class="token operator">></span><span class="token punctuation">,</span> IAuthorizationRequirement<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RolesAuthorizationRequirement</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> allowedRoles<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allowedRoles <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>allowedRoles<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allowedRoles<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidOperationException</span><span class="token punctuation">(</span>Resources<span class="token punctuation">.</span>Exception_RoleRequirementEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AllowedRoles <span class="token operator">=</span> allowedRoles<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> AllowedRoles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> RolesAuthorizationRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">bool</span> found <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requirement<span class="token punctuation">.</span>AllowedRoles <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>requirement<span class="token punctuation">.</span>AllowedRoles<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Review: What do we want to do here?  No roles requested is auto success?</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                found <span class="token operator">=</span> requirement<span class="token punctuation">.</span>AllowedRoles<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>r <span class="token operator">=</span><span class="token operator">></span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">IsInRole</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中<code>AllowedRoles</code>表示目标角色列表的集合。通过<code>HandleRequirementAsync</code>实现授权检验，调用<code>IsInRole</code>方法来判断当前用户的<code>ClaimsPrincipal</code>对象是否有指定的角色。</p><h3 id="2-5-5-AssertionRequirement"><a href="#2-5-5-AssertionRequirement" class="headerlink" title="2.5.5 AssertionRequirement"></a>2.5.5 AssertionRequirement</h3><p>基于<code>AuthorizationHandlerContext</code>上下文断言的形式来声明授权。</p><p>源码如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertionRequirement</span> <span class="token punctuation">:</span> IAuthorizationHandler<span class="token punctuation">,</span> IAuthorizationRequirement<span class="token punctuation">{</span>    <span class="token keyword">public</span> Func<span class="token operator">&lt;</span>AuthorizationHandlerContext<span class="token punctuation">,</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> Handler <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AssertionRequirement</span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>AuthorizationHandlerContext<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> handler<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Handler <span class="token operator">=</span> context <span class="token operator">=</span><span class="token operator">></span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token function">handler</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AssertionRequirement</span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>AuthorizationHandlerContext<span class="token punctuation">,</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> handler<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">HandleAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">Handler</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过类型为<code>Func&gt;</code>的委托来表示该断言，利用它来授权验证。在<code>HandleAsync</code>检验方法中，直接调用这个委托对象来完成判断。</p><h3 id="2-5-6-OperationAuthorizationRequirement"><a href="#2-5-6-OperationAuthorizationRequirement" class="headerlink" title="2.5.6 OperationAuthorizationRequirement"></a>2.5.6 OperationAuthorizationRequirement</h3><p>基于预定义操作的授权策略。</p><p>源码如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationAuthorizationRequirement</span> <span class="token punctuation">:</span> IAuthorizationRequirement<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由上可知，只是包含一个操作名字的<code>Name</code>属性，目的在于将授权的目标对象映射到一个预定义的操作上。</p><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><p>出现的<code>IAuthorizationRequirement</code>对象可以发现，授权要求<code>Requirement</code>属性是策略的核心方案，每一中<code>Requirement</code>都代表一种授权方式。</p><p>在上文我们通过构建策略<code>AuthorizationPolicyBuilder</code>对象的源码可以发现，为我们提供了多个方法由预定义的<code>IAuthorizationRequirement</code>类型来创建并将其添加到<code>Requirements</code>集合中。</p><h3 id="3-1-应用"><a href="#3-1-应用" class="headerlink" title="3.1 应用"></a>3.1 应用</h3><p>实例应用如下：在ConfigureServices中配置服务中</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> combindPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationPolicyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//DenyAnonymousAuthorizationRequirement</span>                options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"DenyAnonyUser"</span><span class="token punctuation">,</span> policy <span class="token operator">=</span><span class="token operator">></span> policy<span class="token punctuation">.</span><span class="token function">RequireAuthenticatedUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//NameAuthorizationRequirement</span>                options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"NameAuth"</span><span class="token punctuation">,</span> policy <span class="token operator">=</span><span class="token operator">></span> policy<span class="token punctuation">.</span><span class="token function">RequireUserName</span><span class="token punctuation">(</span><span class="token string">"艾三元"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//ClaimsAuthorizationRequirement</span>                options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"ClaimsAuth"</span><span class="token punctuation">,</span> policy <span class="token operator">=</span><span class="token operator">></span> policy<span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//RolesAuthorizationRequirement</span>                options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"RolesAuth"</span><span class="token punctuation">,</span> policy <span class="token operator">=</span><span class="token operator">></span> policy<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//AssertionRequirement</span>                options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"AssertAuth"</span><span class="token punctuation">,</span> policy <span class="token operator">=</span><span class="token operator">></span> policy<span class="token punctuation">.</span><span class="token function">RequireAssertion</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token operator">></span>c<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>o<span class="token operator">=</span><span class="token operator">></span>o<span class="token punctuation">.</span>Type<span class="token operator">==</span><span class="token string">"role"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//同样可可用直接调用Combind方法，策略AuthorizationPolicy</span>                options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"CombindAuth"</span><span class="token punctuation">,</span> policy <span class="token operator">=</span><span class="token operator">></span> policy<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>combindPolicy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上，分别实现了框架中默认实现的几种<code>IAuthorizationRequirement</code>实现类型在实际中的应用，通过不同授权要求实现的策略方式，同时也可以将上面多种方式合并成一个对象，进行调用使用。</p><h3 id="3-2-拓展"><a href="#3-2-拓展" class="headerlink" title="3.2 拓展"></a>3.2 拓展</h3><p>当然了，除了自带了这几种默认实现方式之外，我们也可以通过自定义<code>Requirement</code>来满足我们的需求。</p><p>这个在上一节初识授权的时候，已经提到了自定义授权这一块，所以在这里再看一次。</p><blockquote><p><strong>定义一个权限策略<code>PermissionRequirement</code>，这个策略并包含一些属性。</strong></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionRequirement</span><span class="token punctuation">:</span> IAuthorizationRequirement<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> _permissionName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">PermissionRequirement</span><span class="token punctuation">(</span><span class="token keyword">string</span> PermissionName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _permissionName <span class="token operator">=</span> PermissionName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>再定义一个策略处理类</strong></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionRequirementHandler</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>PermissionRequirement<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> PermissionRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> role <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> roleValue <span class="token operator">=</span> role<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>roleValue<span class="token operator">==</span>requirement<span class="token punctuation">.</span>_permissionName<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span></code></pre><p><strong>配置使用</strong></p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基于自定义策略授权</span>        services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"customizePermisson"</span><span class="token punctuation">,</span>              policy <span class="token operator">=</span><span class="token operator">></span> policy                <span class="token punctuation">.</span>Requirements                <span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PermissionRequirement</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//此外，还需要在 IAuthorizationHandler 类型的范围内向 DI 系统注册新的处理程序：</span>        services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> PermissionRequirementHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如前所述，要求可包含多个处理程序。如果为授权层的同一要求向 DI 系统注册多个处理程序，有一个成功就足够了。</span>    <span class="token punctuation">}</span></code></pre></blockquote><p><strong>特别说明</strong></p><blockquote><p>上述使用的处理程序是一对一的关系，当声明要求满足条件的时候，则任务授权成功， 授权成功后， <code>context.Succeed</code> 将通过满足要求作为其唯一参数调用。</p><p>但是授权策略中也包含一对多的要求关系，它们属于 <strong>&amp;</strong> 的关系，只用全部验证通过，才能最终授权成功。但是在有些场景下，我们可能希望一个授权策略可以适用多种情况，比如，我们进入公司时需要出示员工卡才可以被授权进入，但是如果我们忘了带员工卡，可以去申请一个临时卡，同样可以授权成功。</p></blockquote><blockquote><pre class=" language-csharp"><code class="language-csharp">这里贴一个官方文档的写法：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuildingEntryRequirement</span> <span class="token punctuation">:</span> IAuthorizationRequirement<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BadgeEntryHandler</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>BuildingEntryRequirement<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span>                                                   BuildingEntryRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">"BadgeId"</span> <span class="token operator">&amp;&amp;</span>                                       c<span class="token punctuation">.</span>Issuer <span class="token operator">==</span> <span class="token string">"http://microsoftsecurity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//TODO: Use the following if targeting a version of</span>        <span class="token comment" spellcheck="true">//.NET Framework older than 4.6:</span>        <span class="token comment" spellcheck="true">//      return Task.FromResult(0);</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemporaryStickerHandler</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>BuildingEntryRequirement<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span>                                                    BuildingEntryRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">"TemporaryBadgeId"</span> <span class="token operator">&amp;&amp;</span>                                       c<span class="token punctuation">.</span>Issuer <span class="token operator">==</span> <span class="token string">"https://microsoftsecurity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// We'd also check the expiration date on the sticker.</span>            context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//TODO: Use the following if targeting a version of</span>        <span class="token comment" spellcheck="true">//.NET Framework older than 4.6:</span>        <span class="token comment" spellcheck="true">//      return Task.FromResult(0);</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><p>我们定义了两个Handler，但是想让它们得到执行，还需要将其注册到DI系统中：</p><pre class=" language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> BadgeEntryHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> TemporaryStickerHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>确保两个处理程序都已注册。 如果某个处理程序在某一策略评估后使用<code>context.succeed()</code>来成功 BuildingEntryRequirement ，则策略评估将成功。但是当我们调用<code>context.Fail()</code>方法后会将授权结构设置失败，那样的话，最后的结果都是会授权失败的。所以正常情况下。我们都是只设置标记<code>context.succeed()</code>。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里对上文源码中出现的一些声明方法进行说明。</p><h3 id="4-1-IAuthorizeData"><a href="#4-1-IAuthorizeData" class="headerlink" title="4.1 IAuthorizeData"></a>4.1 IAuthorizeData</h3><p>使用 IAuthorizeDate 接口方法。定义授权规则应用于资源所需的数据集。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthorizeData</span><span class="token punctuation">{</span>    <span class="token keyword">string</span> Policy <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">string</span> Roles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">string</span> AuthenticationSchemes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Policy</code>：获取或设置确定对资源的访问的策略名称。</p><p><code>Roles</code>: 获取或设置以逗号分隔的允许访问资源的角色列表。</p><p><code>AuthenticationSchemes</code>: 获取或以设置以逗号分隔的方案列表，从中可以构造用户信息。</p><p>所以<code>IAuthorizeData</code>中定义的<code>policy</code>、<code>roles</code>、<code>AuthenticationSchemes</code>三个分别代表着授权系统中的三种授权方式。</p><p>具体的使用在后续讲解授权的执行流程中会进行详细介绍。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>上面主要讲解了授权在配置方面的源码，本来打算继续接着往下写的，但是考虑到整体篇幅可能会太长了，不便于阅读。</p><p>所以授权揭秘的上篇内容就说到这里了，在后续的文章中，会继续深入了解授权内部机制的奥秘以及是如何实现执行授权流程的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>从添加授权配置开始，我们引入了需要的授权配置选项，而不同的授权要求构建不同的策略方式，从而实现一种自己满意的授权需求配置要求。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/?view=aspnetcore-3.1">参考的文档</a> 和官方<a href="https://github.com/dotnet/aspnetcore">源码</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> aspnetcore源码 </tag>
            
            <tag> JWT认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 认证授权方案之授权初识</title>
      <link href="2020/06/28/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-shou-quan-chu-shi/"/>
      <url>2020/06/28/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-shou-quan-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-认证授权方案之授权初识"><a href="#基于-NetCore3-1系列-——-认证授权方案之授权初识" class="headerlink" title="基于.NetCore3.1系列 —— 认证授权方案之授权初识"></a>基于.NetCore3.1系列 —— 认证授权方案之授权初识</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>回顾</strong>：<a href="https://www.cnblogs.com/i3yuan/p/13160022.html">认证授权方案之JwtBearer认证</a></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627170555877-1275585821.gif"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627170555877-1275585821.gif" alt="授权"></a></p><p>在上一篇中，我们通过JwtBearer的方式认证，了解在认证时，都是基于Claim的，因此我们可以通过用户令牌获取到用户的Claims，在授权过程中对这些Claims进行验证，从而来判断是否具有获取或执行目标资源操作的权限。本章就来介绍一下 ASP.NET Core 的授权系统的简单使用。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>授权与身份认证是相互独立，但是，授权却需要一种身份验证机制，因此，身份验证可以为当前用户创建一个或多个标识，是确定用户真实身份的过程。而授权是根据标识确定用户可执行的操作的过程，其本质就是具有某种特性的用户会有权限访问某个资源或者执行某个操作。例如：一个拥有管理员身份的用户有创建人员、删除人员、编辑人员和删除人员的操作权限，而一个非管理身份的用户仅有读取自己信息的权限。</p><p>这时候，你可能会问，究竟怎样特性的用户可以被授权访问某个资源或执行某个操作。由此我们引出了授权策略的方式，可以根据用户拥有的角色，也可以根据用户的职位，部门甚至是性别，年龄等等特性进行授权。</p><p>通过建立授权策略方式，检验认证的用户所携带的身份声明（ClaimsPrincipal对象）与授权策略是否一致，从而确定用户可否执行操作。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627202216875-2059410399.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627202216875-2059410399.png" alt="授权"></a></p><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="3-1-基于角色"><a href="#3-1-基于角色" class="headerlink" title="3.1. 基于角色"></a>3.1. 基于角色</h3><h4 id="3-1-1-添加角色"><a href="#3-1-1-添加角色" class="headerlink" title="3.1.1 添加角色"></a><strong>3.1.1 添加角色</strong></h4><p>将角色赋予某个控制器或控制器内的操作，指定当前用户必须是其角色才能访问请求资源。</p><p>可以使用<code>Authorize</code>属性的Roles特性指定所请求资源的角色。</p><p>例如：</p><ul><li>分配了“admin”角色用户进行访问操作</li></ul><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>以逗号分隔角色名来允行多个角色访问操作</li></ul><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span><span class="token string">"admin,user"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase<span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>其中只要满足<code>admmin</code>或者<code>user</code>其一就可以进行访问。</p><ul><li>同时满足指定的多个角色进行的访问操作</li></ul><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase<span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><h4 id="3-1-2-添加策略的角色"><a href="#3-1-2-添加策略的角色" class="headerlink" title="3.1.2 添加策略的角色"></a><strong>3.1.2 添加策略的角色</strong></h4><p>可以创建策略的方式进行访问控制，在配置授权服务中添加注册授权服务策略。</p><p>在Startup.cs文件中，通过<code>ConfigureServices()</code>配置服务,创建一个允许具有<code>admin</code>角色的用户才能进行访问的策略</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加授权角色策略</span>        services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"BaseRole"</span><span class="token punctuation">,</span> options <span class="token operator">=</span><span class="token operator">></span> options<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//或者指定多个允许的角色</span>        <span class="token comment" spellcheck="true">//services.AddAuthorization(options =></span>        <span class="token comment" spellcheck="true">// {</span>        <span class="token comment" spellcheck="true">//    options.AddPolicy("MoreBaseRole", options => options.RequireRole("admin","user"));</span>        <span class="token comment" spellcheck="true">// });</span>    <span class="token punctuation">}</span></code></pre><p>在控制器方法使用特性<code>Policy</code>的属性进行策略应用</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Policy <span class="token operator">=</span> <span class="token string">"BaseRole"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase    <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-2-基于声明"><a href="#3-2-基于声明" class="headerlink" title="3.2. 基于声明"></a>3.2. 基于声明</h3><h4 id="3-2-1添加声明"><a href="#3-2-1添加声明" class="headerlink" title="3.2.1添加声明"></a><strong>3.2.1添加声明</strong></h4><p>对当前用户必须拥有的声明，并将声明赋予某个控制器或控制器内的操作，因此，指定声明必须持有对应的值才能访问请求资源。</p><p>声明要求基于策略，所以必须进行构建一个表示声明要求的策略，才能进行授权。</p><p>最简单的类型声明是将判断声明是否存在，而不检查值。</p><p>可以创建策略的方式进行访问控制，在配置授权服务中添加注册授权服务策略。</p><p>在Startup.cs文件中，通过<code>ConfigureServices()</code>配置服务,创建一个允许具有声明的用户才能进行访问的策略</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加基于声明的授权</span>        services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"BaseClaims"</span><span class="token punctuation">,</span> options <span class="token operator">=</span><span class="token operator">></span> options<span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>BaseClaims</code>声明策略会检查<code>name</code>当前标识是否存在声明。</p><p>在控制器方法使用特性<code>Policy</code>的属性进行策略应用</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Policy <span class="token operator">=</span> <span class="token string">"BaseClaims"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase    <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>但是，大多时候，我们需要声明包含值，只有指定允许值的列表，才能授权成功。所以，可以添加指定值。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加基于声明的授权,指定允许值列表。</span>        services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"BaseClaims"</span><span class="token punctuation">,</span> options <span class="token operator">=</span><span class="token operator">></span> options<span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"i3yuan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-3-基于策略"><a href="#3-3-基于策略" class="headerlink" title="3.3 基于策略"></a>3.3 基于策略</h3><p>上面介绍的基于角色和基于声明的授权，都使用了要求、要求处理程序和预配置的策略。这些在构建上提供了便捷，但是最终都是生成授权策略。ASP.NET Core，设计了另一种灵活的授权方式，一种更丰富的可重复使用的授权结构，基于策略的授权，同时这也是授权的核心。</p><blockquote><pre><code>这节会先讲一下授权策略的应用，在下一节中，会对授权策略的核心进行一步步的详解。</code></pre></blockquote><p>在上面我们简单的介绍了基于策略的角色授权，但是这种方式无非基于角色或者声明多一些。</p><p>因此，这里我们基于自定义策略授权的方式，实现授权。</p><blockquote><p>自定义授权，就要我们自己写策略提供器，自己根据不同的参数来生成不同的策略，重新实现策略的方式。策略要求由以下两种元素组成：仅保留数据的要求类，以及对用户验证数据的授权处理程序。创建自定义要求，还可以进一步表达特定策略。</p></blockquote><h4 id="3-3-1-定义权限策略PermissionRequirement"><a href="#3-3-1-定义权限策略PermissionRequirement" class="headerlink" title="3.3.1. 定义权限策略PermissionRequirement"></a><strong>3.3.1. 定义权限策略<code>PermissionRequirement</code></strong></h4><p>定义一个权限策略，这个策略并包含一些属性。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionRequirement</span><span class="token punctuation">:</span> IAuthorizationRequirement<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> _permissionName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">PermissionRequirement</span><span class="token punctuation">(</span><span class="token keyword">string</span> PermissionName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _permissionName <span class="token operator">=</span> PermissionName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-2-再定义一个策略处理类"><a href="#3-3-2-再定义一个策略处理类" class="headerlink" title="3.3.2. 再定义一个策略处理类"></a><strong>3.3.2. 再定义一个策略处理类</strong></h4><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionRequirementHandler</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>PermissionRequirement<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> PermissionRequirement requirement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> role <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> roleValue <span class="token operator">=</span> role<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>roleValue<span class="token operator">==</span>requirement<span class="token punctuation">.</span>_permissionName<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span></code></pre><p>授权处理程序读取与角色用户关联的声明，并检查自定义的角色，如果角色匹则成功，否则无法返回成功。</p><pre><code>这里的自定义声明是写固定了，但是也可以通过数据库或外部服务的方式进行运行查询获取用户相关角色信息相对应的判断条件，从而在处理程序中进行判断处理。</code></pre><p>授权处理程序调用方法 <code>Succeed</code>，同时传递当前要求，以通知此要求已成功得到验证。如果没有传递要求，处理程序无需执行任何操作，可以直接返回内容。不过，如果处理程序要确定是否不符合要求（无论其他处理程序是否已成功验证同一要求），将会对授权上下文对象调用方法 <code>Fail</code>。</p><h4 id="3-3-3-下面展示了如何将自定义要求添加到策略"><a href="#3-3-3-下面展示了如何将自定义要求添加到策略" class="headerlink" title="3.3.3. 下面展示了如何将自定义要求添加到策略"></a><strong>3.3.3. 下面展示了如何将自定义要求添加到策略</strong></h4><p>（请注意，由于这是自定义要求，因此没有扩展方法，而必须继续处理策略对象的整个 <code>Requirements</code> 集合）：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基于自定义策略授权</span>        services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"customizePermisson"</span><span class="token punctuation">,</span>              policy <span class="token operator">=</span><span class="token operator">></span> policy                <span class="token punctuation">.</span>Requirements                <span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PermissionRequirement</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//此外，还需要在 IAuthorizationHandler 类型的范围内向 DI 系统注册新的处理程序：</span>        services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> PermissionRequirementHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如前所述，要求可包含多个处理程序。如果为授权层的同一要求向 DI 系统注册多个处理程序，有一个成功就足够了。</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-3-4-应用自定义的策略的特性"><a href="#3-3-4-应用自定义的策略的特性" class="headerlink" title="3.3.4. 应用自定义的策略的特性"></a><strong>3.3.4. 应用自定义的策略的特性</strong></h4><p>指定当前用户必须是应用对控制器或控制器内的操作，如</p><pre class=" language-csharp"><code class="language-csharp">   <span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Policy <span class="token operator">=</span> <span class="token string">"customizePermisson"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase    <span class="token punctuation">{</span>     <span class="token punctuation">}</span></code></pre><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在上一篇<a href="https://www.cnblogs.com/i3yuan/p/13160022.html">认证授权方案之JwtBearer认证</a>中，我们已经实现了获取token的方式，这一次，我们实现一个以基于角色场景为例的认证授权。</p><p>在原来生成token的方式中，添加多一个声明角色的Claim，如下：</p><blockquote><p>new Claim(JwtClaimTypes.Role,”admin”)</p></blockquote><pre class=" language-csharp"><code class="language-csharp">    <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>    <span class="token keyword">public</span> IActionResult <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义发行人issuer</span>            <span class="token keyword">string</span> iss <span class="token operator">=</span> <span class="token string">"JWTBearer.Auth"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义受众人audience</span>            <span class="token keyword">string</span> aud <span class="token operator">=</span> <span class="token string">"api.auth"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义许多种的声明Claim,信息存储部分,Claims的实体一般包含用户和一些元数据</span>            IEnumerable<span class="token operator">&lt;</span>Claim<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Id<span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">"i3yuan"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//notBefore  生效时间</span>            <span class="token comment" spellcheck="true">// long nbf =new DateTimeOffset(DateTime.Now).ToUnixTimeSeconds();</span>            <span class="token keyword">var</span> nbf <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//expires   //过期时间</span>            <span class="token comment" spellcheck="true">// long Exp = new DateTimeOffset(DateTime.Now.AddSeconds(1000)).ToUnixTimeSeconds();</span>            <span class="token keyword">var</span> Exp <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//signingCredentials  签名凭证</span>            <span class="token keyword">string</span> sign <span class="token operator">=</span> <span class="token string">"q2xiARx$4x3TKqBJ"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//SecurityKey 的长度必须 大于等于 16个字符</span>            <span class="token keyword">var</span> secret <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> signcreds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SigningCredentials</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>HmacSha256<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//String issuer = default(String), String audience = default(String), IEnumerable&lt;Claim> claims = null, Nullable&lt;DateTime> notBefore = default(Nullable&lt;DateTime>), Nullable&lt;DateTime> expires = default(Nullable&lt;DateTime>), SigningCredentials signingCredentials = null</span>            <span class="token keyword">var</span> jwt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityToken</span><span class="token punctuation">(</span>issuer<span class="token punctuation">:</span> iss<span class="token punctuation">,</span> audience<span class="token punctuation">:</span> aud<span class="token punctuation">,</span> claims<span class="token punctuation">:</span>claims<span class="token punctuation">,</span>notBefore<span class="token punctuation">:</span>nbf<span class="token punctuation">,</span>expires<span class="token punctuation">:</span>Exp<span class="token punctuation">,</span> signingCredentials<span class="token punctuation">:</span> signcreds<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> JwtHander <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityTokenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> token <span class="token operator">=</span> JwtHander<span class="token punctuation">.</span><span class="token function">WriteToken</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span>            <span class="token punctuation">{</span>                access_token <span class="token operator">=</span> token<span class="token punctuation">,</span>                token_type <span class="token operator">=</span> <span class="token string">"Bearer"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>对控制器或控制器内的操作，指定当前用户必须是其角色才能访问请求资源，如<code>WeatherForecastController.cs</code></p><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>ApiController<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"[controller]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase<span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Summaries <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>        <span class="token string">"Freezing"</span><span class="token punctuation">,</span> <span class="token string">"Bracing"</span><span class="token punctuation">,</span> <span class="token string">"Chilly"</span><span class="token punctuation">,</span> <span class="token string">"Cool"</span><span class="token punctuation">,</span> <span class="token string">"Mild"</span><span class="token punctuation">,</span> <span class="token string">"Warm"</span><span class="token punctuation">,</span> <span class="token string">"Balmy"</span><span class="token punctuation">,</span> <span class="token string">"Hot"</span><span class="token punctuation">,</span> <span class="token string">"Sweltering"</span><span class="token punctuation">,</span> <span class="token string">"Scorching"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> ILogger<span class="token operator">&lt;</span>WeatherForecastController<span class="token operator">></span> _logger<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeatherForecastController</span><span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span>WeatherForecastController<span class="token operator">></span> logger<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>WeatherForecast<span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> rng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>index <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">WeatherForecast</span>        <span class="token punctuation">{</span>            Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>            TemperatureC <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Summary <span class="token operator">=</span> Summaries<span class="token punctuation">[</span>rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>Summaries<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="5-1-获取token"><a href="#5-1-获取token" class="headerlink" title="5.1. 获取token"></a>5.1. 获取token</h3><p>分别获取role为admin和role为user的情况下颁发的token，只有在角色为admin的情况下才能授权通过。</p><h3 id="5-2-授权资源接口访问"><a href="#5-2-授权资源接口访问" class="headerlink" title="5.2. 授权资源接口访问"></a>5.2. 授权资源接口访问</h3><h4 id="在role为admin的情况下"><a href="#在role为admin的情况下" class="headerlink" title="在role为admin的情况下"></a><strong>在role为admin的情况下</strong></h4><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627145702959-125614839.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627145702959-125614839.png" alt="授权"></a></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627145729993-1283137083.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627145729993-1283137083.png" alt="授权"></a></p><h4 id="在role为user的情况下"><a href="#在role为user的情况下" class="headerlink" title="在role为user的情况下"></a><strong>在role为user的情况下</strong></h4><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627145753549-1407374501.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627145753549-1407374501.png" alt="授权"></a></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627145803254-935058113.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200627145803254-935058113.png" alt="授权"></a></p><p>由上可知，只有在角色为admin的情况下，才能访问目标资源进行操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>从上一篇的认证到这一篇的授权阶段，简单的介绍了Asp.net Core的认证授权系统，对授权有了初步的认识以及使用，对授权进行划分为两种，一种是基于角色的授权，但随着角色的增加会对处理授权产生限制，不适合表达复杂的授权逻辑。另一种是基于策略的身份验证，策略包含一系列基于声明的要求，以及基于可从 <code>HTTP</code> 上下文或外部源注入的其他任何信息的自定义逻辑。这些要求各自与一个或多个处理程序相关联，这些处理程序负责要求的实际计算。</li><li>可以发现，asp.net core提供的授权策略是一个非常强大丰富且灵活的认证授权方案，能够满足大部分的授权场景。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li>因此，在后续的篇章中，会继续探索授权系统，对授权策略的核心进行一步步的详解。</li><li>本示例<a href="https://files-cdn.cnblogs.com/files/i3yuan/Auth.Token%E6%8E%88%E6%9D%83.rar">源码地址</a></li></ol><p>参考<a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/?view=aspnetcore-3.1">文献文档</a></p>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> JWT认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 认证授权方案之JwtBearer认证</title>
      <link href="2020/06/19/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-jwtbearer-ren-zheng/"/>
      <url>2020/06/19/ji-yu.netcore3.1-xi-lie-ren-zheng-shou-quan-fang-an-zhi-jwtbearer-ren-zheng/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-认证授权方案之JwtBearer认证"><a href="#基于-NetCore3-1系列-——-认证授权方案之JwtBearer认证" class="headerlink" title="基于.NetCore3.1系列 —— 认证授权方案之JwtBearer认证"></a>基于.NetCore3.1系列 —— 认证授权方案之JwtBearer认证</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>回顾</strong>：<a href="https://www.cnblogs.com/i3yuan/p/11519431.html">认证方案之初步认识JWT</a></p><p>在现代Web应用程序中，即分为前端与后端两大部分。当前前后端的趋势日益剧增，前端设备（手机、平板、电脑、及其他设备）层出不穷。因此，为了方便满足前端设备与后端进行通讯，就必须有一种统一的机制。所以导致API架构的流行。而<strong>RESTful API</strong>这个API设计思想理论也就成为目前互联网应用程序比较欢迎的一套方式。</p><p>这种API架构思想的引入，因此，我们就需要考虑用一种标准的，通用的，无状态的，与语言无关的身份认证方式来实现API接口的认证。</p><p>HTTP提供了一套标准的<strong>身份验证框架</strong>：服务端可以用来针对客户端的请求发送质询(challenge)，客户端根据质询提供应答身份验证凭证。</p><p><strong>质询与应答的工作流程</strong>如下：服务端向客户端返回401（Unauthorized，未授权）状态码，并在WWW-Authenticate头中添加如何进行验证的信息，其中至少包含有一种质询方式。然后客户端可以在请求中添加Authorization头进行验证，其Value为身份验证的凭证信息。</p><p>在本文中，将要介绍的是以Jwt Bearer方式进行认证。<br><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618222306107-264946586.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618222306107-264946586.png" alt="JwtBearer"></a></p><h2 id="Bearer认证"><a href="#Bearer认证" class="headerlink" title="Bearer认证"></a>Bearer认证</h2><p>本文要介绍的<strong>Bearer</strong>验证也属于HTTP协议标准验证，它随着OAuth协议而开始流行，详细定义见： <a href="https://tools.ietf.org/html/rfc6750#section-1.2">RFC 6570</a>。</p><pre><code>     +--------+                               +---------------+     |        |--(A)- Authorization Request -&gt;|   Resource    |     |        |                               |     Owner     |     |        |&lt;-(B)-- Authorization Grant ---|               |     |        |                               +---------------+     |        |     |        |                               +---------------+     |        |--(C)-- Authorization Grant --&gt;| Authorization |     | Client |                               |     Server    |     |        |&lt;-(D)----- Access Token -------|               |     |        |                               +---------------+     |        |     |        |                               +---------------+     |        |--(E)----- Access Token ------&gt;|    Resource   |     |        |                               |     Server    |     |        |&lt;-(F)--- Protected Resource ---|               |     +--------+                               +---------------+</code></pre><blockquote><p>A security token with the property that any party in possession of the token (a “bearer”) can use the token in any way that any other party in possession of it can. Using a bearer token does not require a bearer to prove possession of cryptographic key material (proof-of-possession).</p></blockquote><p>因此Bearer认证的核心是Token，Bearer验证中的凭证称为<code>BEARER_TOKEN</code>，或者是<code>access_token</code>，它的颁发和验证完全由我们自己的应用程序来控制，而不依赖于系统和Web服务器，Bearer验证的标准请求方式如下：</p><pre class=" language-text"><code class="language-text">Authorization: Bearer [BEARER_TOKEN] </code></pre><p>那么使用Bearer验证有什么好处呢？</p><ul><li>CORS: cookies + CORS 并不能跨不同的域名。而Bearer验证在任何域名下都可以使用HTTP header头部来传输用户信息。</li><li>对移动端友好: 当你在一个原生平台(iOS, Android, WindowsPhone等)时，使用Cookie验证并不是一个好主意，因为你得和Cookie容器打交道，而使用Bearer验证则简单的多。</li><li>CSRF: 因为Bearer验证不再依赖于cookies, 也就避免了跨站请求攻击。</li><li>标准：在Cookie认证中，用户未登录时，返回一个<code>302</code>到登录页面，这在非浏览器情况下很难处理，而Bearer验证则返回的是标准的<code>401 challenge</code>。</li></ul><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>上面介绍的Bearer认证，其核心便是<strong>BEARER_TOKEN</strong>，那么，如何确保Token的安全是重中之重。一种是通过HTTPS的方式，另一种是通过对Token进行加密编码签名，而最流行的Token编码签名方式便是：JSON WEB TOKEN。</p><blockquote><p>Json web token (Jwt), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>）。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p></blockquote><p>JWT是由<code>.</code>分割的如下三部分组成：</p><pre class=" language-javascript"><code class="language-javascript">Header<span class="token punctuation">.</span>Payload<span class="token punctuation">.</span>Signature</code></pre><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211913237-96702827.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211913237-96702827.png" alt="JwtBearer"></a></p><p>还记得之前说个的一篇<a href="https://www.cnblogs.com/i3yuan/p/11519431.html">认证方案之初步认识JWT</a>吗？没有的，可以看看，对JWT的特点和基本原理介绍，可以进一步的了解。</p><p>学习了之前的文章后，我们可以发现使用JWT的好处在于通用性、紧凑性和可拓展性。</p><ul><li><strong>通用性</strong>：因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</li><li><strong>紧凑性</strong>：JWT的构成非常简单，字节占用很小，通过 GET、POST 等放在 HTTP 的 header 中，便于传输。</li><li><strong>可扩展性</strong>：JWT是自我包涵的，因为有了payload部分，包含了必要的一些其他业务逻辑所必要的非敏感信息，自身存储，不需要在服务端保存会话信息, 非常易于应用的扩展。</li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1-注册认证服务"><a href="#1-注册认证服务" class="headerlink" title="1. 注册认证服务"></a>1. 注册认证服务</h3><p>在这里，我们用微软给我们提供的JwtBearer认证方式，实现认证服务注册 。</p><pre class=" language-csharp"><code class="language-csharp">引入nuget包：Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>JwtBearer</code></pre><p>注册服务，将服务添加到容器中，</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> Issurer <span class="token operator">=</span> <span class="token string">"JWTBearer.Auth"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发行人</span>        <span class="token keyword">var</span> Audience <span class="token operator">=</span> <span class="token string">"api.auth"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//受众人</span>        <span class="token keyword">var</span> secretCredentials <span class="token operator">=</span> <span class="token string">"q2xiARx$4x3TKqBJ"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//密钥</span>        <span class="token comment" spellcheck="true">//配置认证服务</span>        services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            x<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>o<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            o<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenValidationParameters</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//是否验证发行人</span>                ValidateIssuer <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>                ValidIssuer <span class="token operator">=</span> Issurer<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//发行人</span>                <span class="token comment" spellcheck="true">//是否验证受众人</span>                ValidateAudience <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>                ValidAudience <span class="token operator">=</span> Audience<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//受众人</span>                <span class="token comment" spellcheck="true">//是否验证密钥</span>                ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>                IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>secretCredentials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ValidateLifetime <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//验证生命周期</span>                RequireExpirationTime <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//过期时间</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>注意说明：</p><pre><code>一. TokenValidationParameters的参数默认值：1. ValidateAudience = true,  ----- 如果设置为false,则不验证Audience受众人2. ValidateIssuer = true ,   ----- 如果设置为false,则不验证Issuer发布人，但建议不建议这样设置3. ValidateIssuerSigningKey = false,4. ValidateLifetime = true,  ----- 是否验证Token有效期，使用当前时间与Token的Claims中的NotBefore和Expires对比5. RequireExpirationTime = true, ----- 是否要求Token的Claims中必须包含Expires6. ClockSkew = TimeSpan.FromSeconds(300), ----- 允许服务器时间偏移量300秒，即我们配置的过期时间加上这个允许偏移的时间值，才是真正过期的时间(过期时间 +偏移值)你也可以设置为0，ClockSkew = TimeSpan.Zero</code></pre><p>调用方法，配置Http请求管道：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.先开启认证</span>        app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.再开启授权</span>        app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在<code>JwtBearerOptions</code>的配置中，通常<code>IssuerSigningKey(签名秘钥)</code>, <code>ValidIssuer(Token颁发机构)</code>, <code>ValidAudience(颁发给谁)</code> 三个参数是必须的，后两者用于与TokenClaims中的<code>Issuer</code>和<code>Audience</code>进行对比，不一致则验证失败。</p><h3 id="2-接口资源保护"><a href="#2-接口资源保护" class="headerlink" title="2.接口资源保护"></a>2.接口资源保护</h3><p>创建一个需要授权保护的资源控制器，这里我们用建立API生成项目自带的控制器，WeatherForecastController.cs, 在控制器上使用<code>Authorize</code>即可</p><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>ApiController<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"[controller]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Authorize<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Summaries <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>        <span class="token string">"Freezing"</span><span class="token punctuation">,</span> <span class="token string">"Bracing"</span><span class="token punctuation">,</span> <span class="token string">"Chilly"</span><span class="token punctuation">,</span> <span class="token string">"Cool"</span><span class="token punctuation">,</span> <span class="token string">"Mild"</span><span class="token punctuation">,</span> <span class="token string">"Warm"</span><span class="token punctuation">,</span> <span class="token string">"Balmy"</span><span class="token punctuation">,</span> <span class="token string">"Hot"</span><span class="token punctuation">,</span> <span class="token string">"Sweltering"</span><span class="token punctuation">,</span> <span class="token string">"Scorching"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> ILogger<span class="token operator">&lt;</span>WeatherForecastController<span class="token operator">></span> _logger<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeatherForecastController</span><span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span>WeatherForecastController<span class="token operator">></span> logger<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>WeatherForecast<span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> rng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>index <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">WeatherForecast</span>        <span class="token punctuation">{</span>            Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>            TemperatureC <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Summary <span class="token operator">=</span> Summaries<span class="token punctuation">[</span>rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>Summaries<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-生成Token"><a href="#3-生成Token" class="headerlink" title="3. 生成Token"></a>3. 生成Token</h3><p>因为微软为我们内置了JwtBearer验证，但是没有提供Token的发放，所以这里我们要实现生成Token的方法</p><pre class=" language-csharp"><code class="language-csharp">引入Nugets包：System<span class="token punctuation">.</span>IdentityModel<span class="token punctuation">.</span>Tokens<span class="token punctuation">.</span>Jwt</code></pre><p>这里我们根据<a href="https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/JwtSecurityTokenHandler.cs">IdentityModel.Tokens.Jwt</a>文档给我们提供的帮助类，提供了方法WriteToken创建Token，根据参数SecurityToken，可以实例化，JwtSecurityToken，指定可选参数的类。</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Initializes a new instance of the &lt;see cref="JwtSecurityToken"/> class specifying optional parameters.</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="issuer">If this value is not null, a { iss, 'issuer' } claim will be added, overwriting any 'iss' claim in 'claims' if present.&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="audience">If this value is not null, a { aud, 'audience' } claim will be added, appending to any 'aud' claims in 'claims' if present.&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="claims">If this value is not null then for each &lt;see cref="Claim"/> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&amp;lt;object&amp;gt; } will be created to contain the duplicate values.&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="expires">If expires.HasValue a { exp, 'value' } claim is added, overwriting any 'exp' claim in 'claims' if present.&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="notBefore">If notbefore.HasValue a { nbf, 'value' } claim is added, overwriting any 'nbf' claim in 'claims' if present.&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="signingCredentials">The &lt;see cref="SigningCredentials"/> that will be used to sign the &lt;see cref="JwtSecurityToken"/>. See &lt;see cref="JwtHeader(SigningCredentials)"/> for details pertaining to the Header Parameter(s).&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;exception cref="ArgumentException">If 'expires' &amp;lt;= 'notbefore'.&lt;/exception></span>        <span class="token keyword">public</span> <span class="token function">JwtSecurityToken</span><span class="token punctuation">(</span><span class="token keyword">string</span> issuer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">string</span> audience <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span>Claim<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> DateTime<span class="token operator">?</span> notBefore <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> DateTime<span class="token operator">?</span> expires <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> SigningCredentials signingCredentials <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>expires<span class="token punctuation">.</span>HasValue <span class="token operator">&amp;&amp;</span> notBefore<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>notBefore <span class="token operator">>=</span> expires<span class="token punctuation">)</span>                    <span class="token keyword">throw</span> LogHelper<span class="token punctuation">.</span><span class="token function">LogExceptionMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArgumentException</span><span class="token punctuation">(</span>LogHelper<span class="token punctuation">.</span><span class="token function">FormatInvariant</span><span class="token punctuation">(</span>LogMessages<span class="token punctuation">.</span>IDX12401<span class="token punctuation">,</span> expires<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> notBefore<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtPayload</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span> audience<span class="token punctuation">,</span> claims<span class="token punctuation">,</span> notBefore<span class="token punctuation">,</span> expires<span class="token punctuation">)</span><span class="token punctuation">;</span>            Header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtHeader</span><span class="token punctuation">(</span>signingCredentials<span class="token punctuation">)</span><span class="token punctuation">;</span>            RawSignature <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这样，我们可以根据参数指定内容：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">string</span> iss <span class="token operator">=</span> <span class="token string">"JWTBearer.Auth"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义发行人</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">string</span> aud <span class="token operator">=</span> <span class="token string">"api.auth"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//定义受众人audience</span><span class="token number">3</span><span class="token punctuation">.</span> IEnumerable<span class="token operator">&lt;</span>Claim<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Id<span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">"i3yuan"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义许多种的声明Claim,信息存储部分,Claims的实体一般包含用户和一些元数据</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">var</span> nbf <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//notBefore  生效时间</span><span class="token number">5</span><span class="token punctuation">.</span> <span class="token keyword">var</span> Exp <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//expires 过期时间</span><span class="token number">6</span><span class="token punctuation">.</span> <span class="token keyword">string</span> sign <span class="token operator">=</span> <span class="token string">"q2xiARx$4x3TKqBJ"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//SecurityKey 的长度必须 大于等于 16个字符</span> <span class="token keyword">var</span> secret <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> signcreds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SigningCredentials</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>HmacSha256<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>好了，通过以上填充参数内容，进行传参赋值得到，完整代码如下：</p><p>新增AuthController.cs控制器：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>    <span class="token keyword">public</span> IActionResult <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义发行人issuer</span>            <span class="token keyword">string</span> iss <span class="token operator">=</span> <span class="token string">"JWTBearer.Auth"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义受众人audience</span>            <span class="token keyword">string</span> aud <span class="token operator">=</span> <span class="token string">"api.auth"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义许多种的声明Claim,信息存储部分,Claims的实体一般包含用户和一些元数据</span>            IEnumerable<span class="token operator">&lt;</span>Claim<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Id<span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">"i3yuan"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//notBefore  生效时间</span>            <span class="token comment" spellcheck="true">// long nbf =new DateTimeOffset(DateTime.Now).ToUnixTimeSeconds();</span>            <span class="token keyword">var</span> nbf <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//expires   //过期时间</span>            <span class="token comment" spellcheck="true">// long Exp = new DateTimeOffset(DateTime.Now.AddSeconds(1000)).ToUnixTimeSeconds();</span>            <span class="token keyword">var</span> Exp <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//signingCredentials  签名凭证</span>            <span class="token keyword">string</span> sign <span class="token operator">=</span> <span class="token string">"q2xiARx$4x3TKqBJ"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//SecurityKey 的长度必须 大于等于 16个字符</span>            <span class="token keyword">var</span> secret <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> signcreds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SigningCredentials</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>HmacSha256<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> jwt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityToken</span><span class="token punctuation">(</span>issuer<span class="token punctuation">:</span> iss<span class="token punctuation">,</span> audience<span class="token punctuation">:</span> aud<span class="token punctuation">,</span> claims<span class="token punctuation">:</span>claims<span class="token punctuation">,</span>notBefore<span class="token punctuation">:</span>nbf<span class="token punctuation">,</span>expires<span class="token punctuation">:</span>Exp<span class="token punctuation">,</span> signingCredentials<span class="token punctuation">:</span> signcreds<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> JwtHander <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityTokenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> token <span class="token operator">=</span> JwtHander<span class="token punctuation">.</span><span class="token function">WriteToken</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span>            <span class="token punctuation">{</span>                access_token <span class="token operator">=</span> token<span class="token punctuation">,</span>                token_type <span class="token operator">=</span> <span class="token string">"Bearer"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><pre><code>注意：1.SecurityKey 的长度必须 大于等于 16个字符，否则生成会报错。（可通过在线随机生成密钥）</code></pre></blockquote><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><strong>访问获取Token方法，获取得到access_token:</strong></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211533536-1484568585.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211533536-1484568585.png" alt="JwtBearer"></a></p><p><strong>再访问，授权资源接口，可以发现，再没有添加请求头token值的情况下，返回了401没有权限。</strong></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211545989-228060775.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211545989-228060775.png" alt="JwtBearer"></a></p><p><strong>这次，在请求头通过Authorization加上之前获取的token值后，再次进行访问，发现已经可以获取访问资源控制器，并返回对应的数据。</strong></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211558633-293363451.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211558633-293363451.png" alt="JwtBearer"></a></p><h2 id="扩展说明"><a href="#扩展说明" class="headerlink" title="扩展说明"></a>扩展说明</h2><p>在HTTP标准验证方案中，我们比较熟悉的是”Basic”和”Digest”，前者将用户名密码使用BASE64编码后作为验证凭证，后者是Basic的升级版，更加安全，因为Basic是明文传输密码信息，而Digest是加密后传输。</p><h3 id="一、Basic基础认证"><a href="#一、Basic基础认证" class="headerlink" title="一、Basic基础认证"></a>一、Basic基础认证</h3><p>Basic认证是一种较为简单的HTTP认证方式，客户端通过明文（Base64编码格式）传输用户名和密码到服务端进行认证，通常需要配合HTTPS来保证信息传输的安全。</p><p>客户端请求需要带Authorization请求头，值为“Basic xxx”，xxx为“用户名:密码”进行Base64编码后生成的值。 若客户端是浏览器，则浏览器会提供一个输入用户名和密码的对话框，用户输入用户名和密码后，浏览器会保存用户名和密码，用于构造Authorization值。当关闭浏览器后，用户名和密码将不再保存。</p><p>凭证为“YWxhzGRpbjpvcGVuc2VzYWl1”，是通过将“用户名:密码”格式的字符串经过的Base64编码得到的。而Base64不属于加密范畴，可以被逆向解码，等同于明文，因此Basic传输认证信息是不安全的。</p><p>Basic基础认证图示：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211748571-633028335.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618211748571-633028335.png" alt="JwtBearer"></a></p><p>缺陷汇总<br>1.用户名和密码明文（Base64）传输，需要配合HTTPS来保证信息传输的安全。<br>2.即使密码被强加密，第三方仍可通过加密后的用户名和密码进行重放攻击。<br>3.没有提供任何针对代理和中间节点的防护措施。<br>4.假冒服务器很容易骗过认证，诱导用户输入用户名和密码。</p><h3 id="二、Digest摘要认证"><a href="#二、Digest摘要认证" class="headerlink" title="二、Digest摘要认证"></a><strong>二、Digest摘要认证</strong></h3><p>Digest认证是为了修复基本认证协议的严重缺陷而设计的，秉承“绝不通过明文在网络发送密码”的原则，通过“密码摘要”进行认证，大大提高了安全性。</p><p>Digest认证步骤如下：<br>第一步：客户端访问Http资源服务器。由于需要Digest认证，服务器返回了两个重要字段nonce（随机数）和realm。<br>第二步：客户端构造Authorization请求头，值包含username、realm、nouce、uri和response的字段信息。其中，realm和nouce就是第一步返回的值。nouce只能被服务端使用一次。uri(digest-uri)即Request-URI的值，但考虑到经代理转发后Request-URI的值可能被修改、因此实现会复制一份副本保存在uri内。response也可叫做Request-digest，存放经过MD5运算后的密码字符串，形成响应码。<br>第三步：服务器验证包含Authorization值的请求，若验证通过则可访问资源。<br>Digest认证可以防止密码泄露和请求重放，但没办法防假冒。所以安全级别较低。<br>Digest和Basic认证一样，每次都会发送Authorization请求头，也就相当于重新构造此值。所以两者易用性都较差。</p><p>Digest认证图示：<br><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618215349761-1821279766.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200618215349761-1821279766.png" alt="JwtBearer"></a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>在进行JwtBearer认证时，在生成token之后，还需要与刷新token配合使用，因为当用户执行了退出，修改密码等操作时，需要让该token无效，无法再次使用，所以，会给access_token设置一个较短的有效期间，(JwtBearer认证默认会验证有效期，通过<code>notBefore</code>和<code>expires</code>来验证)，当<code>access_token</code>过期后，可以在用户无感知的情况下，使用<code>refresh_token</code>重新获取<code>access_token</code>，但这就不属于Bearer认证的范畴了，但是我们可以通过另一种方式通过IdentityServer的方式来实现，在后续中会对IdentityServer进行详细讲解。</li><li>在生成token的时候，需要用的secret，主要是用来防止token被伪造与篡改。因为当token被劫取的时候，可以得到你的令牌中带的一些个人不重要的信息明文，但不用担心，只要你不在生成token里把私密的个人信息放出去的话，就算被动机不良的人得到，也做不了什么事情。但是你可能会想，如果用户自己随便的生成一个 token ，带上你的信息，那不就可以随便访问你的资源服务器了，因此这个时候就需要利用secret 来生成 token，来确保数字签名的正确性。而且在认证授权资源，进行token解析的时候，通过微软的源码发现，已经帮我们封装了方法，对secret进行了校验了，确保了token的安全性，从而保证api资源的安全。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>JwtToken在认证时，无需Security token service安全令牌服务器的参与，都是基于Claim的，默认会验证有效期，通过<code>notBefore</code>和<code>expires</code>来验证，这在分布式中提供给了极大便利。</li><li>JwtToken与平台、无言无关，在前端也可以直接解析出Claims。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li>后面会对认证授权方案中的授权这一块进行说明分享。</li><li>本示例<a href="https://files-cdn.cnblogs.com/files/i3yuan/Auth.Token.rar">源码地址</a><br>参考<a href="https://github.com/aspnet/Security/tree/master/src/Microsoft.AspNetCore.Authentication.JwtBearer">JwtBearer</a>源码</li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> JWT认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础篇——事件</title>
      <link href="2020/06/12/c-ji-chu-pian-shi-jian/"/>
      <url>2020/06/12/c-ji-chu-pian-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础篇——事件"><a href="#C-基础篇——事件" class="headerlink" title="C#基础篇——事件"></a>C#基础篇——事件</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在本章中，主要是借机这个C#基础篇的系列整理过去的学习笔记、归纳总结并更加理解透彻。</p><p>在上一篇文章，我们已经对委托有了进一步了解，委托相当于用方法作为另一方法参数，同时，也可以实现在两个不能直接调用的方法中做桥梁。</p><p>下面我们来回顾一下委托的例子。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">ExecutingDelegate</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutingManager</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ExecuteProgram</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> ExecutingDelegate ToExecuting<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ToExecuting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StartExecute</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"开始执行："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">EndExecute</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"结束执行："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ExecutingManager exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutingManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">ExecuteProgram</span><span class="token punctuation">(</span><span class="token string">"开始。。。"</span><span class="token punctuation">,</span> StartExecute<span class="token punctuation">)</span><span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">ExecuteProgram</span><span class="token punctuation">(</span><span class="token string">"结束。。。"</span><span class="token punctuation">,</span> EndExecute<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>根据上述的示例，再利用上节学到的知识，将多个方法绑定到同一个委托变量实现多播，该如何做呢？</p><p>再次修改代码:</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ExecutingManager exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutingManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutingDelegate executingDelegate<span class="token punctuation">;</span>        executingDelegate <span class="token operator">=</span> StartExecute<span class="token punctuation">;</span>        executingDelegate <span class="token operator">+</span><span class="token operator">=</span> EndExecute<span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">ExecuteProgram</span><span class="token punctuation">(</span><span class="token string">"yuan"</span><span class="token punctuation">,</span> executingDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>但是，此刻我们发现是不是可以将实例化声明委托的变量封装到ExecutingManager类中，这样是不是更加方便调用呢？</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutingManager</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 在 ExecutingManager 类的内部声明 executingDelegate 变量</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> ExecutingDelegate executingDelegate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ExecuteProgram</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> ExecutingDelegate ToExecuting<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ToExecuting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ExecutingManager exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutingManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exec<span class="token punctuation">.</span>executingDelegate <span class="token operator">=</span> StartExecute<span class="token punctuation">;</span>        exec<span class="token punctuation">.</span>executingDelegate <span class="token operator">+</span><span class="token operator">=</span> EndExecute<span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">ExecuteProgram</span><span class="token punctuation">(</span><span class="token string">"yuan"</span><span class="token punctuation">,</span> exec<span class="token punctuation">.</span>executingDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>写到这里了，这样做没有任何问题，但我们发现这条语句很奇怪。在调用exec.ExecuteProgram方法的时候，再次传递了exec的executingDelegate字段, 既然如此，我们何不修改 ExecutingManager类成这样：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutingManager</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 在 GreetingManager 类的内部声明 delegate1 变量</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> ExecutingDelegate executingDelegate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ExecuteProgram</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>executingDelegate <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果有方法注册委托变量</span>            <span class="token punctuation">{</span>                <span class="token function">executingDelegate</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过委托调用方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ExecutingManager exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutingManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exec<span class="token punctuation">.</span>executingDelegate <span class="token operator">=</span> StartExecute<span class="token punctuation">;</span>        exec<span class="token punctuation">.</span>executingDelegate <span class="token operator">+</span><span class="token operator">=</span> EndExecute<span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">ExecuteProgram</span><span class="token punctuation">(</span><span class="token string">"yuan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这样再看，发现调用一下就更加简洁了。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在日常生活中，我们可能都会遇到这样的各种各样的事情，而对于这些事情我们都会采取相应的措施。比如，当你要给一个女神过生日的时候，你就可以给她送礼物。而这种情况，在C#开发中，就相当于过生日被当作事件来对待，而送礼物就是事件做出的响应。</p><p>当女神过生日的时候，女神就会发布生日事件，而你就会接受到这个事件的通知，并做出响应的处理(送礼物等骚操作)。其中，触发这个事件的对象我们可称之为事件发布者，而捕获这个事件并做出相应处理的称之为事件订阅者，我们可以看出，女神就是充当了发布者，而你自己则充当了订阅者。</p><p>这里由生日事件引申出两类角色，即<strong>事件发布者</strong>和<strong>事件订阅者</strong>。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="1-发布者-订阅者模式"><a href="#1-发布者-订阅者模式" class="headerlink" title="1.发布者/订阅者模式"></a>1.发布者/订阅者模式</h2><p>在开发中，我们是否遇到这样的情景，当一个特定的程序事件发生时，其他程序部分可以得到该事件注册发生通知。</p><p>发布者定义一系列事件，并提供一个注册方法；订阅者向发布者注册，并提供一个可被回调的方法，也就是事件处理程序；当事件被触发的时候，订阅者得到通知，而订阅者所提交的所有方法会被执行。</p><ul><li>发布者：发布某个事件的类或结构，其他类可以在该事件发生时得到通知。</li><li>订阅者：注册并在事件发生时得到通知的类或结构。</li><li>事件处理程序：由订阅者注册到事件的方法，在发布者触发事件时执行。事件处理程序方法可以定义在事件所在的类或结果中，也可以定义在不同的类或结构中。</li><li>触发事件：调用事件的术语。当事件触发时，所有注册到它的方法都会被一次调用。</li></ul><h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h2><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 先自定义一个委托</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="oldPrice">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="newPrice">&lt;/param></span>        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">PriceChangedHandler</span><span class="token punctuation">(</span><span class="token keyword">decimal</span> oldPrice<span class="token punctuation">,</span> <span class="token keyword">decimal</span> newPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 这个一个发布者</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPhone</span>        <span class="token punctuation">{</span>            <span class="token keyword">decimal</span> price<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/// &lt;summary></span>            <span class="token comment" spellcheck="true">/// 定义一个事件</span>            <span class="token comment" spellcheck="true">/// event 用来定义事件</span>            <span class="token comment" spellcheck="true">/// PriceChangedHandler委托类型，事件需要通过委托来调用订阅者需要的方法</span>            <span class="token comment" spellcheck="true">/// &lt;/summary></span>            <span class="token keyword">public</span> <span class="token keyword">event</span> PriceChangedHandler PriceChanged<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">decimal</span> Price            <span class="token punctuation">{</span>                <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> price<span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">set</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">==</span> <span class="token keyword">value</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token keyword">decimal</span> oldPrice <span class="token operator">=</span> price<span class="token punctuation">;</span>                    price <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 如果调用列表不为空，则触发。            </span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>PriceChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//用来判断事件是否被订阅者注册过</span>                        <span class="token function">PriceChanged</span><span class="token punctuation">(</span>oldPrice<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//调用事件</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 这个一个订阅者</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="oldPrice">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="price">&lt;/param></span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">iPhone_PriceChanged</span><span class="token punctuation">(</span><span class="token keyword">decimal</span> oldPrice<span class="token punctuation">,</span> <span class="token keyword">decimal</span> price<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"618促销活动，全场手机 只卖 "</span> <span class="token operator">+</span> price <span class="token operator">+</span> <span class="token string">" 元， 原价 "</span> <span class="token operator">+</span> oldPrice <span class="token operator">+</span> <span class="token string">" 元，快来抢！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">///实例化一个发布者类</span>            IPhone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Price <span class="token operator">=</span> <span class="token number">5288</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 订阅事件   </span>            phone<span class="token punctuation">.</span>PriceChanged <span class="token operator">+</span><span class="token operator">=</span> iPhone_PriceChanged<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//完成事件的注册 调整价格（事件发生）    </span>            phone<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">3999</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//激发事件，并调用事件</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>输出：</p><blockquote><p>618促销活动，全场手机 只卖 3999 元， 原价 5288 元，快来抢！</p></blockquote><h2 id="3-解析"><a href="#3-解析" class="headerlink" title="3.解析"></a>3.解析</h2><ol><li>委托类型声明：事件与事件处理程序必须有共同的签名和返回类型，它们通过委托类型进行描述。</li><li>事件声明：使用关键字evet来声明一个事件，当声明的事件为一个public时，称为发布了一个事件。</li><li>事件注册：订阅者通过+=操作符来注册事件，并提供一个事件处理程序。</li><li>事件处理程序： 订阅者向事件注册的方法，它可以是显示命名的方法、匿名方法或者Lambda表达式</li><li>触发事件：发布者用来调用事件的代码</li></ol><h2 id="4-语法"><a href="#4-语法" class="headerlink" title="4.语法"></a>4.语法</h2><p>事件的声明语法：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//声明一个事件</span><span class="token keyword">public</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> <span class="token keyword">event</span> EventHandler EventName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明多个同类型的事件</span><span class="token keyword">public</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> <span class="token keyword">event</span> EventHandler EventName1<span class="token punctuation">,</span> EventName2<span class="token punctuation">,</span> EventName3<span class="token punctuation">;</span></code></pre><p>事件必须声明在<strong>类或结构中</strong>，因为事件它不是一个类型，它是一个类或者结构中的一员。</p><p>在事件被触发之前，可以通过和null做比较，判断是否包含事件注册处理程序。因为事件成员被初始化默认是null。</p><p>委托类型EventHandler是声明专门用来事件的委托。事件提供了对委托的结构化访问；也即是无法直接访问事件中的委托。</p><h2 id="5-用法"><a href="#5-用法" class="headerlink" title="5.用法"></a>5.用法</h2><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200609225559396-1050661212.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200609225559396-1050661212.png" alt="img"></a></p><p>查看源码：</p><p>事件的标准模式就是System命名空间下声明的EventHandler委托类型。</p><p><strong>EventArgs</strong>是System下的一个类，如下：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">;</span><span class="token keyword">namespace</span> System<span class="token punctuation">{</span>    <span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">ComVisible</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span>__DynamicallyInvokable<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventArgs</span>    <span class="token punctuation">{</span>        <span class="token punctuation">[</span>__DynamicallyInvokable<span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> EventArgs Empty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>__DynamicallyInvokable<span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token function">EventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据EventArgs源码看出，EventArgs本身无法保存和传递数据的。</p><p>如果想保存和传递数据，可以实现一个EventArgs的派生类，然后定义相关的字段来保存和传递参数。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPhone</span>    <span class="token punctuation">{</span>        <span class="token keyword">decimal</span> price<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 使用EventHandler定义一个事件</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">event</span> EventHandler PriceChanged<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnPriceChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>PriceChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token function">PriceChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">decimal</span> Price        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> price<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">==</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token keyword">decimal</span> oldPrice <span class="token operator">=</span> price<span class="token punctuation">;</span>                 price <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 如果调用列表不为空，则触发。      </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>PriceChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// //用来判断事件是否被订阅者注册过</span>                    <span class="token function">OnPriceChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 这个一个订阅者</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="sender">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">iphone_PriceChanged</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"年终大促销，快来抢！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        IPhone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Price <span class="token operator">=</span> 5288M        <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 订阅事件  </span>        phone<span class="token punctuation">.</span>PriceChanged <span class="token operator">+</span><span class="token operator">=</span> iphone_PriceChanged<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调整价格（事件发生）   </span>        phone<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">3999</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>通过扩展EventHanlder来传递数据</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200609225626091-822720797.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200609225626091-822720797.png" alt="img"></a></p><p>System下另有泛型EventHandler类。由此，这里我们可以将派生于EventArgs的类作为类型参数传递过来，这样，既可以获得派生类保存的数据。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">///扩展类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriceChangedEventArgs</span> <span class="token punctuation">:</span> System<span class="token punctuation">.</span>EventArgs    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">decimal</span> OldPrice<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">decimal</span> NewPrice<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">PriceChangedEventArgs</span><span class="token punctuation">(</span><span class="token keyword">decimal</span> oldPrice<span class="token punctuation">,</span> <span class="token keyword">decimal</span> newPrice<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            OldPrice <span class="token operator">=</span> oldPrice<span class="token punctuation">;</span>            NewPrice <span class="token operator">=</span> newPrice<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPhone</span>    <span class="token punctuation">{</span>        <span class="token keyword">decimal</span> price<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">event</span> EventHandler<span class="token operator">&lt;</span>PriceChangedEventArgs<span class="token operator">></span> PriceChanged<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnPriceChanged</span><span class="token punctuation">(</span>PriceChangedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>PriceChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token function">PriceChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">decimal</span> Price        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> price<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">==</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token keyword">decimal</span> oldPrice <span class="token operator">=</span> price<span class="token punctuation">;</span>                price <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 如果调用列表不为空，则触发。      </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>PriceChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token function">OnPriceChanged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PriceChangedEventArgs</span><span class="token punctuation">(</span>oldPrice<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">iphone_PriceChanged</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> PriceChangedEventArgs e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"618促销活动，全场手机 只卖 "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>NewPrice <span class="token operator">+</span> <span class="token string">" 元， 原价 "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>OldPrice <span class="token operator">+</span> <span class="token string">" 元，快来抢！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        IPhone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Price <span class="token operator">=</span> 5288M        <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 订阅事件  </span>        phone<span class="token punctuation">.</span>PriceChanged <span class="token operator">+</span><span class="token operator">=</span> iphone_PriceChanged<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调整价格（事件发生）   </span>        phone<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">3999</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>输出</p><blockquote><p>618促销活动，全场手机 只卖 3999 元， 原价 5288 元，快来抢！</p></blockquote><h2 id="6-移除事件"><a href="#6-移除事件" class="headerlink" title="6.移除事件"></a>6.移除事件</h2><p>可以利用 -= 运算符处理程序从事件中移除，当程序处理完后，可以将事件从中把它移除掉。</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">class</span> <span class="token class-name">Publiser</span>        <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">event</span> EventHandler SimpleEvent<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RaiseTheEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">SimpleEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">class</span> <span class="token class-name">Subscriber</span>        <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MethodA</span><span class="token punctuation">(</span><span class="token keyword">object</span> o<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MethodB</span><span class="token punctuation">(</span><span class="token keyword">object</span> o<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Publiser p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publiser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Subscriber s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>SimpleEvent <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">.</span>MethodA<span class="token punctuation">;</span>            p<span class="token punctuation">.</span>SimpleEvent <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">.</span>MethodB<span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">RaiseTheEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n移除B事件处理程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>SimpleEvent <span class="token operator">-</span><span class="token operator">=</span> s<span class="token punctuation">.</span>MethodB<span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">RaiseTheEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>输出：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200609225930653-1958410213.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200609225930653-1958410213.png" alt="img"></a></p><h2 id="7-事件访问器"><a href="#7-事件访问器" class="headerlink" title="7.事件访问器"></a>7.事件访问器</h2><p>运算符+= 、-=事件允许的唯一运算符。这些运算符是有预定义的行为。然而，我们可以修改这些运算符的行为，让事件执行任何我们希望定义的代码。</p><p>可以通过为事件定义事件访问器，来控制事件运算符+=、-=运算符的行为</p><ol><li>两个访问器： add 和 remove</li><li>声明事件的访问器看上去和声明一个熟悉差不多。</li></ol><p>下面示例演示了具有访问器的声明.两个访问器都有叫做value的隐式值参数,它接受实例或静态方法的引用</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">event</span> EventHandler Elapsed<span class="token punctuation">{</span>    <span class="token keyword">add</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//... 执行+=运算符的代码</span>    <span class="token punctuation">}</span>     <span class="token keyword">remove</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//... 执行-=运算符的代码</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>声明了事件访问器后,事件不包含任何内嵌委托对象.我们必须实现自己的机制来存储和移除事件的方法。</p><p>事件访问器表现为void方法,也就是不能使用会返回值的return语句。</p><p>示例：</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">//声明一个delegate</span>        <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">EventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">MyClass</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//声明一个成员变量来保存事件句柄（事件被激发时被调用的delegate）</span>            <span class="token keyword">private</span> EventHandler m_Handler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//激发事件</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">FireAEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">m_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//声明事件</span>            <span class="token keyword">public</span> <span class="token keyword">event</span> EventHandler AEvent            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//添加访问器</span>                <span class="token keyword">add</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//注意,访问器中实际包含了一个名为value的隐含参数</span>                    <span class="token comment" spellcheck="true">//该参数的值即为客户程序调用+=时传递过来的delegate</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"AEvent add被调用,value的HashCode为:"</span> <span class="token operator">+</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//设置m_Handler域保存新的handler</span>                        m_Handler <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//删除访问器</span>                <span class="token keyword">remove</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"AEvent remove被调用,value的HashCode为:"</span> <span class="token operator">+</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> m_Handler<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//设置m_Handler为null,该事件将不再被激发</span>                        m_Handler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyClass obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建委托</span>            EventHandler MyHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventHandler</span><span class="token punctuation">(</span>MyEventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>            MyHandler <span class="token operator">+</span><span class="token operator">=</span> MyEventHandle2<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将委托注册到事件</span>            obj<span class="token punctuation">.</span>AEvent <span class="token operator">+</span><span class="token operator">=</span> MyHandler<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//激发事件</span>            obj<span class="token punctuation">.</span><span class="token function">FireAEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将委托从事件中撤销</span>            obj<span class="token punctuation">.</span>AEvent <span class="token operator">-</span><span class="token operator">=</span> MyHandler<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//再次激发事件</span>            obj<span class="token punctuation">.</span><span class="token function">FireAEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//事件处理程序</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MyEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is a Event!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//事件处理程序</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MyEventHandle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is a Event2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>输出:</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200609225847215-201054588.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200609225847215-201054588.png" alt="img"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>这节对事件的基本使用，以及事件的标准语法、事件访问器等多个地方进行说明，大致可以了解和掌握事件的基本使用。</li><li>结合<a href="https://www.cnblogs.com/i3yuan/p/13052782.html">上一篇</a>的委托和这一节的事件，委托和事件我们大概掌握了基本用法。并加以实践，结合实际开发，应用其中。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li></ol><p>参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/">文档 </a>《C#图解教程》</p><p>注：搜索关注公众号【DotNet技术谷】–回复【C#图解】，可获取 <a href="https://www.ituring.com.cn/book/1108">C#图解教程</a>文件</p>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础篇——委托</title>
      <link href="2020/05/31/c-ji-chu-pian-wei-tuo/"/>
      <url>2020/05/31/c-ji-chu-pian-wei-tuo/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础篇——委托"><a href="#C-基础篇——委托" class="headerlink" title="C#基础篇——委托"></a>C#基础篇——委托</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在本章中，主要是借机这个C#基础篇的系列整理过去的学习笔记、归纳总结并更加理解透彻。</p><p>在.Net开发中，我们经常会遇到并使用过委托，如果能灵活的掌握并加以使用会使你在编程中游刃有余，然后对于很多接触C#时间不长的开发者而言，较好的理解委托和事件并不容易。</p><p>本节主要是讲述对委托的定义、委托的使用、多播委托、泛型委托、匿名方法、Func和Action委托、Lambda委托，并对它们进行讨论。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>简单说它就是一个能把方法当参数传递的对象，而且还知道怎么调用这个方法，同时也是粒度最小的“接口”（约束了指向方法的签名）。<br><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200607161324038-2062555916.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200607161324038-2062555916.png" alt="img"></a></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-定义委托"><a href="#1-定义委托" class="headerlink" title="1.定义委托"></a>1.定义委托</h3><p>委托：是一种定义方法签名的类型。 当实例化委托时，可以将其实例与任何具有兼容签名的方法相关联。 可以通过委托实例调用方法。</p><p>这里引用一个网友的说法：</p><pre><code>某人有三子，让他们各自带一样东西出门，并带回一头猎物。上面一句话可以理解为父亲对儿子的委托：猎物 办法(工具 某工具)--&gt;delegate 猎物(返回值) 带回猎物(委托名)(工具(参数类型) x)--&gt;delegate int GetValue(int i)三个人执行委托的方法各不相同兔子 打猎(工具 弓)-public static int GetValue1(int i)&#123; return i; &#125;野鸡 买(工具 钱)-public static int GetValue2(int i)&#123; return i*2; &#125;狼 诱捕(工具 陷阱)-public static int GetValue3(int i)&#123; return i*i; &#125;</code></pre><h3 id="2-简单的使用"><a href="#2-简单的使用" class="headerlink" title="2.简单的使用"></a>2.简单的使用</h3><p>一个委托类型定义了该类型的实例化时能调用的一类方法，这些方法含有同样的返回类型和同样参数（类型和参数个数相同）<br><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200607161351509-1500252259.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200607161351509-1500252259.png" alt="img"></a></p><p>比如：定义一个委托</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">delegate</span> <span class="token keyword">int</span> <span class="token function">Calculator</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此委托适用于有着int返回类型和一个int类型参数方法。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">Double</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>创建一个委托实例，并将方法赋值给委托实例</p><pre class=" language-csharp"><code class="language-csharp">Calculator c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span>Double<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者另一种写法</span>Calculator c <span class="token operator">=</span> Double<span class="token punctuation">;</span></code></pre><p>通过委托实例的调用</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-多播委托"><a href="#3-多播委托" class="headerlink" title="3.多播委托"></a>3.多播委托</h3><p>在开发中，我们有时候会遇到要通过调用一个委托，同时可以执行多个方法的时候，就可以考虑用多播委托。调用多个委托需要多次显示调用这个委托。所有的委托实例都可以包含多个方法，实现多播功能。</p><pre class=" language-csharp"><code class="language-csharp">这个打个比方：多播，就像一群程序员在瞬聘网填好了求职意向后，某天有个公司发布了一个和这些程序员求职意向刚好相匹配的工作，然后这些求职者都被通知了 <span class="token operator">-</span> “有一份好工作招人啦，你们可以直接申请去上班了！”。也就是说，一个委托实例不仅可以指向一个方法，还可以指向多个方法。多播委托，提供了一种类似于流水线的钩子机制，只要加载到这条流水线上的委托，都会被顺序执行。因为所有的都继承自MulticastDelegate<span class="token punctuation">,</span>因此所有的委托都具有多播特性        <span class="token comment" spellcheck="true">//声明一个委托，委托返回值为void</span>        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">Greetings</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"您好, {0}!"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GoodBye</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"再见, {0}!"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Greetings greetings <span class="token operator">=</span> Hello<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用+=给委托添加方法</span>            greetings <span class="token operator">+</span><span class="token operator">=</span> GoodBye<span class="token punctuation">;</span>            String name <span class="token operator">=</span> <span class="token string">"艾三元"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这是一种调用方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第一种执行方式</span>            <span class="token function">greetings</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第二种执行方式</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这是另一种使用方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回委托的调用列表。</span>            Delegate<span class="token punctuation">[</span><span class="token punctuation">]</span> delegates <span class="token operator">=</span> greetings<span class="token punctuation">.</span><span class="token function">GetInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注意这里的delegates列表中存储的是Greetings类型的委托</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span>Greetings greeting <span class="token keyword">in</span> delegates<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200605230137458-1748233452.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200605230137458-1748233452.png" alt="1748233452"></a></p><p>说明：</p><ul><li>如果是多播委托，委托的签名就必须返回 void ，否则，返回值应送到何处？当委托只包含一个方法的时候，则可以通过所封装的方法发现其返回类型的声明，不一定必须是void。实际上，如果编译器发现某个委托返回 void ，就会自动假定这是一个多播委托。</li><li>“+=” 用来添加，“-=”用来从委托中删除方法调用</li></ul><h3 id="4-泛型委托"><a href="#4-泛型委托" class="headerlink" title="4.泛型委托"></a>4.泛型委托</h3><p>在之前的篇章中，我们已经学会了什么是<a href="https://www.cnblogs.com/i3yuan/p/12997374.html">泛型</a>，因此，也方便我们理解泛型委托，简单的说，就是一种含有泛型参数的委托。</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">public</span> <span class="token keyword">delegate</span> T <span class="token generic-method function">Calculator<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">Double</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Utility</span>        <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">Calculate<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> Calculator<span class="token operator">&lt;</span>T<span class="token operator">></span> c<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">c</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            Utility<span class="token punctuation">.</span><span class="token function">Calculate</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> Double<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token keyword">in</span> values<span class="token punctuation">)</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 22 44 66 88</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="5-匿名方法"><a href="#5-匿名方法" class="headerlink" title="5. 匿名方法"></a>5. 匿名方法</h3><p>匿名方法，是在初始化委托时候内联声明的方法。</p><p>每次实例化一个委托时，都需要事先定义一个委托所要调用的方法。为了简化这个流程，C# 2.0开始提供匿名方法来实例化委托。这样，我们在实例化委托时就可以 “随用随写” 它的实例方法。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">GetNumber</span><span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delegate</span> <span class="token keyword">string</span> <span class="token function">DelNumber</span><span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明一个名称为GetNumber的具名方法</span>        DelNumber delNumber1 <span class="token operator">=</span> GetNumber<span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">delNumber1</span><span class="token punctuation">(</span><span class="token string">"这是具名方法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匿名方法 ，未在别的地方定义方法，而是直接把方法写在实例化代码中</span>        DelNumber delNumber2 <span class="token operator">=</span> <span class="token keyword">delegate</span> <span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">delNumber2</span><span class="token punctuation">(</span><span class="token string">"这是匿名方法调用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p>通过以上简单的示例看出：</p><p>匿名方法的语法：关键字delegate {参数列表}{语句块}</p><p>delegte { Paramters} {ImplementationCode}</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">delegate</span> <span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>使用的格式是：</p><p>委托类名 委托实例名 = delegate (args) {方法体代码} ;</p><pre class=" language-csharp"><code class="language-csharp">         <span class="token keyword">delegate</span> <span class="token keyword">string</span> <span class="token function">DelNumber</span><span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//委托类型的返回类型</span>        <span class="token comment" spellcheck="true">//匿名方法 ，未在别的地方定义方法，而是直接把方法写在实例化代码中</span>        DelNumber delNumber2 <span class="token operator">=</span> <span class="token keyword">delegate</span> <span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//根据返回类型，返回一个string类型</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这样就可以直接把方法写在实例化代码中，不必在另一个地方定义方法。当然，匿名委托不适合需要采用多个方法的委托的定义。需要说明的是，匿名方法并不是真的“没有名字”的，而是编译器为我们自动取一个名字。</p><p>可以在以下地方使用匿名方法：</p><ul><li>声明委托变量时为初始化表达式。</li><li>组合委托时在赋值语句的右边。</li><li>为委托增加事件时在赋值语句的右边。</li></ul><h3 id="6-Func-和-Action-委托"><a href="#6-Func-和-Action-委托" class="headerlink" title="6.Func 和 Action 委托"></a>6.Func 和 Action 委托</h3><p>在之前，我们在使用委托的时候，都是自定义一个委托类型，再使用这个自定定义的委托定义一个委托字段或变量。而在后续的编程语言中又新加入了一种特性，C#语言预先为我们定义了两个常用的委托，一个是Func，一个是Action,还带来了Lambda,这使得委托的定义和使用变得简单起来， 在以后进行C#程序编写中引入委托更加灵活。</p><p>Action委托</p><p>C#中与预定义了一个委托类型Action，基本特点就是可以执行一个没有返回值，没有参数的方法。是一类没有输出参数的委托，但是输入参数可以为C#中的任意类型，即可以进行委托执行形式的方法。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Action基本使用</span>        Action a <span class="token operator">=</span> printString<span class="token punctuation">;</span>        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果  Hello World</span>        <span class="token comment" spellcheck="true">//Action指向有参数的方法</span>        Action<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b <span class="token operator">=</span> printNumber<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个指向 形参为int的函C#数</span>        <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果  5</span>    <span class="token punctuation">}</span></code></pre><p>Action可以通过泛型来指定，指向的方法有 0 - 16个参数</p><p>Action&lt;int, int, string, bool 等等&gt;</p><p>Func委托</p><p>Func同样也是预定的委托，是一种由返回值的委托，传递0-16个参数，其中输入参数和返回值都用泛型表示。</p><pre class=" language-csharp"><code class="language-csharp">          <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GetNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GetNumber</span><span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a <span class="token operator">=</span> GetNumber<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个Func 委托，  指向一个返回int类型的 方法</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Func<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> b <span class="token operator">=</span> GetNumber<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 泛型中最后一个参数表示返回值类型。</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </code></pre><p><strong>注意</strong>：Func&lt;string, int&gt; 最后一个参数表示返回值类型，前面的都是形参类型。</p><h3 id="7-Lambda表达式"><a href="#7-Lambda表达式" class="headerlink" title="7. Lambda表达式"></a>7. Lambda表达式</h3><p>江山代有才人出，纵然匿名方法使用很方便，可惜她很快就成了过气网红，没能领多长时间的风骚。如今已经很少见到了，因为delegate关键字限制了她用途的扩展。自从C# 3.0开始，她就被Lambda表达式取代，而且Lambda表达式用起来更简单。Lambda表达式本质上是改进的匿名方法。</p><p>在匿名方法中，delegate关键字有点多余，因为编译器已知将我们的方法赋值给委托。因此，我们很容易的将匿名方法的步骤转换为Lambda表达式：1. 删除delegate关键字。2.在参数列表和匿名方法主体之间放lambda运算符=&gt;。</p><pre class=" language-csharp"><code class="language-csharp">DelNumber delNumber2 <span class="token operator">=</span> <span class="token keyword">delegate</span> <span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//匿名方法</span>DelNumber delNumber2 <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Lambda方法</span></code></pre><p>Lambda表达式的灵感来源于数学中的Lambda积分函数表达式，例如下图：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200605230211086-1270751451.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200605230211086-1270751451.png" alt="1270751451"></a></p><p>Lambda表达式把其中的箭头用 =&gt; 符号表示。</p><p>上面的对比例子中，Lambda还可以进一步简化</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">delegate</span> <span class="token keyword">string</span> <span class="token function">DelNumber</span><span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//委托类型的返回类型</span>DelNumber delNumber2 <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Lambda方法</span>DelNumber delNumber3 <span class="token operator">=</span>         <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//省略类型参数</span>DelNumber delNumber4 <span class="token operator">=</span>           str <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//省略类型参数( 如果只有一个隐式类型参数，可以省略周围的圆括号)</span>DelNumber delNumber5 <span class="token operator">=</span>           str <span class="token operator">=</span><span class="token operator">></span>  str<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//语句块替换为return关键字后的表达式 ( 如果只有一个返回语句，可以将语句块替换为return关键字后的表达式)</span></code></pre><p>如今Lambda表达式已经应用在很多地方了，例如方法体表达式（Expression-Bodied Methods）、自动只读属性表达式等等。</p><p>Lambda表达式形式上分为两种：</p><p>1.表达式Lambda<br>当匿名函数只有一行代码时，可采用这种形式。例如：</p><pre class=" language-csharp"><code class="language-csharp">DelNumber delNumber<span class="token operator">=</span> <span class="token punctuation">(</span>s4<span class="token punctuation">,</span> s5<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s4<span class="token punctuation">.</span>Age <span class="token operator">&lt;=</span> s5<span class="token punctuation">.</span>Age<span class="token punctuation">;</span></code></pre><p>其中=&gt;符号代表Lambda表达式，它的左侧是参数，右侧是要返回或执行的语句。参数要放在圆括号中，若只有一个参数，为了方便起见可省略圆括号。有多个参数或者没有参数时，不可省略圆括号。</p><p>相比匿名函数，在表达式Lambda中，方法体的花括号{}和return关键字被省略掉了。</p><p>用的也是表达式Lambda，这是Lambda表达式的推广， 是C# 6 编译器提供的一个语法糖。</p><p>2.语句Lambda<br>当匿名函数有多行代码时，只能采用语句Lambda。例如，上面的表达式Lambda可改写为语句Lambda：</p><pre class=" language-csharp"><code class="language-csharp">DelNumber delNumber<span class="token operator">=</span> <span class="token punctuation">(</span>s4<span class="token punctuation">,</span> s5<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//此处省略其他代码</span>    <span class="token keyword">return</span> s4<span class="token punctuation">.</span>Age <span class="token operator">&lt;=</span> s5<span class="token punctuation">.</span>Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>语句Lambda不可以省略{}和return语句。</p><p>完整示例</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">delegate</span> <span class="token keyword">string</span> <span class="token function">DelNumber</span><span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//委托类型的返回类型</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DelNumber delNumber2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Lambda方法</span>            DelNumber delNumber3 <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//省略类型参数</span>            DelNumber delNumber4 <span class="token operator">=</span> str <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//省略类型参数( 如果只有一个隐式类型参数，可以省略周围的圆括号)</span>            DelNumber delNumber5 <span class="token operator">=</span> str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//语句块替换为return关键字后的表达式 ( 如果只有一个返回语句，可以将语句块替换为return关键字后的表达式)</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">delNumber2</span><span class="token punctuation">(</span><span class="token string">"lambda"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">delNumber3</span><span class="token punctuation">(</span><span class="token string">"lambda"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">delNumber4</span><span class="token punctuation">(</span><span class="token string">"lambda"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">delNumber5</span><span class="token punctuation">(</span><span class="token string">"lambda"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：一个参数可以省略圆括号，多个参数必须圆括号，但是没有参数，必须使用一组空的圆括号<br><a href="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200607161414449-63995552.png"><img src="https://img2020.cnblogs.com/blog/1576550/202006/1576550-20200607161414449-63995552.png" alt="img"></a></p><pre class=" language-csharp"><code class="language-csharp">如： <span class="token punctuation">(</span>参数，参数<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>语句<span class="token punctuation">}</span> 或者 表达式       <span class="token punctuation">(</span>参数<span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>语句<span class="token punctuation">}</span> 或者 表达式        参数   <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>语句<span class="token punctuation">}</span> 或者 表达式        <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>语句<span class="token punctuation">}</span> 或者 表达式</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>委托相当于用方法作为另一方法参数，同时，也可以实现在两个不能直接调用的方法中做桥梁，如在多线程中的跨线程的方法调用就得用委托。</li><li>熟悉在什么情况使用委托，在使用事件设计模式时，当需要封装静态方法时，当需要方便的组合时等多种情况下，可以加以使用。</li><li>如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，一起讨论,不断学习,共同进步。</li><li>在下一节中，将对<strong>事件</strong>进行简单介绍，并总结归纳。</li></ol><p>参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/">文档 </a>《C#图解教程》</p><p>注：搜索关注公众号【DotNet技术谷】–回复【C#图解】，可获取 <a href="https://www.ituring.com.cn/book/1108">C#图解教程</a>文件</p>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础篇——泛型</title>
      <link href="2020/05/31/c-ji-chu-pian-fan-xing/"/>
      <url>2020/05/31/c-ji-chu-pian-fan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础篇——泛型"><a href="#C-基础篇——泛型" class="headerlink" title="C#基础篇——泛型"></a>C#基础篇——泛型</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发编程中，我们经常会遇到功能非常相似的功能模块，只是他们的处理的数据不一样，所以我们会分别采用多个方法来处理不同的数据类型。但是这个时候，我们就会想一个问题，有没有办法实现利用同一个方法来传递不同种类型的参数呢？</p><p>这个时候，泛型也就因运而生，专门来解决这个问题的。</p><p>泛型是在C#2.0就推出的一个新语法，由框架升级提供的功能。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>泛型通过参数化类型实现在同一份代码上操作多种数据类型。例如使用泛型的类型参数T,定义一个类Stack，</p><p>可以用Stack、Stack或者Stack实例化它，从而使类Stack可以处理int、string、Person类型数据。这样可以避免运行时类型转换或封箱操作的代价和风险。泛型提醒的是将具体的东西模糊化。</p><p>同时使用泛型类型可以最大限度地重用代码、保护类型安全以及提高性能。</p><p>可以创建：<strong>泛型接口</strong>、<strong>泛型类</strong>、<strong>泛型方法</strong>、<strong>泛型事件</strong>和<strong>泛型委托</strong></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类封装不特定于特定数据类型的操作。 泛型类最常见用法是用于链接列表、哈希表、堆栈、队列和树等集合。 无论存储数据的类型如何，添加项和从集合删除项等操作的执行方式基本相同。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// T是int类型</span>        GenericClass<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> genericInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericInt<span class="token punctuation">.</span>_T <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// T是string类型</span>        GenericClass<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> genericString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericString<span class="token punctuation">.</span>_T <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>新建一个GenericClass类</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 泛型类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> T _T<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>泛型方法是通过类型参数声明的方法, 解决用一个方法，满足不同参数类型</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 泛型方法</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"************Generic**************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> iValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">string</span> sValue <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span>        DateTime dtValue <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>        <span class="token keyword">object</span> oValue <span class="token operator">=</span> <span class="token string">"MrValue"</span><span class="token punctuation">;</span>        GenericMethod<span class="token punctuation">.</span><span class="token generic-method function">Show<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要指定类型参数</span>        <span class="token comment" spellcheck="true">//GenericMethod.Show&lt;string>(iValue);//必须吻合</span>        GenericMethod<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//能省略，自动推算</span>        GenericMethod<span class="token punctuation">.</span><span class="token generic-method function">Show<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>sValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        GenericMethod<span class="token punctuation">.</span><span class="token generic-method function">Show<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">></span></span><span class="token punctuation">(</span>dtValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        GenericMethod<span class="token punctuation">.</span><span class="token generic-method function">Show<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>oValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span></code></pre><p>新建一个GenericMethod</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 泛型方法</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericMethod</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 2.0推出的新语法</span>    <span class="token comment" spellcheck="true">/// 泛型方法解决用一个方法，满足不同参数类型；做相同的事儿</span>    <span class="token comment" spellcheck="true">/// 没有写死参数类型，调用的时候才指定的类型</span>    <span class="token comment" spellcheck="true">/// 延迟声明：把参数类型的声明推迟到调用</span>    <span class="token comment" spellcheck="true">/// 推迟一切可以推迟的~~  延迟思想</span>    <span class="token comment" spellcheck="true">/// 不是语法糖，而是2.0由框架升级提供的功能</span>    <span class="token comment" spellcheck="true">/// 需要编译器支持+JIT支持</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">T/S 不要用关键字  也不要跟别的类型冲突 &lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;param name="tParameter">&lt;/param></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">Show<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>            <span class="token keyword">typeof</span><span class="token punctuation">(</span>GenericMethod<span class="token punctuation">)</span><span class="token punctuation">,</span> tParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> tParameter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>为泛型集合类或表示集合中的项的泛型类定义接口通常很有用处。在c#中，通过尖括号“&lt;&gt;”将类型参数括起来，表示泛型。声明泛型接口时，与声明一般接口的唯一区别是增加了一个。一般来说，声明泛型接口与声明非泛型接口遵循相同的规则。</p><p>泛型接口定义完成之后，就要定义此接口的子类。定义泛型接口的子类有以下两种方法。</p><p>(1)直接在子类后声明泛型。</p><p>(2)在子类实现的接口中明确的给出泛型类型。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 泛型接口</span>        CommonInterface commonInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commonInterface<span class="token punctuation">.</span><span class="token function">GetT</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span></code></pre><p>新建GenericInterface.cs类文件</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 泛型类</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span>        <span class="token punctuation">{</span>            <span class="token keyword">public</span> T _T<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 泛型接口</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGenericInterface</span><span class="token operator">&lt;</span>T<span class="token operator">></span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//泛型类型的返回值</span>            T <span class="token function">GetT</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 使用泛型的时候必须指定具体类型，</span>        <span class="token comment" spellcheck="true">/// 这里的具体类型是int</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonClass</span> <span class="token punctuation">:</span> GenericClass<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 必须指定具体类型</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonInterface</span> <span class="token punctuation">:</span> IGenericInterface<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>        <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">GetT</span><span class="token punctuation">(</span><span class="token keyword">string</span> t<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 子类也是泛型的，继承的时候可以不指定具体类型</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonClassChild</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> GenericClass<span class="token operator">&lt;</span>T<span class="token operator">></span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span></code></pre><h2 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h2><p>泛型委托主要是想讲一下Action和Func两个委托，因为这两个在Linq中是经常见到的。</p><p>Action只能委托必须是无返回值的方法</p><p>Fun只是委托必须有返回值的方法</p><p>不管是不是泛型委托，只要是委托委托那能用Lamdba表达式，因为不管Lamdba表达式还是匿名函数其实都是将函数变量化。</p><p>下面简单的来做的demo说下两个的用法,这个会了基本linq会了一半了。</p><pre class=" language-C#"><code class="language-C#">    static void Main(string[] args)    {        #region 泛型委托        Action<string> action = s => {            Console.WriteLine(s);        };        action("i3yuan");        Func<int, int, int> func = (int a, int b) => {            return a + b;        };        Console.WriteLine("sum:{0}", func(1,1));        Console.ReadLine();        #endregion    }</code></pre><p>上面其实都是将函数做为变量，这也是委托的思想。action是实例化了一个只有一个字符串参数没有返回值得函数变量。func是实例化了一个有两个int类型的参数返回值为int的函数变量。</p><p>可以看到通过Lamdba表达式和泛型的结合，算是又方便了开发者们，更加方便实用。</p><blockquote><h2 id="引入委托常用的另一方式"><a href="#引入委托常用的另一方式" class="headerlink" title="引入委托常用的另一方式"></a>引入委托常用的另一方式</h2></blockquote><p>无论是在类定义内还是类定义外，委托可以定义自己的类型参数。引用泛型委托的代码可以指定类型参数来创建一个封闭构造类型，这和实例化泛型类或调用泛型方法一样，如下例所示：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token generic-method function">MyDelegate<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//...</span>MyDelegate<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDelegate</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>Notify<span class="token punctuation">)</span><span class="token punctuation">;</span>C#<span class="token number">2.0</span>版有个新特性称为方法组转换（method <span class="token keyword">group</span> conversion），具体代理和泛型代理类型都可以使用。用方法组转换可以把上面一行写做简化语法：MyDelegate<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m <span class="token operator">=</span> Notify<span class="token punctuation">;</span>在泛型类中定义的委托，可以与类的方法一样地使用泛型类的类型参数。<span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>      <span class="token keyword">int</span> index<span class="token comment" spellcheck="true">//...</span><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">StackDelegate</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>引用委托的代码必须要指定所在类的类型参数，如下：Stack<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stack<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">.</span>StackDelegate myDelegate <span class="token operator">=</span> StackNotify<span class="token punctuation">;</span>泛型委托在定义基于典型设计模式的事件时特别有用。因为sender<span class="token punctuation">[</span>JX2<span class="token punctuation">]</span> ，而再也不用与Object相互转换。<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token generic-method function">StackEventHandler<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span>U<span class="token punctuation">></span></span><span class="token punctuation">(</span>T sender<span class="token punctuation">,</span> U eventArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//…</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackEventArgs</span> <span class="token punctuation">:</span> EventArgs<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">event</span> StackEventHandler<span class="token operator">&lt;</span>Stack<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> StackEventArgs<span class="token operator">></span> stackEvent<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnStackChanged</span><span class="token punctuation">(</span>StackEventArgs a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">stackEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">HandleStackChange<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>Stack<span class="token operator">&lt;</span>T<span class="token operator">></span> stack<span class="token punctuation">,</span> StackEventArgs args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Stack<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyClass mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>StackEventHandler <span class="token operator">+</span><span class="token operator">=</span> mc<span class="token punctuation">.</span>HandleStackChange<span class="token punctuation">;</span></code></pre><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>所谓的泛型约束，实际上就是约束的类型T。使T必须遵循一定的规则。比如T必须继承自某个类，或者T必须实现某个接口等等。那么怎么给泛型指定约束？其实也很简单，只需要where关键字，加上约束的条件。</p><p>定义一个People类，里面有属性和方法：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISports</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Pingpang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWork</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token punctuation">:</span> People<span class="token punctuation">,</span> ISports<span class="token punctuation">,</span> IWork    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Tradition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"仁义礼智信，温良恭俭让"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"吃了么？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Pingpang</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"打乒乓球..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hubei</span> <span class="token punctuation">:</span> Chinese    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Hubei</span><span class="token punctuation">(</span><span class="token keyword">int</span> version<span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Changjiang <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Majiang</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"打麻将啦。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Japanese</span> <span class="token punctuation">:</span> ISports    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Pingpang</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"打乒乓球..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>打印方法</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 打印个object值</span>    <span class="token comment" spellcheck="true">/// 1 object类型是一切类型的父类</span>    <span class="token comment" spellcheck="true">/// 2 通过继承，子类拥有父类的一切属性和行为；任何父类出现的地方，都可以用子类来代替</span>    <span class="token comment" spellcheck="true">/// object引用类型  加入传个值类型int  会有装箱拆箱  性能损失</span>    <span class="token comment" spellcheck="true">/// 类型不安全</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="oParameter">&lt;/param></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowObject</span><span class="token punctuation">(</span><span class="token keyword">object</span> oParameter<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>            <span class="token keyword">typeof</span><span class="token punctuation">(</span>Constraint<span class="token punctuation">)</span><span class="token punctuation">,</span> oParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> oParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{((People)oParameter).Id}_{((People)oParameter).Name}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在main方法中</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span>  Constraint 接口约束</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"************Constraint*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            People people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Id <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>                Name <span class="token operator">=</span> <span class="token string">"走自己的路"</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            Chinese chinese <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Id <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">,</span>                Name <span class="token operator">=</span> <span class="token string">"晴天"</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            Hubei hubei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hubei</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Id <span class="token operator">=</span> <span class="token number">345</span><span class="token punctuation">,</span>                Name <span class="token operator">=</span> <span class="token string">"流年"</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            Japanese japanese <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Japanese</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Id <span class="token operator">=</span> <span class="token number">7654</span><span class="token punctuation">,</span>                Name <span class="token operator">=</span> <span class="token string">"i3yuan"</span><span class="token comment" spellcheck="true">//</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            CommonMethod<span class="token punctuation">.</span><span class="token function">ShowObject</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>            CommonMethod<span class="token punctuation">.</span><span class="token function">ShowObject</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>            CommonMethod<span class="token punctuation">.</span><span class="token function">ShowObject</span><span class="token punctuation">(</span>hubei<span class="token punctuation">)</span><span class="token punctuation">;</span>            CommonMethod<span class="token punctuation">.</span><span class="token function">ShowObject</span><span class="token punctuation">(</span>japanese<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span></code></pre><p>泛型约束总共有五种。</p><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>T：结构</td><td>类型参数必须是值类型</td></tr><tr><td>T：类</td><td>类型参数必须是引用类型；这一点也适用于任何类、接口、委托或数组类型。</td></tr><tr><td>T：new()</td><td>类型参数必须具有无参数的公共构造函数。 当与其他约束一起使用时，new() 约束必须最后指定。</td></tr><tr><td>T：&lt;基类名&gt;</td><td>类型参数必须是指定的基类或派生自指定的基类。</td></tr><tr><td>T：&lt;接口名称&gt;</td><td>类型参数必须是指定的接口或实现指定的接口。 可以指定多个接口约束。 约束接口也可以是泛型的。</td></tr></tbody></table><p>1、基类约束</p><p>上面打印的方法约束T类型必须是People类型。<br>      基类约束：</p><p>约束T必须是People类型或者是People的子类</p><ol><li>可以使用基类的一切属性方法—权利</li><li>强制保证T一定是People或者People的子类—义务</li></ol><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// </span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>        <span class="token comment" spellcheck="true">/// &lt;param name="tParameter">&lt;/param></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">Show<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> People        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{tParameter.Id}_{tParameter.Name}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tParameter<span class="token punctuation">.</span><span class="token function">Hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>注意：</p><p>基类约束时，基类不能是密封类，即不能是sealed类。sealed类表示该类不能被继承，在这里用作约束就无任何意义，因为sealed类没有子类。</p><p>2、接口约束</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 接口约束</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>        <span class="token comment" spellcheck="true">/// &lt;param name="t">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> T <span class="token generic-method function">Get<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> ISports        <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">Pingpang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>3、引用类型约束 class</p><p>引用类型约束保证T一定是引用类型的。</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// 引用类型约束</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>        <span class="token comment" spellcheck="true">/// &lt;param name="t">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> T <span class="token generic-method function">Get<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">class</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>4、值类型约束 struct</p><p>值类型约束保证T一定是值类型的。</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// 值类型类型约束</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>        <span class="token comment" spellcheck="true">/// &lt;param name="t">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> T <span class="token generic-method function">Get<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">struct</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>5、无参数构造函数约束 new()</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// new()约束</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>        <span class="token comment" spellcheck="true">/// &lt;param name="t">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> T <span class="token generic-method function">Get<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>泛型约束也可以同时约束多个，例如：</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">///  泛型：不同的参数类型都能进来；任何类型都能过来，你知道我是谁?</span>        <span class="token comment" spellcheck="true">/// 没有约束，也就没有自由</span>        <span class="token comment" spellcheck="true">///  泛型约束--基类约束（不能是sealed）：</span>        <span class="token comment" spellcheck="true">/// 1 可以使用基类的一切属性方法---权利</span>        <span class="token comment" spellcheck="true">/// 2  强制保证T一定是People或者People的子类---义务</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>        <span class="token comment" spellcheck="true">/// &lt;param name="tParameter">&lt;/param></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">Show<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span>        <span class="token keyword">where</span> T <span class="token punctuation">:</span> People<span class="token punctuation">,</span> ISports<span class="token punctuation">,</span> IWork<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{tParameter.Id}_{tParameter.Name}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tParameter<span class="token punctuation">.</span><span class="token function">Hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tParameter<span class="token punctuation">.</span><span class="token function">Pingpang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tParameter<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>注意：有多个泛型约束时，new()约束一定是在最后。</p><h2 id="泛型的协变和逆变"><a href="#泛型的协变和逆变" class="headerlink" title="泛型的协变和逆变"></a>泛型的协变和逆变</h2><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> Animal    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 协变和逆变</span>    <span class="token comment" spellcheck="true">// 直接声明Animal类</span>    Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 直接声明Cat类</span>    Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明子类对象指向父类</span>    Animal animal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明Animal类的集合</span>    List<span class="token operator">&lt;</span>Animal<span class="token operator">></span> listAnimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明Cat类的集合</span>    List<span class="token operator">&lt;</span>Cat<span class="token operator">></span> listCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span> <span class="token punctuation">}</span></code></pre><p>那么问题来了：下面的一句代码是不是正确的呢？</p><pre class=" language-csharp"><code class="language-csharp"><span class="token number">1</span> List<span class="token operator">&lt;</span>Animal<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可能有人会认为是正确的：因为一只Cat属于Animal，那么一群Cat也应该属于Animal啊。但是实际上这样声明是错误的：因为List和List之间没有父子关系。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202005/1576550-20200531140020139-435436594.png"><img src="https://img2020.cnblogs.com/blog/1576550/202005/1576550-20200531140020139-435436594.png" alt="image-2020053023015097"></a></p><p>这时就可以用到协变和逆变了。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token number">1</span> <span class="token comment" spellcheck="true">// 协变</span><span class="token number">2</span> IEnumerable<span class="token operator">&lt;</span>Animal<span class="token operator">></span> List1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span> IEnumerable<span class="token operator">&lt;</span>Animal<span class="token operator">></span> List2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>F12查看定义：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202005/1576550-20200531140124293-592379000.png"><img src="https://img2020.cnblogs.com/blog/1576550/202005/1576550-20200531140124293-592379000.png" alt="img"></a></p><p>可以看到，在泛型接口的T前面有一个out关键字修饰，而且T只能是返回值类型，不能作为参数类型，这就是协变。使用了协变以后，左边声明的是基类，右边可以声明基类或者基类的子类。</p><p>协变除了可以用在接口上面，也可以用在委托上面：</p><pre class=" language-csharp"><code class="language-csharp"> Func<span class="token operator">&lt;</span>Animal<span class="token operator">></span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func</span><span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>除了使用.NET框架定义好的以为，我们还可以自定义协变，例如：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// out 协变 只能是返回结果</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICustomerListOut</span><span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">></span>    <span class="token punctuation">{</span>        T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerListOut</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> ICustomerListOut<span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用自定义的协变：</p><pre class=" language-csharp"><code class="language-csharp"> <span class="token comment" spellcheck="true">// 使用自定义协变</span> ICustomerListOut<span class="token operator">&lt;</span>Animal<span class="token operator">></span> customerList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListOut</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ICustomerListOut<span class="token operator">&lt;</span>Animal<span class="token operator">></span> customerList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListOut</span><span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在来看看逆变。</p><p>在泛型接口的T前面有一个In关键字修饰，而且T只能方法参数，不能作为返回值类型，这就是逆变。请看下面的自定义逆变：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 逆变 只能是方法参数</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICustomerListIn</span><span class="token operator">&lt;</span><span class="token keyword">in</span> T<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerListIn</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> ICustomerListIn<span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用自定义逆变：</p><pre class=" language-csharp"><code class="language-csharp"> <span class="token comment" spellcheck="true">// 使用自定义逆变</span> ICustomerListIn<span class="token operator">&lt;</span>Cat<span class="token operator">></span> customerListCat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListIn</span><span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ICustomerListIn<span class="token operator">&lt;</span>Cat<span class="token operator">></span> customerListCat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListIn</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>协变和逆变也可以同时使用，看看下面的例子：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// inT 逆变</span>    <span class="token comment" spellcheck="true">/// outT 协变</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="inT">&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="outT">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyList</span><span class="token operator">&lt;</span><span class="token keyword">in</span> inT<span class="token punctuation">,</span> <span class="token keyword">out</span> outT<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>inT t<span class="token punctuation">)</span><span class="token punctuation">;</span>        outT <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outT <span class="token function">Do</span><span class="token punctuation">(</span>inT t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">:</span> IMyList<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> T2 <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> T2 <span class="token function">Do</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用：</p><pre class=" language-csharp"><code class="language-csharp"> IMyList<span class="token operator">&lt;</span>Cat<span class="token punctuation">,</span> Animal<span class="token operator">></span> myList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>Cat<span class="token punctuation">,</span> Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> IMyList<span class="token operator">&lt;</span>Cat<span class="token punctuation">,</span> Animal<span class="token operator">></span> myList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>Cat<span class="token punctuation">,</span> Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//协变</span> IMyList<span class="token operator">&lt;</span>Cat<span class="token punctuation">,</span> Animal<span class="token operator">></span> myList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>Animal<span class="token punctuation">,</span> Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//逆变</span> IMyList<span class="token operator">&lt;</span>Cat<span class="token punctuation">,</span> Animal<span class="token operator">></span> myList4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>Animal<span class="token punctuation">,</span> Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//逆变+协变</span></code></pre><p>有关可变性的注意事项</p><ul><li>变化只适用于引用类型，因为不能直接从值类型派生其他类型</li><li>显示变化使用in和out关键字只适用于委托和接口，不适用于类、结构和方法</li><li>不包括in和out关键字的委托和接口类型参数叫做<strong>不变</strong></li></ul><h2 id="泛型缓存"><a href="#泛型缓存" class="headerlink" title="泛型缓存"></a>泛型缓存</h2><p>在前面我们学习过，类中的静态类型无论实例化多少次，在内存中只会有一个。静态构造函数只会执行一次。在泛型类中，T类型不同，每个不同的T类型，都会产生一个不同的副本，所以会产生不同的静态属性、不同的静态构造函数，请看下面的例子：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericCache</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token function">GenericCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is GenericCache 静态构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _TypeTime <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}_{1}"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss.fff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">string</span> _TypeTime <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> _TypeTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericCacheTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span>DateTime<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span>GenericCacheTest<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Main()方法里面调用：</p><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 泛型缓存</span>    GenericCacheTest<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span> <span class="token punctuation">}</span></code></pre><p>结果：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202005/1576550-20200531140057502-1208484680.png"><img src="https://img2020.cnblogs.com/blog/1576550/202005/1576550-20200531140057502-1208484680.png" alt="20200530232600809"></a></p><p>从上面的截图中可以看出，泛型会为不同的类型都创建一个副本，所以静态构造函数会执行5次。 而且每次静态属性的值都是一样的。利用泛型的这一特性，可以实现缓存。</p><p>注意：只能为不同的类型缓存一次。泛型缓存比字典缓存效率高。泛型缓存不能主动释放。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h2 id="1-泛型代码中的-default-关键字"><a href="#1-泛型代码中的-default-关键字" class="headerlink" title="1.泛型代码中的 default 关键字"></a>1.<strong>泛型代码中的</strong> <strong>default</strong> <strong>关键字</strong></h2><p>在泛型类和泛型方法中会出现的一个问题是，如何把缺省值赋给参数化类型，此时无法预先知道以下两点：</p><ul><li>T将是值类型还是引用类型</li><li>如果T是值类型，那么T将是数值还是结构</li></ul><p>对于一个参数化类型T的变量t，仅当T是引用类型时，t = null语句才是合法的； t = 0只对数值的有效，而对结构则不行。这个问题的解决办法是用default关键字，它对引用类型返回空，对值类型的数值型返回零。而对于结构，它将返回结构每个成员，并根据成员是值类型还是引用类型，返回零或空。下面GenericList类的例子显示了如何使用default关键字。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 泛型代码默认关键字default</span>        <span class="token comment" spellcheck="true">// 使用非空的整数列表进行测试.</span>        GenericList<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> gll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericList</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gll<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gll<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gll<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> intVal <span class="token operator">=</span> gll<span class="token punctuation">.</span><span class="token function">GetLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下面一行显示5.</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>intVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用一个空的整数列表进行测试.</span>        GenericList<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> gll2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericList</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intVal <span class="token operator">=</span> gll2<span class="token punctuation">.</span><span class="token function">GetLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下面一行显示0.</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>intVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用非空字符串列表进行测试.</span>        GenericList<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> gll3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericList</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gll3<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gll3<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">string</span> sVal <span class="token operator">=</span> gll3<span class="token punctuation">.</span><span class="token function">GetLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下面一行显示five.</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用一个空字符串列表进行测试.</span>        GenericList<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> gll4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericList</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sVal <span class="token operator">=</span> gll4<span class="token punctuation">.</span><span class="token function">GetLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下面一行显示一条空白行.</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericList</span><span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 每个节点都有一个指向列表中的下一个节点的引用.</span>            <span class="token keyword">public</span> Node Next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 每个节点都有一个T类型的值.</span>            <span class="token keyword">public</span> T Data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这个列表最初是空的.</span>        <span class="token keyword">private</span> Node head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在列表开始的时候添加一个节点，用t作为它的数据值.</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddNode</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token punctuation">.</span>Next <span class="token operator">=</span> head<span class="token punctuation">;</span>            newNode<span class="token punctuation">.</span>Data <span class="token operator">=</span> t<span class="token punctuation">;</span>            head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 下面的方法返回存储在最后一个节点中的数据值列表. 如果列表是空的, 返回类型T的默认值.</span>        <span class="token keyword">public</span> T <span class="token function">GetLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 临时变量的值作为方法的值返回. </span>            <span class="token comment" spellcheck="true">// 下面的声明初始化了临时的温度 </span>            <span class="token comment" spellcheck="true">// 类型T的默认值. 如果该列表为空返回默认值.</span>            T temp <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            Node current <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> current<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span>Next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="2-泛型集合"><a href="#2-泛型集合" class="headerlink" title="2.泛型集合"></a>2.泛型集合</h2><p>通常情况下，建议您使用泛型集合，因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定的成员。下面的泛型类型对应于现有的集合类型：</p><p>1、<a href="http://msdn.microsoft.com/zh-cn/library/6sh2ey19(VS.80).aspx">List</a> 是对应于 <a href="http://msdn.microsoft.com/zh-cn/library/system.collections.arraylist(VS.80).aspx">ArrayList</a> 的泛型类。<br>2、<a href="http://msdn.microsoft.com/zh-cn/library/xfhwa508(VS.80).aspx">Dictionary</a> 是对应于 <a href="http://msdn.microsoft.com/zh-cn/library/system.collections.hashtable(VS.80).aspx">Hashtable</a> 的泛型类。<br>3、<a href="http://msdn.microsoft.com/zh-cn/library/ms132397(VS.80).aspx">Collection</a> 是对应于 <a href="http://msdn.microsoft.com/zh-cn/library/system.collections.collectionbase(VS.80).aspx">CollectionBase</a> 的泛型类。<br>4、<a href="http://msdn.microsoft.com/zh-cn/library/ms132474(VS.80).aspx">ReadOnlyCollection</a> 是对应于 <a href="http://msdn.microsoft.com/zh-cn/library/system.collections.readonlycollectionbase(VS.80).aspx">ReadOnlyCollectionBase</a> 的泛型类。<br>5、<a href="http://msdn.microsoft.com/zh-cn/library/7977ey2c(VS.80).aspx">Queue</a>、<a href="http://msdn.microsoft.com/zh-cn/library/3278tedw(VS.80).aspx">Stack</a> 和 <a href="http://msdn.microsoft.com/zh-cn/library/ms132319(VS.80).aspx">SortedList</a> 泛型类分别对应于与其同名的非泛型类。<br>6、<a href="http://msdn.microsoft.com/zh-cn/library/he2s3bh7(VS.80).aspx">LinkedList</a> 是一个通用链接列表，它提供运算复杂度为 O(1) 的插入和移除操作。<br>7、<a href="http://msdn.microsoft.com/zh-cn/library/f7fta44c(VS.80).aspx">SortedDictionary</a> 是一个排序的字典，其插入和检索操作的运算复杂度为 O(log n)，这使得它成为 <strong>SortedList</strong> 的十分有用的替代类型。<br>8、<a href="http://msdn.microsoft.com/zh-cn/library/ms132438(VS.80).aspx">KeyedCollection</a> 是介于列表和字典之间的混合类型，它提供了一种存储包含自己键的对象的方法。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>作为一个开发人员，当我们程序代码有相同的逻辑，有可能是方法、接口、类或者委托，只是某些参数类型不同，我们希望代码可以通用、复用，甚至是说为了偷懒，也可以说是在不确定类型的情况下，就应该考虑用泛型的思维去实现。</li><li>在非泛型编程中，虽然所有的东西都可以作为Object传递，但是在传递的过程中免不了要进行类型转换。而类型转换在运行时是不安全的。使用泛型编程将可以减少不必要的类型转换，从而提高安全性。不仅是值类型，引用类型也存在这样的问题，因此有必要的尽量的去使用泛型集合。</li><li>在非泛型编程中，将简单类型作为Object传递时会引起装箱和拆箱的操作，这两个过程都是具有很大开销的。使用泛型编程就不必进行装箱和拆箱操作了。</li></ol><p>参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/">文档 </a>《C#图解教程》</p><p>注：搜索关注公众号【DotNet技术谷】–回复【C#图解】，可获取 <a href="https://www.ituring.com.cn/book/1108">C#图解教程</a>文件</p>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 使用Swagger导出文档 (补充篇)</title>
      <link href="2020/04/12/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-dao-chu-wen-dang-bu-chong-pian/"/>
      <url>2020/04/12/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-dao-chu-wen-dang-bu-chong-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-使用Swagger导出文档-补充篇"><a href="#基于-NetCore3-1系列-——-使用Swagger导出文档-补充篇" class="headerlink" title="基于.NetCore3.1系列 —— 使用Swagger导出文档 (补充篇)"></a>基于.NetCore3.1系列 —— 使用Swagger导出文档 (补充篇)</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 在上一篇<a href="https://www.cnblogs.com/i3yuan/p/12633768.html">导出文档</a>番外篇中，我们已经熟悉了怎样根据json数据导出word的文档，生成接口文档，而在这一篇，将对上一篇进行完善补充，增加多种导出方式，实现更加完善的导出功能。</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><ol><li><p>获取Swagger接口文档的Json文件</p></li><li><p>解析Json文件数据填充到Html的表格中</p></li><li><p>根据生成的html转work文档</p></li></ol><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p> <a href="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200411224231279-1964454736.png"><img src="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200411224231279-1964454736.png" alt="img"></a></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="根据生成的html转work文档"><a href="#根据生成的html转work文档" class="headerlink" title="根据生成的html转work文档"></a>根据生成的html转work文档</h2><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 静态页面转文件</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="html">静态页面html&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="type">文件类型&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="contenttype">上下文类型&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> Stream <span class="token function">SwaggerConversHtml</span><span class="token punctuation">(</span><span class="token keyword">string</span> html<span class="token punctuation">,</span> <span class="token keyword">string</span> type<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">string</span> contenttype<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> fileName <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//文件存放路径</span>            <span class="token keyword">string</span> webRootPath <span class="token operator">=</span> _hostingEnvironment<span class="token punctuation">.</span>WebRootPath<span class="token punctuation">;</span>            <span class="token keyword">string</span> path <span class="token operator">=</span> webRootPath <span class="token operator">+</span> <span class="token string">@"\Files\TempFiles\";            var addrUrl = path + $"</span><span class="token punctuation">{</span>fileName<span class="token punctuation">}</span>"<span class="token punctuation">;</span>            FileStream fileStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileExtensionContentTypeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            contenttype <span class="token operator">=</span> provider<span class="token punctuation">.</span>Mappings<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">var</span> data <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> stream <span class="token operator">=</span> ByteHelper<span class="token punctuation">.</span><span class="token function">BytesToStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建Document实例</span>                Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//加载HTML文档</span>                document<span class="token punctuation">.</span><span class="token function">LoadFromStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>Html<span class="token punctuation">,</span> XHTMLValidationType<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">".docx"</span><span class="token punctuation">:</span>                        document<span class="token punctuation">.</span><span class="token function">SaveToFile</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>Docx<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">".pdf"</span><span class="token punctuation">:</span>                        document<span class="token punctuation">.</span><span class="token function">SaveToFile</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>PDF<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">".html"</span><span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true">//document.SaveToFile(addrUrl, FileFormat.Html);</span>                        <span class="token comment" spellcheck="true">//当然了，html 如果不用spire，也可以直接生成</span>                        FileStream fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Append<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//html直接写入不用spire.doc</span>                        StreamWriter sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamWriter</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建写入流</span>                        sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写入Hello World</span>                        sw<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭文件</span>                        fs<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">".xml"</span><span class="token punctuation">:</span>                        document<span class="token punctuation">.</span><span class="token function">SaveToFile</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>Xml<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">".svg"</span><span class="token punctuation">:</span>                        document<span class="token punctuation">.</span><span class="token function">SaveToFile</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>SVG<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true">//保存为Word</span>                        document<span class="token punctuation">.</span><span class="token function">SaveToFile</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>Docx<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                document<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fileStream <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> filedata <span class="token operator">=</span> ByteHelper<span class="token punctuation">.</span><span class="token function">StreamToBytes</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> outdata <span class="token operator">=</span> ByteHelper<span class="token punctuation">.</span><span class="token function">BytesToStream</span><span class="token punctuation">(</span>filedata<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> outdata<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    fileStream<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>                    File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删掉文件</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="增加导出按钮"><a href="#增加导出按钮" class="headerlink" title="增加导出按钮"></a>增加导出按钮</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//加载自定义导出按钮</span>function <span class="token function">LoadExportApiWordBtn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">(</span><span class="token string">".information-container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $<span class="token punctuation">(</span><span class="token string">".topbar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btnExport <span class="token operator">=</span> <span class="token string">"&lt;div class='selectBox' style='position: absolute;margin: 0;padding: 0;margin-left: 1432px;top: 2.5px;'>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;span>&lt;a href='javascript:void(0);'>导出离线文档&lt;/a>&lt;/span>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;div class='drop'>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;ul style='margin: 0;padding: 0;'>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;li>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;a href='javascript:void(0);' onclick='ExportApiWord(1)'>导出 Word&lt;/a>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/li>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;li>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;a href='javascript:void(0);' onclick='ExportApiWord(2)'>导出 PDF&lt;/a>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/li>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;li>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;a href='javascript:void(0);' onclick='ExportApiWord(3)'>导出 Html&lt;/a>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/li >"</span> <span class="token operator">+</span>        <span class="token string">"&lt;li>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;a href='javascript:void(0);' onclick='ExportApiWord(4)'>导出 Xml&lt;/a>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/li >"</span> <span class="token operator">+</span>        <span class="token string">"&lt;li>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;a href='javascript:void(0);' onclick='ExportApiWord(5)'>导出 Svg&lt;/a>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/li >"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/ul >"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/div >"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/div >"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//information-container这个元素是swagger后期动态渲染出来的，所有这里要加个循环判断。</span>    <span class="token comment" spellcheck="true">//第一次进来如果有这个class直接加载按钮退出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">"information-container"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        $<span class="token punctuation">(</span><span class="token string">".information-container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>btnExport<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//没有元素等待元素出现在加载按钮</span>    timerLoadExportBtn <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">"information-container"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $<span class="token punctuation">(</span><span class="token string">".information-container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>btnExport<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"load ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timerLoadExportBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">788</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200411225719851-813947629.png"><img src="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200411225719851-813947629.png" alt="img"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>通过Swagger 导出各类的说明文档，可以根据自己的html模板生成各式的word样式文档说明。</p></li><li><p>注：搜索关注公众号【DotNet技术谷】–回复【文档生成器】，可获取本篇Swagger生成文档文件。</p></li><li><p>参考资料：<a href="https://www.e-iceblue.cn/spiredoc/spire-doc-for-net-program-guide-content.html">Spire.Doc</a>文件 、<a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore">Swagger开源地址</a></p></li><li><p><a href="https://files-cdn.cnblogs.com/files/i3yuan/XUnit.Core%E7%95%AA%E5%A4%96%E7%AF%87.rar">源码下载</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger框架 </tag>
            
            <tag> .net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 使用Swagger导出文档 (番外篇)</title>
      <link href="2020/04/05/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-dao-chu-wen-dang-fan-wai-pian/"/>
      <url>2020/04/05/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-dao-chu-wen-dang-fan-wai-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-使用Swagger导出文档-番外篇"><a href="#基于-NetCore3-1系列-——-使用Swagger导出文档-番外篇" class="headerlink" title="基于.NetCore3.1系列 —— 使用Swagger导出文档 (番外篇)"></a>基于.NetCore3.1系列 —— 使用Swagger导出文档 (番外篇)</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 回顾之前的两篇<a href="https://www.cnblogs.com/i3yuan/p/12542291.html">Swagger做Api接口文档</a>，我们大体上学会了如何在net core3.1的项目基础上，搭建一套自动生产API接口说明文档的框架。</p><p> 本来在Swagger的基础上，前后端开发人员在开发生产期间，可以借此进行更加便捷的沟通交流。可是总有些时候，遇到一些难缠的，又不讲道理，偏偏觉得将Swagger文档地址丢给客户会不够正式！死活要一份word文档。</p><p>​                 <a href="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200405173943699-442289628.gif"><img src="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200405173943699-442289628.gif" alt="img"></a></p><p> 可是这个时候，如果接口数量上百个，甚至更多，一个一个手动输入word，那将是一笔耗时的工作。但却有什么办法可以解决呢？ </p><p> 对了，利用Swagge生成的Json文件转换为word文档不就可以了吗？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li><p>获取Swagger接口文档的Json文件</p></li><li><p>解析Json文件数据填充到Html的表格中</p></li><li><p>根据生成的html转work文档</p></li></ol><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="文档模板"><a href="#文档模板" class="headerlink" title="文档模板"></a>文档模板</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>URL</td><td>/api/Movie/AddMovie</td><td></td><td></td></tr><tr><td>请求方式</td><td>Post</td><td></td><td></td></tr><tr><td>参数名</td><td>参数类型</td><td>是否必填</td><td>说明</td></tr><tr><td>id</td><td>Query</td><td>False</td><td>影视ID</td></tr><tr><td>Name</td><td>Query</td><td>False</td><td>电影名称</td></tr><tr><td>Type</td><td>Query</td><td>False</td><td>电影类型</td></tr><tr><td>状态码</td><td>说明</td><td></td><td></td></tr><tr><td>200</td><td>Success</td><td></td><td></td></tr><tr><td>示例</td><td></td><td></td><td></td></tr><tr><td>请求参数</td><td></td><td></td><td></td></tr><tr><td>返回值</td><td></td><td></td><td></td></tr></tbody></table><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="一、根据Swagger版本获取Json数据"><a href="#一、根据Swagger版本获取Json数据" class="headerlink" title="一、根据Swagger版本获取Json数据"></a>一、根据Swagger版本获取Json数据</h2><p>1.通过Swagger源码文件可以看到</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200404212601040-20298144.png"><img src="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200404212601040-20298144.png" alt="img"></a></p><p> 可以拿到swagger生成的文档数据，所以我们可以新建一个控制器SwaggerController.cs,</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">private</span> <span class="token keyword">readonly</span> SwaggerGenerator _swaggerGenerator<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SwaggerController</span><span class="token punctuation">(</span>SwaggerGenerator swaggerGenerator<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _swaggerGenerator <span class="token operator">=</span> swaggerGenerator<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 导出文件</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="type">文件类型&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="version">版本号V1&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>        <span class="token keyword">public</span> FileResult <span class="token function">ExportWord</span><span class="token punctuation">(</span><span class="token keyword">string</span> type<span class="token punctuation">,</span><span class="token keyword">string</span> version<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> contenttype <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>            <span class="token keyword">var</span> model <span class="token operator">=</span> _swaggerGenerator<span class="token punctuation">.</span><span class="token function">GetSwagger</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1. 根据指定版本获取指定版本的json对象。</span>        <span class="token punctuation">}</span></code></pre><ol start="2"><li>在Startup.cs文件中，利用net core的ioc容器，注入SwaggerGenerator实例化，这样在后面的调用中可以直接使用这个方法</li></ol><pre class=" language-csharp"><code class="language-csharp">            services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>SwaggerGenerator<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注入SwaggerGenerator,后面可以直接使用这个方法</span></code></pre><h2 id="二、文件数据填充到Html的表格中"><a href="#二、文件数据填充到Html的表格中" class="headerlink" title="二、文件数据填充到Html的表格中"></a>二、文件数据填充到Html的表格中</h2><p>根据上面获取的model文件数据，这个时候，我们利用Razor文件，结合html的table模板，将数据遍历填充到页面中，生成完整的页面</p><p>Html模板</p><pre class=" language-csharp"><code class="language-csharp">@<span class="token keyword">using</span> Swashbuckle<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Swagger<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Swagger API文档代码文件<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">'text/css'</span><span class="token operator">></span>        table<span class="token punctuation">,</span> table td<span class="token punctuation">,</span> table th <span class="token punctuation">{</span>            border<span class="token punctuation">:</span> 1px solid #<span class="token number">000000</span><span class="token punctuation">;</span>            border<span class="token operator">-</span>collapse<span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        table <span class="token punctuation">{</span>            table<span class="token operator">-</span>layout<span class="token punctuation">:</span> <span class="token keyword">fixed</span><span class="token punctuation">;</span>            word<span class="token operator">-</span><span class="token keyword">break</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token operator">-</span>all<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tr <span class="token punctuation">{</span>            height<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">'width:1000px; margin: 0 auto'</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>i<span class="token operator">></span>Word接口文档<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>h1 align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>@Model<span class="token punctuation">.</span>Info<span class="token punctuation">.</span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h1 align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>接口文档 @Model<span class="token punctuation">.</span>Info<span class="token punctuation">.</span>Version<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h4<span class="token operator">></span>联系方式<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>作者：@Model<span class="token punctuation">.</span>Info<span class="token punctuation">.</span>Contact<span class="token punctuation">.</span>Name<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:@Model.Info.Contact.Email"</span> rel<span class="token operator">=</span><span class="token string">"noopener noreferrer"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link"</span><span class="token operator">></span>Send email to Xunit<span class="token punctuation">.</span>Core<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"@Model.Info.Contact.Url"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> rel<span class="token operator">=</span><span class="token string">"noopener noreferrer"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link"</span><span class="token operator">></span>@Model<span class="token punctuation">.</span>Info<span class="token punctuation">.</span>Contact<span class="token punctuation">.</span>Name <span class="token operator">-</span> Website<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>接口描述<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>@Model<span class="token punctuation">.</span>Info<span class="token punctuation">.</span>Description<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">'1'</span> cellspacing<span class="token operator">=</span><span class="token string">'0'</span> cellpadding<span class="token operator">=</span><span class="token string">'0'</span> style<span class="token operator">=</span><span class="token string">"table-layout: fixed; word-break: break-all;border: 1px solid #000000;border-collapse: collapse;"</span> width<span class="token operator">=</span><span class="token string">'100%'</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> style<span class="token operator">=</span><span class="token string">"background-color: rgb(84, 127, 177);"</span><span class="token operator">></span>说明<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> style<span class="token operator">=</span><span class="token string">"background-color: rgb(84, 127, 177);"</span><span class="token operator">></span>类型<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>        @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> Model<span class="token punctuation">.</span>Paths<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Operations <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> operation <span class="token keyword">in</span> item<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Operations<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token operator">&lt;</span>h3<span class="token operator">></span>@operation<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Summary<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>                    <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">'1'</span> cellspacing<span class="token operator">=</span><span class="token string">'0'</span> cellpadding<span class="token operator">=</span><span class="token string">'0'</span> width<span class="token operator">=</span><span class="token string">'100%'</span> style<span class="token operator">=</span><span class="token string">"table-layout: fixed; word-break: break-all;border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"background-color: rgb(84, 127, 177);"</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">'5'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                        <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>URL<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                            <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">'4'</span><span class="token operator">></span>@item<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                        <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>请求方式<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                            <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">'4'</span><span class="token operator">></span>                                @operation<span class="token punctuation">.</span>Key                            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                        @<span class="token keyword">if</span> <span class="token punctuation">(</span>operation<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Parameters <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> operation<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"background-color: rgb(84, 127, 177);"</span> align<span class="token operator">=</span><span class="token string">'center'</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>参数名<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>参数类型<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>是否必填<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span> colspan<span class="token operator">=</span><span class="token string">'2'</span><span class="token operator">></span>说明<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                            @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> param <span class="token keyword">in</span> operation<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Parameters<span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token operator">&lt;</span>tr align<span class="token operator">=</span><span class="token string">'center'</span> style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>@param<span class="token punctuation">.</span>Name<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>@param<span class="token punctuation">.</span>In<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>@param<span class="token punctuation">.</span>Required<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span> colspan<span class="token operator">=</span><span class="token string">'2'</span><span class="token operator">></span>@param<span class="token punctuation">.</span>Description<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"background-color: rgb(84, 127, 177);"</span> align<span class="token operator">=</span><span class="token string">'center'</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>状态码<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span> colspan<span class="token operator">=</span><span class="token string">'4'</span><span class="token operator">></span>说明<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                        @<span class="token keyword">if</span> <span class="token punctuation">(</span>operation<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Responses <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> operation<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Responses<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> response <span class="token keyword">in</span> operation<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Responses<span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token operator">&lt;</span>tr align<span class="token operator">=</span><span class="token string">'center'</span> style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>@response<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span> colspan<span class="token operator">=</span><span class="token string">'4'</span><span class="token operator">></span>@response<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Description<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"background-color: rgb(84, 127, 177);"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span> colspan<span class="token operator">=</span><span class="token string">'5'</span><span class="token operator">></span>示例<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                        <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"height: 40px;"</span> style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"background-color: rgb(84, 127, 177);"</span><span class="token operator">></span>请求参数<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span> colspan<span class="token operator">=</span><span class="token string">'4'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                        <span class="token operator">&lt;</span>tr style<span class="token operator">=</span><span class="token string">"height: 40px;"</span> style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"background-color: rgb(84, 127, 177);"</span><span class="token operator">></span>返回值<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                            <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"border: 1px solid #000000;border-collapse: collapse;"</span> colspan<span class="token operator">=</span><span class="token string">'4'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>                    <span class="token operator">&lt;</span>br<span class="token operator">></span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>将数据遍历到静态页面中，</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 将数据遍历静态页面中</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="templatePath">静态页面地址&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="model">获取到的文件数据&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">GeneritorSwaggerHtml</span><span class="token punctuation">(</span><span class="token keyword">string</span> templatePath<span class="token punctuation">,</span> OpenApiDocument model<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> template <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> Engine<span class="token punctuation">.</span>Razor<span class="token punctuation">.</span><span class="token function">RunCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token string">"i3yuan"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>OpenApiDocument<span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="三、根据生成的html转work文档"><a href="#三、根据生成的html转work文档" class="headerlink" title="三、根据生成的html转work文档"></a>三、根据生成的html转work文档</h2><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 静态页面转文件</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="html">静态页面html&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="type">文件类型&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="contenttype">上下文类型&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> Stream <span class="token function">SwaggerConversHtml</span><span class="token punctuation">(</span><span class="token keyword">string</span> html<span class="token punctuation">,</span> <span class="token keyword">string</span> type<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">string</span> contenttype<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> fileName <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//文件存放路径</span>            <span class="token keyword">string</span> webRootPath <span class="token operator">=</span> _hostingEnvironment<span class="token punctuation">.</span>WebRootPath<span class="token punctuation">;</span>            <span class="token keyword">string</span> path <span class="token operator">=</span> webRootPath <span class="token operator">+</span> <span class="token string">@"\Files\TempFiles\";            var addrUrl = path + $"</span><span class="token punctuation">{</span>fileName<span class="token punctuation">}</span>"<span class="token punctuation">;</span>            FileStream fileStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileExtensionContentTypeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            contenttype <span class="token operator">=</span> provider<span class="token punctuation">.</span>Mappings<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">var</span> data <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> stream <span class="token operator">=</span> ByteHelper<span class="token punctuation">.</span><span class="token function">BytesToStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建Document实例</span>                Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//加载HTML文档</span>                document<span class="token punctuation">.</span><span class="token function">LoadFromStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>Html<span class="token punctuation">,</span> XHTMLValidationType<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//保存为Word</span>                document<span class="token punctuation">.</span><span class="token function">SaveToFile</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>Docx<span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fileStream <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> filedata <span class="token operator">=</span> ByteHelper<span class="token punctuation">.</span><span class="token function">StreamToBytes</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> outdata <span class="token operator">=</span> ByteHelper<span class="token punctuation">.</span><span class="token function">BytesToStream</span><span class="token punctuation">(</span>filedata<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> outdata<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    fileStream<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>                    File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>addrUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删掉文件</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteHelper</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">StreamToBytes</span><span class="token punctuation">(</span>Stream stream<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>stream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            stream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置当前流的位置为流的开始 </span>            stream<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// 将 byte[] 转成 Stream</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Stream <span class="token function">BytesToStream</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Stream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> stream<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="四、最终效果"><a href="#四、最终效果" class="headerlink" title="四、最终效果"></a>四、最终效果</h2><p>将html转换为word后，我们就可以看到带有 .doc 的效果了！差不多是如下效果</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200404220404745-683697970.png"><img src="https://img2020.cnblogs.com/blog/1576550/202004/1576550-20200404220404745-683697970.png" alt="img"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>到这基本就结束了，通过简易的几个接口的方式，展示了如何通过将Swagger接口文档生成word文档。可以根据自己的html模板生成各式的word样式文档说明。</p></li><li><p>写这篇番外主要是因为之前介绍了关于如何使用Swagger生成在线文档，但实际工作中，可能也会遇到这种要各种正式word文档的客户，所以在此分享一些想法和思路，同时希望大家不吝指教。</p></li><li><p>后续还会不断修改和完善，可以更多的生成不同的文件类型和按需生成不同版本的接口文档，持续更新。。。</p></li><li><p>注：搜索关注公众号【DotNet技术谷】–回复【文档生成器】，可获取本篇Swagger转换work文件</p></li><li><p>参考资料：<a href="https://www.e-iceblue.cn/spiredoc/spire-doc-for-net-program-guide-content.html">Spire.Doc</a>文件 、<a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore">Swagger开源地址</a></p></li><li><p><a href="https://files-cdn.cnblogs.com/files/i3yuan/XUnit.Core%E7%95%AA%E5%A4%96%E7%AF%87.rar">源码下载</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger框架 </tag>
            
            <tag> .net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 使用Swagger做Api文档 (下篇)</title>
      <link href="2020/03/23/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-zuo-api-wen-dang-xia-pian/"/>
      <url>2020/03/23/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-zuo-api-wen-dang-xia-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-使用Swagger做Api文档-下篇"><a href="#基于-NetCore3-1系列-——-使用Swagger做Api文档-下篇" class="headerlink" title="基于.NetCore3.1系列 —— 使用Swagger做Api文档 (下篇)"></a>基于.NetCore3.1系列 —— 使用Swagger做Api文档 (下篇)</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​     <a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200323150902679-822363605.gif"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200323150902679-822363605.gif" alt="img"></a></p><p> 回顾上一篇文章<a href="https://www.cnblogs.com/i3yuan/p/12539597.html">《使用Swagger做Api文档 》</a>，文中介绍了在.net core 3.1中，利用Swagger轻量级框架，如何引入程序包，配置服务，注册中间件，一步一步的实现，最终实现生产自动生产API接口说明文档。文中结尾也留下了一个让大家思考的问题。在这里，我们重新回顾一下这几个问题</p><ol><li><p>已经有接口了，但如何添加注释呢？</p></li><li><p>作为接口使用者，我们关心的是接口的返回内容和响应类型，那我们如何定义描述响应类型呢？</p></li><li><p>在项目开发中，使用的实体类，又如何在Swagger中展示呢？</p></li><li><p>在部署项目，引用Swagger既有文档又不需要额外部署，但是如何在开发环境中使用，而在生产环境中禁用呢？</p></li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="一、为接口方法添加注释"><a href="#一、为接口方法添加注释" class="headerlink" title="一、为接口方法添加注释"></a>一、为接口方法添加注释</h2><h3 id="1-按照下图所示-连点三次-即可添加文档注释"><a href="#1-按照下图所示-连点三次-即可添加文档注释" class="headerlink" title="1 . 按照下图所示 连点三次 / 即可添加文档注释"></a>1 . 按照下图所示 连点三次 / 即可添加文档注释</h3><p> 如下所示</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321214919971-888590465.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321214919971-888590465.png" alt="img"></a></p><h3 id="2-启用XML-注释"><a href="#2-启用XML-注释" class="headerlink" title="2.启用XML 注释"></a>2.启用XML 注释</h3><p>  右键web <strong>项目名称=&gt;属性=&gt;生成</strong>，勾选“输出”下面的“<strong>xml文档文件</strong>”，系统会默认生成一个,如下图所示</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321215023472-227345681.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321215023472-227345681.png" alt="img"></a></p><h3 id="3-配置服务"><a href="#3-配置服务" class="headerlink" title="3.配置服务"></a>3.配置服务</h3><p> 在之前注册的Swagger服务代码中，添加以下几行代码，引入xml文件</p><pre class=" language-csharp"><code class="language-csharp">                <span class="token keyword">var</span> basePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>Location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）</span>               <span class="token comment" spellcheck="true">//var basePath = AppContext.BaseDirectory;</span>                <span class="token keyword">var</span> xmlPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> <span class="token string">"XUnit.Core.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个就是刚刚配置的xml文件名</span>               <span class="token comment" spellcheck="true">// c.IncludeXmlComments(xmlPath);//默认的第二个参数是false,对方法的注释</span>                 c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个是controller的注释</span></code></pre><p>整体的代码如下：</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">"V1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiInfo</span>                <span class="token punctuation">{</span>                    Version <span class="token operator">=</span> <span class="token string">"V1"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//版本 </span>                    Title <span class="token operator">=</span> $<span class="token string">"XUnit.Core 接口文档-NetCore3.1"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//标题</span>                    Description <span class="token operator">=</span> $<span class="token string">"XUnit.Core Http API v1"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//描述</span>                    Contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiContact</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"艾三元"</span><span class="token punctuation">,</span> Email <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> Url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://i3yuan.cnblogs.com"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                      License <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiLicense</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"艾三元许可证"</span><span class="token punctuation">,</span> Url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://i3yuan.cnblogs.com"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> basePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>Location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）</span>               <span class="token comment" spellcheck="true">//var basePath = AppContext.BaseDirectory;</span>                <span class="token keyword">var</span> xmlPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> <span class="token string">"XUnit.Core.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个就是刚刚配置的xml文件名</span>                c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认的第二个参数是false,对方法的注释</span>                <span class="token comment" spellcheck="true">// c.IncludeXmlComments(xmlPath,true); //这个是controller的注释</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="4-重新编译运行"><a href="#4-重新编译运行" class="headerlink" title="4.重新编译运行"></a>4.重新编译运行</h3><p> 查看效果</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321215356005-1728132958.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321215356005-1728132958.png" alt="img"></a></p><p>注意：如果需要对控制器进行注释说明如下，可以将</p><pre class=" language-csharp"><code class="language-csharp">  c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 这个设置为<span class="token keyword">true</span><span class="token punctuation">,</span>显示效果如下：</code></pre><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321215327183-471435982.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321215327183-471435982.png" alt="img"></a></p><p> <a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321215511622-460914452.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321215511622-460914452.png" alt="img"></a></p><h2 id="二、描述响应类型"><a href="#二、描述响应类型" class="headerlink" title="二、描述响应类型"></a>二、描述响应类型</h2><p> 接口使用者最关心的就是接口的返回内容和相应类型啦。下面展示一下201和400一个简单例子：</p><p> 我们需要在我们的方法上添加：[ProducesResponseType(201)][ProducesResponseType(400)]</p><p> 然后添加相应的状态说明：<response code="201">返回value字符串</response><em>如果id为空</em></p><p> 最终代码应该是这个样子：</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// values带id参数的get</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="id">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;response code="201">返回value字符串&lt;/response></span>        <span class="token comment" spellcheck="true">/// &lt;response code="400">如果id为空&lt;/response>  </span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{id}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token function">ProducesResponseType</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token function">ProducesResponseType</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"value"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>效果如下：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321223801954-1856240498.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321223801954-1856240498.png" alt="img"></a></p><h2 id="三、实体类展示添加注释"><a href="#三、实体类展示添加注释" class="headerlink" title="三、实体类展示添加注释"></a>三、实体类展示添加注释</h2><p> 新建一个Movie的实体类，MovieModel</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 这是电影实体类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieModel</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Id</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 影片名称</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 类型</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Type <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在控制器中引入接口方法</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// post方式提交电影名称</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="movie">&lt;/param></span>        <span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token function">Post</span><span class="token punctuation">(</span>MovieModel movie<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> movie<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>效果如下：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321223721599-471722149.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321223721599-471722149.png" alt="img"></a></p><h2 id="四、在生产环境中禁用"><a href="#四、在生产环境中禁用" class="headerlink" title="四、在生产环境中禁用"></a>四、在生产环境中禁用</h2><p> 可以将Swagger的UI页面配置在Configure的开发环境之中</p><p>放到if(env.IsDevelopment())即可。</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token preprocessor property">#<span class="token directive keyword">region</span> Swagger 只在开发环节中使用</span>                app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    c<span class="token punctuation">.</span><span class="token function">SwaggerEndpoint</span><span class="token punctuation">(</span>$<span class="token string">"/swagger/V1/swagger.json"</span><span class="token punctuation">,</span> $<span class="token string">"XUnit.Core V1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    c<span class="token punctuation">.</span>RoutePrefix <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果是为空 访问路径就为 根域名/index.html,注意localhost:8001/swagger是访问不到的</span>                                                      <span class="token comment" spellcheck="true">//路径配置，设置为空，表示直接在根域名（localhost:8001）访问该文件</span>                                                      <span class="token comment" spellcheck="true">// c.RoutePrefix = "swagger"; // 如果你想换一个路径，直接写名字即可，比如直接写c.RoutePrefix = "swagger"; 则访问路径为 根域名/swagger/index.html</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>            <span class="token punctuation">}</span>            app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="五、隐藏某些接口"><a href="#五、隐藏某些接口" class="headerlink" title="五、隐藏某些接口"></a>五、隐藏某些接口</h2><p> 如果不想显示某些接口，直接在controller 上，或者action 上，增加特性</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token punctuation">[</span><span class="token function">ApiExplorerSettings</span><span class="token punctuation">(</span>IgnoreApi <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321224103676-1176554144.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321224103676-1176554144.png" alt="img"></a></p><h2 id="六、忽视Swagger注释警告"><a href="#六、忽视Swagger注释警告" class="headerlink" title="六、忽视Swagger注释警告"></a>六、忽视Swagger注释警告</h2><p> 启用 XML 注释后会为未记录的公共类型和成员提供调试信息。如果出现很多警告信息 例如，以下消息指示违反警告代码 1591：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321224354816-1051728550.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321224354816-1051728550.png" alt="img"></a></p><p> 原来是swagger把一些 action 方法都通过xml文件配置了，如果你不想每一个方法都这么加注释，可以这么配置，在当前项目进行配置，可以忽略警告，记得在后边加上分号 ;1591</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321224606268-1865510154.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321224606268-1865510154.png" alt="img"></a></p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><p> <strong>在Swagger使用的时候报错，无法看到列表，这里说下如何调试和主要问题：</strong></p><p><strong>1.找不到文件</strong></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321225426441-1005738049.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321225426441-1005738049.png" alt="img"></a></p><p><strong>请在浏览器 =》 F12 ==》 console 控制台 ==》点击错误信息地址</strong></p><p> <a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321225452958-1724261400.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321225452958-1724261400.png" alt="img"></a></p><p>发现 是404 ，说明是找不到指定的文件，可以存在以下情况：</p><p>这是因为接口json文档定义和调用不是一个</p><p>1、定义：</p><p>ConfigureServices 方法中的 services.AddSwaggerGen 注册的一个名字 c.SwaggerDoc(“v1”, </p><p>2、调用：</p><p>Configure 方法中的 app.UseSwaggerUI(c =&gt;  调用 c.SwaggerEndpoint(“/swagger/V1/swagger.json；</p><p>看看两者是否一致</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321225716750-1630526538.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321225716750-1630526538.png" alt="img"></a></p><p> <strong>2. 500错误无法解析</strong></p><p><strong><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321230102063-831015787.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321230102063-831015787.png" alt="img"></a></strong></p><p>直接链接<a href="http://localhost:xxxxx/swagger/v1/swagger.json，就能看到错误了">http://localhost:xxxxx/swagger/v1/swagger.json，就能看到错误了</a></p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321230042974-1290927268.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321230042974-1290927268.png" alt="img"></a></p><p> 这种可以存在以下情况：</p><p>1 . 接口请求的方式不明确： 少了[httpget]、[httpPost] 等，导致无法解析</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321230524825-1343616329.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321230524825-1343616329.png" alt="img"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>通过这一篇的整体学习，我们已经解决了上一篇文章留下的问题，也知道了怎样更好的使用Swagger进行开发接口文档，更加方便快捷的使用</p></li><li><p>从上篇的引用配置启动，到这一篇的升级改造，让接口文档更加通俗易懂。</p></li><li><p>关注公众号可以获取资料</p><p><a href="https://files-cdn.cnblogs.com/files/i3yuan/XUnit.Core.rar">下载源码</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger框架 </tag>
            
            <tag> .net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 使用Swagger做Api文档 (上篇)</title>
      <link href="2020/03/21/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-zuo-api-wen-dang-shang-pian/"/>
      <url>2020/03/21/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-zuo-api-wen-dang-shang-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-使用Swagger做Api文档-上篇"><a href="#基于-NetCore3-1系列-——-使用Swagger做Api文档-上篇" class="headerlink" title="基于.NetCore3.1系列 —— 使用Swagger做Api文档 (上篇)"></a>基于.NetCore3.1系列 —— 使用Swagger做Api文档 (上篇)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 为什么在开发中，接口文档越来越成为前后端开发人员沟通的枢纽呢？</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321180953967-38981577.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321180953967-38981577.png" alt="img"></a></p><p> 随着业务的发张，项目越来越多，而对于支撑整个项目架构体系而言，我们对系统业务的水平拆分，垂直分层，让业务系统更加清晰，从而产生一系统平台和系统，并使用接口进行数据交互。因此可见，业务的不断发展，接口不断增多，很多接口各自寄宿在不同的项目中，如果没有使用api工具进行管理，那么使用和说明将变得非常复杂。所以，接口管理运营应运而生。</p><p> 在过去的开发中，没有API文档管理工具之前，很多的API文档在什么地方写的都有，有在word写的，有在excel写的，也有对应的项目目录下readme.md写的，每个公司都有每个公司的玩法，但是文档规范极其不统一，甚至出现开发接口更新，但文档不更新，最终导致代码和接口不匹配，开发功能出问题。撸码一分钟，对接三小时。这往往是大家最痛苦的。  </p><p>​           <a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321181526115-2016249557.gif"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321181526115-2016249557.gif" alt="img"></a></p><p> 因此，在前后端分离的情况下，怎样让前后端开发人员更容易、更直观、更舒服的方式进行沟通交流。在这里，推荐一款轻量级的项目框架Swagger给大家使用。Swagger就是一款让你更好书写API文档的框架</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="引用Swagger的nuget包"><a href="#引用Swagger的nuget包" class="headerlink" title="引用Swagger的nuget包"></a>引用Swagger的nuget包</h3><p> Swashbuckle.AspNetCore</p><p><strong><em><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321163627506-1938834143.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321163627506-1938834143.png" alt="img"></a></em></strong></p><p> 然后就在项目的Nuget依赖里看到刚刚引入的Swagger</p><p><strong><em><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321163723153-1780552190.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321163723153-1780552190.png" alt="img"></a></em></strong></p><h3 id="服务配置环节"><a href="#服务配置环节" class="headerlink" title="服务配置环节"></a>服务配置环节</h3><p>在Startup.cs页面中：</p><p>编辑 ConfigureServices 类：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span>                           <span class="token punctuation">{</span>                               c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">"V1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiInfo</span>                                            <span class="token punctuation">{</span>                                                Version <span class="token operator">=</span> <span class="token string">"V1"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//版本 </span>                                                Title <span class="token operator">=</span> $<span class="token string">"XUnit.Core 接口文档-NetCore3.1"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//标题</span>                                                Description <span class="token operator">=</span> $<span class="token string">"XUnit.Core Http API v1"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//描述</span>                                                Contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiContact</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"艾三元"</span><span class="token punctuation">,</span> Email <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> Url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://i3yuan.cnblogs.com"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                                                  License <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiLicense</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"艾三元许可证"</span><span class="token punctuation">,</span> Url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://i3yuan.cnblogs.com"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>                                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中的Url地址不能为空。</p><h3 id="中间件启动环节"><a href="#中间件启动环节" class="headerlink" title="中间件启动环节"></a>中间件启动环节</h3><p>编辑Configure类</p><p>注意：路径配置，设置为空，表示直接在根域名（localhost:8001）访问该文件,注意localhost:8001/swagger是访问不到的，去launchSettings.json把launchUrl去掉，如果你想换一个路径，直接写名字即可，比如直接写c.RoutePrefix = “swagger”;</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">SwaggerEndpoint</span><span class="token punctuation">(</span>$<span class="token string">"/swagger/V1/swagger.json"</span><span class="token punctuation">,</span> $<span class="token string">"XUnit.Core V1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>RoutePrefix <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果是为空 访问路径就为 根域名/index.html,注意localhost:8001/swagger是访问不到的</span>        <span class="token comment" spellcheck="true">//路径配置，设置为空，表示直接在根域名（localhost:8001）访问该文件</span>        <span class="token comment" spellcheck="true">// c.RoutePrefix = "swagger"; // 如果你想换一个路径，直接写名字即可，比如直接写c.RoutePrefix = "swagger"; 则访问路径为 根域名/swagger/index.html</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>                     <span class="token punctuation">{</span>                         endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里之后，我们已经完成了对swagger的添加，F5运行之后，</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170149179-524173739.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170149179-524173739.png" alt="img"></a></p><p> 运行项目之后，我们发现官方默认的是 /WeatherForecast地址，所以我们修改成在域名后面输入/index.html，就可以正常访问了。</p><p>如果想修改默认的启动地址，可以在launchSetting.json文件中的launchUrl设置为空，或者删除掉就可以了。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170628366-374910445.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170628366-374910445.png" alt="img"></a></p><p> 这个时候我们再次启动项目，就可以直接访问根目录下的文件了。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170735936-1347232918.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170735936-1347232918.png" alt="img"></a></p><p>如果启动应用，并导航到 <code>http://localhost:/swagger/V1/swagger.json</code>。 生成的描述终结点的文档显示如下json格式。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321172758004-1507633468.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321172758004-1507633468.png" alt="img"></a></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li><p>已经有接口了，但如何添加注释呢？</p></li><li><p>作为接口使用者，我们关心的是接口的返回内容和响应类型，那我们如何定义描述响应类型呢？</p></li><li><p>在项目开发中，使用的实体类，又如何在Swagger中展示呢？</p></li><li><p>在部署项目，引用Swagger既有文档又不需要额外部署，但是如何在开发环境中使用，而在生产环境中禁用呢？</p></li></ol><p>以上的这些内容，会在下一篇讲解Swagger做Api文档做详解。</p><p>好了，今天的使用Swagger做Api文档上篇内容就说到这里了，希望能给大家在使用Core开发项目中使用Swagger生产接口文档带来帮助。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>从过去手写Api文档，到引入Swagger工具自动生产API接口说明文档，这一转换，让更多的接口可以以通俗易懂的方式展现给开发人员。</p></li><li><p>后续会继续介绍Swagger的一些高级用法，希望对大家使用Swagger有所帮助。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger框架 </tag>
            
            <tag> .net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础篇——反射</title>
      <link href="2020/03/15/c-ji-chu-pian-fan-she/"/>
      <url>2020/03/15/c-ji-chu-pian-fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础篇——反射"><a href="#C-基础篇——反射" class="headerlink" title="C#基础篇——反射"></a>C#基础篇——反射</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 在探究地球内部的结构中，如何做到在地球表面不用深入地球内部就可以知道内部的构造呢？其实，向地球发射“地震波”。利用这种方式，可以判断地球放回的情况，大体上，我们也可以断定地球内部的构造了。</p><p> 从这个例子中，通过一个对象的外部去了解对象内部的构造，都是利用了波的反射功能。而利用这种原理，在编程程序时，我们如何也可以实现从对象的外部来了解对象以及程序集内部的结构功能？在.NET中的反射，不仅可以实现外部对内部的了解，也同时可以动态创建出对象并执行其中的方法。</p><p> 反射是.NET中的重要机制，通过反射，可以在运行时获得程序或程序集中每一个类型（包括类、结构、委托、接口和枚举等）的成员和成员的信息。有了反射，即可对每一个类型了如指掌。另外我还可以直接创建对象，即使这个对象的类型在编译时还不知道。 </p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="一、使用的命名空间"><a href="#一、使用的命名空间" class="headerlink" title="一、使用的命名空间"></a>一、使用的命名空间</h3><pre class=" language-csharp"><code class="language-csharp">  System<span class="token punctuation">.</span>Reflection  System<span class="token punctuation">.</span>Type  System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>Assembly</code></pre><h3 id="二、主要的类"><a href="#二、主要的类" class="headerlink" title="二、主要的类"></a>二、主要的类</h3><p>System.Type 类－－通过这个类可以访问任何给定数据类型的信息。<br>        System.Reflection.Assembly类－－它可以用于访问给定程序集的信息，或者把这个程序集加载到程序中。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="一、System-Type类"><a href="#一、System-Type类" class="headerlink" title="一、System.Type类"></a>一、System.Type类</h3><p> System.Type类对反射起着核心的作用。它是一个抽象的基类，Type有与每种数据类型对应的派生类，我们使用这个派生类的对象的方法、字段、属性来查找有关该类型的所有信息。</p><p>表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</p><p>从Type中解析类型信息：</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200315171015677-64898862.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200315171015677-64898862.png" alt="img"></a></p><p> A、判断给定类型的引用的常用方式：</p><ol><li>使用C# typeof运算符</li></ol><pre><code> Type t = typeof(string);</code></pre><ol start="2"><li>使用对象GetType()方法</li></ol><pre><code>  string s = &quot;i3yuan&quot;;  Type t2 = s.GetType();</code></pre><ol start="3"><li>调用静态Type类的静态方法GetType()</li></ol><pre><code>  Type t3 = Type.GetType(&quot;System.String&quot;);</code></pre><p>以上三种方式获取类型Type后，可以应用t来探测string里面的结构</p><pre><code>  foreach (MemberInfo mi in t.GetMembers())  &#123;       Console.WriteLine(&quot;&#123;0&#125;/t&#123;1&#125;&quot;, mi.MemberType, mi.Name);  &#125;</code></pre><p>B、Type类属性：</p><ol><li>命名空间和类型名</li></ol><p>​    Name 数据类型名<br>​    FullName 数据类型的完全限定名(包括命名空间名)<br>​    Namespace 定义数据类型的命名空间名</p><ol start="2"><li>类和委托</li></ol><p>​    Type.IsClass  判断一个类型是否为类或者委托。符合条件的会有普通的类(包括泛型)、抽象类(abstract class)、委托(delegate)</p><ol start="3"><li>是否泛型 </li></ol><p>​    Type.IsGenericType 属性可以判断类或委托是否为泛型类型。</p><p>​    Type.IsGenericTypeDefinition 属性可以判断Type是否是未绑定参数类型的泛型类型。</p><p>​    Type.IsConstructedGenericType 属性判断是否可以此Type创建泛型实例。</p><ol start="4"><li>访问修饰符</li></ol><p>​    Type.IsPublic 判断该类型是否是公有的</p><p>​    Type.IsNotPublic</p><ol start="5"><li>密封类、静态类型、抽象类</li></ol><p>​    Type.IsSealed 判断该类型是否是密封类，密封类不能被继承</p><p>​    IsAbstract 指示该类型是否是抽象类型</p><ol start="6"><li>值类型</li></ol><p>​    Type.IsValueType 判断一个 Type 是否为值类型，简单值类型、结构体、枚举，都符合要求。</p><p>​    Type.IsEnum  判断该类型是否是枚举</p><p>​    Type.IsPrimitive 判断Type是否为基础类型</p><ol start="7"><li>接口</li></ol><p>​    Type.IsInterface  判断该类型是否是接口</p><ol start="8"><li>数组</li></ol><p>​    IsArray  判断该类型是否是数组，<code>GetArrayRank()</code> 获取数组的维数。</p><p>从Type类解析类型成员结构</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200315174806486-1999894455.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200315174806486-1999894455.png" alt="img"></a></p><p>一个类由以下一个或多个成员组成：</p><table><thead><tr><th>成员类型</th><th>说明</th></tr></thead><tbody><tr><td>PropertyInfo</td><td>类型的属性信息</td></tr><tr><td>FieldInfo</td><td>类型的字段信息</td></tr><tr><td>ConstructorInfo</td><td>类型的构造函数信息</td></tr><tr><td>MethodInfo</td><td>类型的方法</td></tr><tr><td>ParameterInfo</td><td>构造函数或方法的参数</td></tr><tr><td>EventInfo</td><td>类型的事件</td></tr></tbody></table><p>C、Type类的方法</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySqlHelper</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">MySqlHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}被构造"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}.Query"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>​    GetConstructor(), GetConstructors()：返回ConstructorInfo类型，用于取得该类的构造函数的信息</p><pre class=" language-csharp"><code class="language-csharp">                    MySqlHelper dBHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySqlHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Type type <span class="token operator">=</span> dBHelper<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ConstructorInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> constructorInfos<span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> constructorInfos<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        ParameterInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterInfos <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">GetParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> info <span class="token keyword">in</span> parameterInfos<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"查看："</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>ParameterType<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span></code></pre><p>​    GetEvent(), GetEvents()：返回EventInfo类型，用于取得该类的事件的信息</p><p>​    GetField(), GetFields()：返回FieldInfo类型，用于取得该类的字段（成员变量）的信息</p><pre class=" language-csharp"><code class="language-csharp">        MySqlHelper nc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySqlHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Type t <span class="token operator">=</span> nc<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FieldInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> fis <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span>FieldInfo fi <span class="token keyword">in</span> fis<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> </code></pre><p>​    GetInterface(), GetInterfaces()：返回InterfaceInfo类型，用于取得该类实现的接口的信息</p><p>​    GetMember(), GetMembers()：返回MemberInfo类型，用于取得该类的所有成员的信息</p><pre class=" language-csharp"><code class="language-csharp">            <span class="token keyword">string</span> n <span class="token operator">=</span> <span class="token string">"i3yuan"</span><span class="token punctuation">;</span>            Type t <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span>MemberInfo mi <span class="token keyword">in</span> t<span class="token punctuation">.</span><span class="token function">GetMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}/t{1}"</span><span class="token punctuation">,</span>mi<span class="token punctuation">.</span>MemberType<span class="token punctuation">,</span>mi<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>​    GetMethod(), GetMethods()：返回MethodInfo类型，用于取得该类的方法的信息</p><pre class=" language-csharp"><code class="language-csharp">        MySqlHelper dBHelper<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySqlHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Type t <span class="token operator">=</span> dBHelper<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MethodInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> mis <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span>MethodInfo mi <span class="token keyword">in</span> mis<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mi<span class="token punctuation">.</span>ReturnType<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>mi<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>​    GetProperty(), GetProperties()：返回PropertyInfo类型，用于取得该类的属性的信息</p><pre class=" language-csharp"><code class="language-csharp">        MySqlHelper dBHelper<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySqlHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Type t <span class="token operator">=</span> dBHelper<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> pis <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span>PropertyInfo pi <span class="token keyword">in</span> pis<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p> 可以调用这些成员，其方式是调用Type的InvokeMember()方法，或者调用MethodInfo, PropertyInfo和其他类的Invoke()方法。 </p><p> 用反射生成对象，并调用属性、方法和字段进行操作 </p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">//获取类型信息</span>        MySqlHelper dbHelper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MySqlHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Type type<span class="token operator">=</span>dbHelper<span class="token punctuation">.</span>GetType        <span class="token comment" spellcheck="true">//创建对象实例化</span>        <span class="token keyword">object</span> DbHelper <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类型转换</span>        IDBHelper iDBHelper <span class="token operator">=</span> <span class="token punctuation">(</span>IDBHelper<span class="token punctuation">)</span>DbHelper<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法调用</span>        iDBHelper<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><h3 id="二、System-Reflection-Assembly类"><a href="#二、System-Reflection-Assembly类" class="headerlink" title="二、System.Reflection.Assembly类"></a>二、System.Reflection.Assembly类</h3><p>  Assembly类可以获得程序集的信息，也可以动态的加载程序集，以及在程序集中查找类型信息，并创建该类型的实例。<em>使用Assembly类可以降低程序集之间的耦合，有利于软件结构的合理化</em></p><ol><li>System.Reflection </li></ol><p>用于访问给定程序集的信息，或者把这个程序集加载到程序中。可以读取并使用metadata</p><p>方法调用过程：</p><ol><li>加载DLL ； 2. 获取类型信息 ；3. 创建对象类型 4. 类型转换 5. 方法调用</li></ol><pre class=" language-csharp"><code class="language-csharp">                    Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Yuan.DB.MySql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dll名称无后缀  从当前目录加载  1 加载dll</span>                    <span class="token comment" spellcheck="true">//完整路径的加载  可以是别的目录   加载不会错，但是如果没有依赖项，使用的时候会错</span>                    Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Yuan.DB.MySql.MySqlHelper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2 获取类型信息</span>                    <span class="token keyword">object</span> oDBHelper <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3 创建对象</span>                    <span class="token comment" spellcheck="true">//oDBHelper.Query();//oDBHelper是objec不能调用，但实际上方法是有的   编译器不认可  </span>                    IDBHelper iDBHelper <span class="token operator">=</span> <span class="token punctuation">(</span>IDBHelper<span class="token punctuation">)</span>oDBHelper<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4 类型转换</span>                    iDBHelper<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5 方法调用</span></code></pre><p>方法二：通过程序集的名称反射</p><pre class=" language-csharp"><code class="language-csharp">                    Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Yuan.DB.MySql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dll名称无后缀  从当前目录加载  1 加载dll</span>                    Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Yuan.DB.MySql.MySqlHelper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2 获取类型信息</span>                    <span class="token keyword">object</span> oDBHelper <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3 创建对象</span>                   MethodInfo mi<span class="token operator">=</span>oDBHelper<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取方法</span>                    mi<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oDBHelper<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5 调用</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>作为一个开发人员，在每天都会应用到反射，使用的时候，会反射当前程序的元数据，将所有的方法，类等信息都全部显示出来，以便开发人员使用，大大的提高了效率</p></li><li><p>同时反射提高了程序的灵活性和拓展性，降低耦合，动态加载，允许控制和实现任何类的对象。</p></li><li><p>当然了，也存在弊端，写起来复杂，也存在性能问题，用于字段和方法接入时要远慢于直接代码。</p><p>参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.type?view=netframework-4.8#code-try-5">文档</a> 和 《C#图解教程》</p><p>注：搜索关注公众号【DotNet技术谷】–回复【C#图解】，可获取 <a href="https://www.ituring.com.cn/book/1108">C#图解教程</a>文件</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ASP.NET Core 3.0快速搭建Razor Pages Web应用</title>
      <link href="2019/12/08/ji-yu-asp.net-core-3.0-kuai-su-da-jian-razor-pages-web-ying-yong/"/>
      <url>2019/12/08/ji-yu-asp.net-core-3.0-kuai-su-da-jian-razor-pages-web-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="基于ASP-NET-Core-3-0快速搭建Razor-Pages-Web应用"><a href="#基于ASP-NET-Core-3-0快速搭建Razor-Pages-Web应用" class="headerlink" title="基于ASP.NET Core 3.0快速搭建Razor Pages Web应用"></a>基于ASP.NET Core 3.0快速搭建Razor Pages Web应用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 虽然说学习新的开发框架是一项巨大的投资，但是作为一个开发人员，不断学习新的技术并快速上手是我们应该掌握的技能，甚至是一个.NET Framework开发人员，学习.NET Core 新框架可以更快速掌握其中的编写，构建，测试，部署和维护应用程序。<a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208140304866-1609168098.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208140304866-1609168098.png" alt="img"></a></p><p>  您现有的.NET Framework应用程序可以在其他操作系统上工作。对于希望扩大类库的受众平台，或者希望在分布式应用程序的其他领域使用相同代码的开发人员来说，这是非常好的选择。</p><p> .NET Core是为了重新启动某些Framework组件而为其他人提供跨平台工作的机会。由于.NET Framework主要以托管（C＃）代码为基础构建，因此这些部分不需要更改代码即可移至.NET Core。依赖于Windows特定组件的库必须被移除或重构以使用跨平台替代方案。这同样适用于您的应用程序。</p><p> 选择学习.NET Core,是因为有强大的多功能性：</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208110612660-797842140.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208110612660-797842140.png" alt="img"></a></p><p>加上微软社区的大量工作，使.Net Core成为市场上具有竞争力的框架，帮助开发人员快速开发具有最佳性能和可扩展性的强大应用程序。</p><p> 在本章，我们将介绍生成 ASP.NET Core Razor Pages Web 应用的基础知识，基于ASP.NET Core应用程序中的Razor视图引擎，快速的搭建一个博主的管理系统应用，并且在后续中，我们可以基于这个模板进行快速开发迭代。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>本文基于以下开发工具和程序包：</p><ol><li>VS2019</li></ol><p>包含 ASP.NET Web开发功能模块</p><ol start="2"><li>NET Core SDK 3.0版本</li></ol><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208113506127-2039699636.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208113506127-2039699636.png" alt="img"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="一、创建新的-ASP-NET-Core-Web-应用程序"><a href="#一、创建新的-ASP-NET-Core-Web-应用程序" class="headerlink" title="一、创建新的 ASP.NET Core Web 应用程序"></a>一、创建新的 ASP.NET Core Web 应用程序</h3><ol><li><p>下一步：</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215401974-180190543.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215401974-180190543.png" alt="img"></a></p></li></ol><p>2.将项目命名为“BlogRazor” 。</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215408621-1961203833.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215408621-1961203833.png" alt="img"></a></p><p> 3.选择ASP.NET Core3.0 , 然后依次选择“Web 应用程序”和“创建”</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215416304-871850141.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215416304-871850141.png" alt="img"></a></p><p> 4.项目初建成功：</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215431071-1012501458.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215431071-1012501458.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207220742135-1948755626.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207220742135-1948755626.png" alt="img"></a></p><h3 id="二、添加模型"><a href="#二、添加模型" class="headerlink" title="二、添加模型"></a>二、添加模型</h3><p>1.添加数据模型</p><p> 创建新文件夹Models,在此文件夹下右键 选择“添加” &gt; “类” ，创建BloggerModel类</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>DataAnnotations<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span><span class="token keyword">namespace</span> BlogRazor<span class="token punctuation">.</span>Models<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloggerModel</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Sign <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token function">DataType</span><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>Date<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">public</span> DateTime RegistDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>添加模型基架</li></ol><p>创建“Pages/Blogger”文件夹——在Blogger文件夹右键 选择添加 新搭建基架的项目</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215439518-2055133274.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215439518-2055133274.png" alt="img"></a></p><ol start="3"><li>在“添加基架”对话框中，选择“使用实体框架生成 Razor Pages (CRUD)”&gt;“添加” 。</li></ol><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215446022-631107579.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215446022-631107579.png" alt="img"></a></p><ol start="4"><li>完成“使用实体框架(CRUD)添加 Razor Pages”对话框 ：</li></ol><ul><li>在“模型类”下拉列表中，选择“BloggerModel (BlogRazor.Models) 。</li><li>在“数据上下文类”行中，选择 +（加号）并将生成的名称从 BlogRazor.Models .BlogRazorContext 更改为 BlogRazor.Data .Data.Context 。 它创建具有正确命名空间的数据库上下文类。</li><li>选择“添加” 。</li></ul><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215452052-355131963.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215452052-355131963.png" alt="img"></a></p><ol start="5"><li>开始创建文件，在搭建基架时，会创建并更新以下文件</li></ol><ul><li><em>Pages/Blogger</em>：“创建”、“删除”、“详细信息”、“编辑”和“索引”。</li><li>Data/BlogRazorContext.cs</li></ul><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207221045491-828355558.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207221045491-828355558.png" alt="img"></a></p><ol start="6"><li>数据初始迁移</li></ol><p>通过程序包管理器控制台 (PMC) ：</p><pre class=" language-csharp"><code class="language-csharp">Add<span class="token operator">-</span>Migration InitialCreateUpdate<span class="token operator">-</span>Database</code></pre><p> <a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215505284-1493819698.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215505284-1493819698.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215509782-1875408078.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215509782-1875408078.png" alt="img"></a></p><h3 id="三、测试应用"><a href="#三、测试应用" class="headerlink" title="三、测试应用"></a>三、测试应用</h3><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215515496-1603829883.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215515496-1603829883.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215522551-1403952018.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191207215522551-1403952018.png" alt="img"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="一、-增删查改页面"><a href="#一、-增删查改页面" class="headerlink" title="一、 增删查改页面"></a>一、 增删查改页面</h3><p> 这里已Blogger/Index.cshtml Razor页面为例</p><pre class=" language-csharp"><code class="language-csharp">@page@model BlogRazor<span class="token punctuation">.</span>Pages<span class="token punctuation">.</span>Blogger<span class="token punctuation">.</span>IndexModel@<span class="token punctuation">{</span>    ViewData<span class="token punctuation">[</span><span class="token string">"Title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>Index<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>a asp<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"Create"</span><span class="token operator">></span>Create New<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>table <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"table"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>thead<span class="token operator">></span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>                @Html<span class="token punctuation">.</span><span class="token function">DisplayNameFor</span><span class="token punctuation">(</span>model <span class="token operator">=</span><span class="token operator">></span> model<span class="token punctuation">.</span>BloggerModel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>                @Html<span class="token punctuation">.</span><span class="token function">DisplayNameFor</span><span class="token punctuation">(</span>model <span class="token operator">=</span><span class="token operator">></span> model<span class="token punctuation">.</span>BloggerModel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Sex<span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>                @Html<span class="token punctuation">.</span><span class="token function">DisplayNameFor</span><span class="token punctuation">(</span>model <span class="token operator">=</span><span class="token operator">></span> model<span class="token punctuation">.</span>BloggerModel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Sign<span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>                @Html<span class="token punctuation">.</span><span class="token function">DisplayNameFor</span><span class="token punctuation">(</span>model <span class="token operator">=</span><span class="token operator">></span> model<span class="token punctuation">.</span>BloggerModel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>RegistDate<span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>    <span class="token operator">&lt;</span>tbody<span class="token operator">></span>@<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> Model<span class="token punctuation">.</span>BloggerModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span>                @Html<span class="token punctuation">.</span><span class="token function">DisplayFor</span><span class="token punctuation">(</span>modelItem <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span>                @Html<span class="token punctuation">.</span><span class="token function">DisplayFor</span><span class="token punctuation">(</span>modelItem <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>Sex<span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span>                @Html<span class="token punctuation">.</span><span class="token function">DisplayFor</span><span class="token punctuation">(</span>modelItem <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>Sign<span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span>                @Html<span class="token punctuation">.</span><span class="token function">DisplayFor</span><span class="token punctuation">(</span>modelItem <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>RegistDate<span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span>a asp<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"./Edit"</span> asp<span class="token operator">-</span>route<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"@item.ID"</span><span class="token operator">></span>Edit<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">|</span>                <span class="token operator">&lt;</span>a asp<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"./Details"</span> asp<span class="token operator">-</span>route<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"@item.ID"</span><span class="token operator">></span>Details<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">|</span>                <span class="token operator">&lt;</span>a asp<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"./Delete"</span> asp<span class="token operator">-</span>route<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"@item.ID"</span><span class="token operator">></span>Delete<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span></code></pre><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexModel</span> <span class="token punctuation">:</span> PageModel    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> BlogRazor<span class="token punctuation">.</span>Models<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Context _context<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">IndexModel</span><span class="token punctuation">(</span>BlogRazor<span class="token punctuation">.</span>Models<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Context context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _context <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> IList<span class="token operator">&lt;</span>BloggerModel<span class="token operator">></span> BloggerModel <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">OnGetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            BloggerModel <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span>BloggerModel<span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>Razor 可以从 HTML 转换为 C# 或 Razor 特定标记。 当 <code>@</code> 符号后跟 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/razor?view=aspnetcore-3.0#razor-reserved-keywords">Razor 保留关键字</a>时，它会转换为 Razor 特定标记，否则会转换为 C#。</p><p><strong>@page 指令</strong></p><p><code>@page</code> Razor 指令将文件转换为一个 MVC 操作，这意味着它可以处理请求。 <code>@page</code> 必须是页面上的第一个 Razor 指令。 <code>@page</code> 是转换到 Razor 特定标记的一个示例。</p><p><strong>@model 指令</strong></p><p><code>@model</code> 指令指定传递给 Razor 页面的模型类型。 在前面的示例中，<code>@model</code> 行使 <code>PageModel</code> 派生的类可用于 Razor 页面。</p><pre class=" language-csharp"><code class="language-csharp">@model BlogRazor<span class="token punctuation">.</span>Pages<span class="token punctuation">.</span>Blogger<span class="token punctuation">.</span>IndexModel</code></pre><h4 id="ViewData-和布局"><a href="#ViewData-和布局" class="headerlink" title="ViewData 和布局"></a>ViewData 和布局</h4><pre class=" language-csharp"><code class="language-csharp">@<span class="token punctuation">{</span>    ViewData<span class="token punctuation">[</span><span class="token string">"Title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的代码就是 Razor 代码转换为 C# 的一个示例。 大括号“{ }” 字符括住 C# 代码块。</p><p>PageModel 基类具有 ViewData 字典属性，可用于添加要传递到某个视图的数据。 可以使用键/值模式将对象添加到 ViewData 字典。 在上面的示例中，“Title”属性被添加到 ViewData 字典中。 “Title”属性的在 Pages/_Layout.cshtml 文件中使用。</p><p><code>&quot;Title&quot;</code> 属性用于 Pages/Shared/_Layout.cshtml 文件 。 以下标记显示 _Layout.cshtml 文件的前几行 。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>@ViewData["Title"] - BlogRazor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~/lib/bootstrap/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~/css/site.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><h4 id="更新布局"><a href="#更新布局" class="headerlink" title="更新布局"></a>更新布局</h4><ol><li>更改 Pages/Shared/_Layout.cshtml 文件中的 `` 元素以显示 博主管理系统 而不是 BlogRazor。</li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>@ViewData["Title"] - 博主管理系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><code>asp-page=&quot;/Blogger/Index&quot;</code> 标记帮助程序属性和值可以创建指向 <code>/Blogger/Index</code> Razor 页面的链接。 <code>asp-area</code> 属性值为空，因此在链接中未使用区域。</li></ol><h3 id="二、使用数据库"><a href="#二、使用数据库" class="headerlink" title="二、使用数据库"></a>二、使用数据库</h3><p> LocalDB 是轻型版的 SQL Server Express 数据库引擎，以程序开发为目标。</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208131935908-311501876.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208131935908-311501876.png" alt="img"></a></p><p> 通过数据库管理器，我们可以查看创建的数据库和数据库表</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208132129206-407696392.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208132129206-407696392.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208132226368-299962342.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201912/1576550-20191208132226368-299962342.png" alt="img"></a></p><p>默认情况下，LocalDB 数据库在 <code>C:\Users\\</code> 目录下创建 <code>*.mdf</code> 文件。（右键查看数据库 属性，根据连接参数下的数据文件找到对应的文件目录）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>参考文档<a href="https://docs.microsoft.com/en-au/aspnet/core/tutorials/razor-pages/?view=aspnetcore-3.0"> ASP.NET Core Web应用程序</a>开发</p></li><li><p>Razor易于使用，易于学习，并且可以在Visual Studio等工具中使用，快速搭建基本的应用程序。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DotCore/C# </tag>
            
            <tag> Razor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记五——配置开发环境及初建项目</title>
      <link href="2019/11/10/vue-xue-xi-bi-ji-wu-pei-zhi-kai-fa-huan-jing-ji-chu-jian-xiang-mu/"/>
      <url>2019/11/10/vue-xue-xi-bi-ji-wu-pei-zhi-kai-fa-huan-jing-ji-chu-jian-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue学习笔记-五-——配置开发环境及初建项目"><a href="#Vue学习笔记-五-——配置开发环境及初建项目" class="headerlink" title="Vue学习笔记(五)——配置开发环境及初建项目"></a>Vue学习笔记(五)——配置开发环境及初建项目</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在<a href="https://www.cnblogs.com/i3yuan/p/11779714.html">上一篇</a>中，我们通过初步的认识，简单了解 Vue 生命周期的八个阶段，以及可以应用在之后的开发中，针对不同的阶段的钩子采取不同的操作，更好的实现我们的业务代码，处理更加复杂的业务逻辑。</p><p>  而在这一篇中，我们将通过配置vue的开发环境以及搭建项目，进一步的学习vue在开发中的使用方式。</p><p>  对于开发vue项目之前，我们需要进行vue环境配置，大致的将需要用到的工具进行归类总结如下：（可能还有其他的工具，或者配置方式，这里仅是个人开发中常用的工具）</p><p> <a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109193035858-686612415.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109193035858-686612415.png" alt="img"></a></p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109160334265-1183722006.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109160334265-1183722006.png" alt="img"></a></p><p> 1.简单的说 Node.js 就是运行在服务端的 JavaScript。<br> 2.Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br> 3.Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><p>  Node.js在维基百科中就已经很明确的说明了，它是一个运行环境，并不是其他的什么比如软件库，简而言之，和C#所需要的编译环境一样，Node.js就是JavaScript的编译环境，它存在的目的就是为了让JavaScript可以和其他的后端语言一样能够在浏览器上运行，换种说法就是，可以让前端语言JavaScript在写完之后交给Node.js进行编译和解释，它的存在对于JavaScript有了质的飞跃，对于一个前端来说利用JavaScript就可以编译后台代码是一件多么爽飞天的事情。</p><p><strong>安装</strong>：</p><p>通过<a href="https://nodejs.org/zh-cn/">node官网地址</a>,直接点击下载安装。</p><p>注意：在此之前，可以有朋友会发现，在博文目录中，很早就有一篇关于<a href="https://www.cnblogs.com/i3yuan/p/10247599.html">node安装与vue运行</a>的文章，大伙可以参考，进行相应的安装</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109201128179-522116977.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109201128179-522116977.png" alt="img"></a></p><p> 通过打开 CMD 命令窗口，输入 node -v，检查node是否安装成功</p><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109160455266-1480412285.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109160455266-1480412285.png" alt="img"></a></p><p>  由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。</p><p>  NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><p>  1.允许用户从NPM服务器下载别人编写的第三方包到本地使用。<br>  2.允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。<br>  3.允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</p><p>  npm简单的可以这么理解：在以前开发网站的时候，比如你想使用 jQuery，那么你点击 jQuery 网站上提供的链接就可以下载 jQuery，放到自己的网站上使用,当一个网站依赖的代码越来越多，我们发现这是一件很麻烦的事情：去 jQuery 官网下载 jQuery，去 BootStrap 官网下载 BootStrap，一个个手动的添加极其不方便，于是，有人想出了一个解决方案，用一个工具把这些代码集中到一起来管理吧！这个工具就是他用 JavaScript （运行在 Node.js 上）写的 npm，全称是 Node Package Manager。</p><p>如果咱们使用的时候，只需要再 packbag.json 中，写上这个名字，嗯！就成功的从远程 down 下来了，省去了一个个下载的环节，是不是很方便了！</p><h2 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h2><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109160514648-657125429.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109160514648-657125429.png" alt="img"></a></p><p> WebPack运行流程：</p><p><strong>初始化配置参数 -&gt; 绑定事件钩子回调 -&gt; 确定Entry逐一遍历 -&gt; 使用loader编译文件 -&gt; 输出文件</strong></p><p><strong>作用：</strong></p><p>  1、把依赖树按需分割、按需加载；<br>　2、把初始加载时间控制在较低的水平；<br>　3、每个静态资源都应该成为一个模块；<br>　4、能把第三方库集成到项目里成为一个模块；<br>　5、能定制模块打包器的每个部分；<br>　6、能适用于大型项目。</p><p> WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p><p>安装指令：</p><pre><code>npm install webpack -g</code></pre><p> <a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109200946557-783373182.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109200946557-783373182.png" alt="img"></a></p><h2 id="Vue-CLI脚手架"><a href="#Vue-CLI脚手架" class="headerlink" title="Vue-CLI脚手架"></a>Vue-CLI脚手架</h2><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109160745560-1363090384.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109160745560-1363090384.png" alt="img"></a></p><p>   vue-cli是脚手架工具，其作用就是用配置好的模板迅速搭建起一个项目工程来，省去自己配置webpack配置文件的基本内容。</p><p>  vue-cli 是vue.js的脚手架，用于自动生成vue.js+webpack的项目模板的，脚手架大家肯定知道，就是一个架子，用来搭建项目的整体基本骨架，有点儿什么意思呢，就比如咱们开发 .net 的时候，咱们其实可以自己一步一步的建 mvc ，但是呢，VS给我们封装了 MVC框架，我们直接就生成了整体框架，包括基础包和一些必要文件夹，vue-cli 也是这个作用。</p><p><strong>安装</strong>：</p><pre><code>npm install -g @vue/cli</code></pre><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172328730-642495137.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172328730-642495137.png" alt="img"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>安装好脚手架后，在这里用到的脚手架是3.0版本以上的。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="1）-创建项目：vue-create-firstproject"><a href="#1）-创建项目：vue-create-firstproject" class="headerlink" title="1） 创建项目：vue create firstproject"></a>1） 创建项目：vue create firstproject</h4><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172348538-1824966427.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172348538-1824966427.png" alt="img"></a></p><p>如果没有配置保存过，则只有以下两个选项：</p><p>1.自动默认模式 ( 直接enter)：非常适合快速创建一个新项目的原型，没有带任何辅助功能的 npm包</p><p>2.手动模式（按方向键 ↓），是我们所需要的面向生产的项目，提供可选功能的 npm 插件包</p><p> 这里选择手动方式：使用键盘上下键来操作，然后 Enter 选中，就会出现插件列表，也是通过上下键，然后用 空格键 来选中</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172405871-1118585223.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172405871-1118585223.png" alt="img"></a></p><p> 在这里说明：</p><p>&gt;( ) Babel //转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。<br>( ) TypeScript// TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了 JavaScript 的语法，需要被编译输出为 JavaScript在浏览器运行，目前较少人再用<br>( ) Progressive Web App (PWA) Support// 渐进式Web应用程序<br>( ) Router // vue-router（vue路由）<br>( ) Vuex // vuex（vue的状态管理模式）<br>( ) CSS Pre-processors // CSS 预处理器（如：less、sass）<br>( ) Linter / Formatter // 代码风格检查和格式化（如：ESlint）<br>( ) Unit Testing // 单元测试（unit tests）<br>( ) E2E Testing // e2e（end to end） 测试</p><h4 id="2）选择css-预处理"><a href="#2）选择css-预处理" class="headerlink" title="2）选择css 预处理"></a>2）选择css 预处理</h4><p>主要为css解决浏览器兼容、简化CSS代码 等问题。</p><p>这里选择stylus</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172438900-1141789437.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172438900-1141789437.png" alt="img"></a></p><p>在这里说明：</p><p>&gt; SCSS/SASS //Sass安装需要Ruby环境，是在服务端处理的，SCSS 是 Sass3新语法（完全兼容 CSS3且继承Sass功能）<br>LESS //Less最终会通过编译处理输出css到浏览器，Less 既可以在客户端上运行，也可在服务端运行 (借助 Node.js)<br>Stylus //Stylus主要用来给Node项目进行CSS预处理支持，Stylus功能上更为强壮，和js联系更加紧密，可创建健壮的、动态的的CSS。</p><h4 id="3）单元测试："><a href="#3）单元测试：" class="headerlink" title="3）单元测试："></a>3）单元测试：</h4><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172447854-1724609089.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172447854-1724609089.png" alt="img"></a></p><p> 在这里说明：</p><p>&gt; Mocha + Chai //mocha灵活,只提供简单的测试结构，如果需要其他功能需要添加其他库/插件完成。必须在全局环境中安装<br>Jest //安装配置简单，容易上手。内置Istanbul，可以查看到测试覆盖率，相较于Mocha:配置简洁、测试代码简洁、易于和babel集成、内置丰富的expect</p><h4 id="4）放置配置"><a href="#4）放置配置" class="headerlink" title="4）放置配置"></a>4）放置配置</h4><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172502453-1623704992.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172502453-1623704992.png" alt="img"></a></p><p>在这里说明：</p><p>&gt; In dedicated config files // 独立文件放置<br>In package.json // 放package.json里</p><h4 id="5）是否保存本次配置"><a href="#5）是否保存本次配置" class="headerlink" title="5）是否保存本次配置"></a>5）是否保存本次配置</h4><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172530508-726870514.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172530508-726870514.png" alt="img"></a></p><p>? Save this as a preset for future projects? (Y/n) // y:记录本次配置，然后需要你起个名; n：不记录本次配置</p><h4 id="6）等待安装过程"><a href="#6）等待安装过程" class="headerlink" title="6）等待安装过程"></a>6）等待安装过程</h4><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172544884-1194868220.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172544884-1194868220.png" alt="img"></a></p><h4 id="7）搭建完成"><a href="#7）搭建完成" class="headerlink" title="7）搭建完成"></a>7）搭建完成</h4><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172553165-1273740254.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172553165-1273740254.png" alt="img"></a></p><h4 id="8）测试效果"><a href="#8）测试效果" class="headerlink" title="8）测试效果"></a>8）测试效果</h4><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172603796-1558176204.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172603796-1558176204.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172607886-611173007.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109172607886-611173007.png" alt="img"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="1、项目框架构造："><a href="#1、项目框架构造：" class="headerlink" title="1、项目框架构造："></a>1、项目框架构造：</h3><p><a href="https://img2018.cnblogs.com/common/1576550/201911/1576550-20191109172815049-1012384837.png"><img src="https://img2018.cnblogs.com/common/1576550/201911/1576550-20191109172815049-1012384837.png" alt="img"></a></p><h3 id="2、项目可视化UI界面"><a href="#2、项目可视化UI界面" class="headerlink" title="2、项目可视化UI界面"></a>2、项目可视化UI界面</h3><p>通过命令：vue ui</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109214508431-1039473883.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109214508431-1039473883.png" alt="img"></a></p><p> 通过导入功能 导入之前创建的项目文件夹，可以查看项目插件、项目运行依赖、项目配置等</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109215121071-1185303870.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109215121071-1185303870.png" alt="img"></a></p><p> <strong>你可以在这管理（安装、删除）插件、运行并分析你的项目文件</strong></p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109215216879-749806684.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109215216879-749806684.png" alt="img"></a></p><h3 id="3、-生命周期"><a href="#3、-生命周期" class="headerlink" title="3、 生命周期"></a>3、 生命周期</h3><p> <a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109223733878-1258701960.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191109223733878-1258701960.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>通过以上基本的环节搭建与项目的初步创建，我们已经可以进行相关业务逻辑的开发了。</p></li><li><p>Node.js是一个对于前端工作者不可或缺的工具，Node.js的应用快速发展，因此对于Node.js的学习和熟练运用，必不可少。</p></li><li><p>参考<a href="https://cli.vuejs.org/">vue-cli官方</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习系列四——理解生命周期和钩子</title>
      <link href="2019/11/03/vue-xue-xi-xi-lie-si-li-jie-sheng-ming-zhou-qi-he-gou-zi/"/>
      <url>2019/11/03/vue-xue-xi-xi-lie-si-li-jie-sheng-ming-zhou-qi-he-gou-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue学习系列-四-——理解生命周期和钩子"><a href="#Vue学习系列-四-——理解生命周期和钩子" class="headerlink" title="Vue学习系列(四)——理解生命周期和钩子"></a>Vue学习系列(四)——理解生命周期和钩子</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在<a href="https://www.cnblogs.com/i3yuan/p/11747017.html">上一篇</a>中，我们对平时进行vue开发中遇到的常用指令进行归类说明讲解，大概已经学会了怎么去实现数据绑定，以及实现动态的实现数据展示功能，运用指令，可以更好更快的进行开发。而在这一篇中，我们将通过实例，探究vue的生命周期。</p><p>  万物皆有灵，世间万物都拥有灵魂，小到山河湖海，花草树木，蚂蚁到人类，以及所有的动植物，大到地球星空和宇宙，都拥有灵魂，可以说他们都是有生命的，只是他们的生命形态是我们人类所不能理解的存在。在生产中，生命周期通俗来讲，就是从自然中来回到自然中去的全过程，也就是从采集材料设计，到加工生产后流通使用的过程，以及产品报废，进而回归大自然的过程，这整个过程就是一个完整的生命周期。因此，在开发应用项目的中，从启动页面的加载，页面渲染到销毁，也算是生命周期。Vue把整个生命周期划分为创建、挂载、更新、销毁等阶段，每个阶段都会给一些“钩子”让我们来做一些我们想实现的动作。这里的“钩子”可以这么理解，就是在每一个阶段用钩子钩住，并进行响应的操作。 </p><p>​     <a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191103135827954-997819648.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191103135827954-997819648.png" alt="img"></a></p><p>   学习生命周期，可以使我们更好的理解Vue的生命机制，通过了解每个阶段的钩子，可以更好的实现我们的业务代码，处理更加复杂的业务逻辑。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>  Vue每一个组件都有属于自己的生命周期，从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等这就是一个组件的生命周期。</p><p>  在整个生命周期内，总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。</p><p><a href="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191103150217509-858603939.png"><img src="https://img2018.cnblogs.com/i-beta/1576550/201911/1576550-20191103150217509-858603939.png" alt="img"></a></p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p><a href="https://img2018.cnblogs.com/common/1576550/201911/1576550-20191103145933202-398786880.png"><img src="https://img2018.cnblogs.com/common/1576550/201911/1576550-20191103145933202-398786880.png" alt="img"></a></p><p>  *图片来自<a href="https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">官网</a>，只要你理解了这张图，也就对Vue的生命周期有了一个大致的了解。</p><p>  在谈到Vue的生命周期的时候，我们首先需要创建一个实例：</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1、创建前-后："><a href="#1、创建前-后：" class="headerlink" title="1、创建前/后："></a>1、创建前/后：</h3><p>1.beforeCreate-创建前 ：实例创建前：这个阶段实例的data、methods是读不到的（el 和 data 并未初始化）</p><pre class=" language-vue"><code class="language-vue">  var app = new Vue({      el: '#app',      data: {          message : "这是艾三元的主页"       },       beforeCreate: function () {                console.group('beforeCreate 组件刚刚被创建,组件属性计算前状态===============》');               console.log("%c%s", "color:red" , "el     : " + this.$el); //undefined               console.log("%c%s", "color:red","data   : " + this.$data); //undefined                console.log("%c%s", "color:red","message: " + this.message)  //undefined        },})</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101212943192-671448937.png"><img src="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101212943192-671448937.png" alt="img"></a></p><p>2.created-创建完成 ：实例创建后：这个阶段已经完成了数据观测(data observer)，属性和方法的运算， watch/event 事件回调。mount挂载阶段还没开始，$el 属性目前不可见，数据并没有在DOM元素上进行渲染（完成了data数据的初始化，el没有）</p><pre class=" language-vue"><code class="language-vue"> var app = new Vue({      el: '#app',      data: {          message : "这是艾三元的主页"       },        created: function () {            console.group('created 组件创建完毕,属性已经绑定但dom还未生成的状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el); //undefined               console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化                console.log("%c%s", "color:red","message: " + this.message); //已被初始化        },})</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213005146-558261117.png"><img src="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213005146-558261117.png" alt="img"></a></p><h3 id="2、载入前-后"><a href="#2、载入前-后" class="headerlink" title="2、载入前/后"></a>2、载入前/后</h3><p>1.beforeMount ：准备载入——在挂载开始之前被调用：相关的 render 函数首次被调用。程序运行，控制台看输出 （完成了虚拟el和data初始化）</p><pre class=" language-vue"><code class="language-vue">  var app = new Vue({      el: '#app',      data: {          message : "这是艾三元的主页"       },         beforeMount: function () {            console.group('beforeMount 模板挂载前状态===============》');            console.log("%c%s", "color:red","el     : " + (this.$el)); //已被初始化            console.log(this.$el);               console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化                 console.log("%c%s", "color:red","message: " + this.message); //已被初始化          },})</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213100534-1854648893.png"><img src="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213100534-1854648893.png" alt="img"></a></p><p> 2.mounted ：挂载完成——el选项的DOM节点 被新创建的 vm.$el 替换，并挂载到实例上去之后调用此生命周期函数。此时实例的数据在DOM节点上进行渲染（完成了真实el和data初始化）</p><pre class=" language-vue"><code class="language-vue">var app = new Vue({      el: '#app',      data: {          message : "这是艾三元的主页"       },        mounted: function () {            console.group('mounted 模板挂载结束状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el); //已被初始化            console.log(this.$el);                   console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化               console.log("%c%s", "color:red","message: " + this.message); //已被初始化         },})</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213140561-58889086.png"><img src="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213140561-58889086.png" alt="img"></a></p><p> 这个时候，页面渲染的四个阶段已经完成了，我们看看流程：（刚开始的时候beforeCreate阶段，数据和页面都没有渲染，但是页面的静态数据已经被加载出来，然后一步一步，先vue实例，然后挂载，到最后页面渲染完成）</p><h3 id="3、更新前-后"><a href="#3、更新前-后" class="headerlink" title="3、更新前/后"></a>3、更新前/后</h3><p>1.beforeUpdate ：更新Data之前——数据更新时调用，但不进行DOM重新渲染，在数据更新时DOM没渲染前可以在这个生命函数里进行状态处理</p><p>当修改vue实例的data时，vue就会自动帮我们更新渲染视图，在这个过程中，vue提供了beforeUpdate的钩子给我们，在检测到我们要修改数据的时候，更新渲染视图之前就会触发钩子beforeUpdate。</p><pre class=" language-vue"><code class="language-vue">  var app = new Vue({      el: '#app',      data: {          message : "这是艾三元的主页"       },        beforeUpdate: function () {            console.group('beforeUpdate 更新前状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);            console.log(this.$el);                  console.log("%c%s", "color:red","data   : " + this.$data);                console.log("%c%s", "color:red","message: " + this.message);         },})</code></pre><p><strong>控制台输入</strong> <strong>app.message = ‘艾三元’</strong></p><p><strong><a href="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213243739-743676115.png"><img src="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213243739-743676115.png" alt="img"></a></strong></p><p>由图看来，我们的 Data 数据已经更新了，但是页面里还没有更新</p><p>2.update ：这个状态下数据更新并且DOM重新渲染，当这个生命周期函数被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。当实例每次进行数据更新时updated都会执行</p><pre class=" language-vue"><code class="language-vue"> var app = new Vue({      el: '#app',      data: {          message : "这是艾三元的主页"       },         updated: function () {            console.group('updated 更新完成状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);            console.log(this.$el);                console.log("%c%s", "color:red","data   : " + this.$data);                console.log("%c%s", "color:red","message: " + this.message);        },})</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213335147-1391602718.png"><img src="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213335147-1391602718.png" alt="img"></a></p><h3 id="4、销毁前-后"><a href="#4、销毁前-后" class="headerlink" title="4、销毁前/后"></a>4、销毁前/后</h3><p>1.beforeDestroy ：页面销毁前——实例销毁之前调用。调用实例的<code>destroy( )</code>方法可以销毁当前的组件，在销毁前，会触发beforeDestroy钩子。</p><pre class=" language-vue"><code class="language-vue">  var app = new Vue({      el: '#app',      data: {          message : "这是艾三元的主页"       },        beforeDestroy: function () {            console.group('beforeDestroy 销毁前状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);            console.log(this.$el);                   console.log("%c%s", "color:red","data   : " + this.$data);                console.log("%c%s", "color:red","message: " + this.message);         },})</code></pre><p><strong>控制台输入</strong> <strong>app.$destroy()</strong></p><p><strong><a href="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213434377-1096717143.png"><img src="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213434377-1096717143.png" alt="img"></a></strong></p><p> 2.destroyed ：销毁完成——Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p><pre class=" language-vue"><code class="language-vue">var app = new Vue({      el: '#app',      data: {          message : "这是艾三元的主页"       },        destroyed: function () {            console.group('destroyed 销毁完成状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);            console.log(this.$el);                 console.log("%c%s", "color:red","data   : " + this.$data);                console.log("%c%s", "color:red","message: " + this.message)        }})</code></pre><p> <a href="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213700747-1574280495.png"><img src="https://img2018.cnblogs.com/blog/1576550/201911/1576550-20191101213700747-1574280495.png" alt="img"></a></p><p>这个时候我们可以看到，vue 实例被销毁后，再修改 Data 页面也已经不能修改页面 DOM 了。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/vue/2.1.3/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          message <span class="token punctuation">:</span> <span class="token string">"这是艾三元的主页"</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeCreate<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'beforeCreate 组件刚刚被创建,组件属性计算前状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span> <span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined </span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'created 组件创建完毕,属性已经绑定但dom还未生成的状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化 </span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeMount<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'beforeMount 模板挂载前状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化  </span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化  </span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        mounted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'mounted 模板挂载结束状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化 </span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeUpdate<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'beforeUpdate 更新前状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>        updated<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'updated 更新完成状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeDestroy<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'beforeDestroy 销毁前状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>        destroyed<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'destroyed 销毁完成状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span><span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>附加说明</p><p>1.说说钩子是什么时候触发的？</p><p>Vue文档源码：在实例化的时候</p><pre class=" language-vue"><code class="language-vue">function Vue(opt){        this._init(opt)}Vue.prototype._init(opt){    ... 合并选项    ... 设置初始值 ，事件 等数据    initLifecycle(vm)    callHook(vm, 'beforeCreate');    ... 初始化选项等数据    callHook(vm, 'created');    ...获取挂载的DOM 父节点    callHook(vm, 'beforeMount');    ...解析模板成渲染函数，并执行渲染函数，生成DOM插入页面    vm._isMounted = true;    callHook(vm, 'mounted');}// 组件更新时会调用这个函数Vue.prototype._update = function(    vnode, hydrating) {        if (vm._isMounted) {        callHook(vm, 'beforeUpdate');    }    ...重新调用渲染函数，对比旧节点和新节点，得到最小差异，然后只更新这部分页面    callHook(vm, 'updated');}// 节点被移除时会调用这个函数Vue.prototype.$destroy = function() {    callHook(vm, 'beforeDestroy');    vm._isBeingDestroyed = true;    ...实例被消除，移除所有 watcher    vm._isDestroyed = true;    ...DOM被移除    callHook(vm, 'destroyed');}</code></pre><p> 在执行钩子的时候，会触发这个函数，遍历执行，绑定上下文</p><pre><code>function callHook(vm, hook) &#123;        // 是自己传入的 created 等回调    var handlers = vm.$options[hook];        if (handlers) &#123;            for (var i = 0,j = handlers.length; i &lt; j; i++) &#123;            handlers[i].call(vm);        &#125;    &#125;&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>通过简单了解 Vue 生命周期的八个阶段，可以应用在之后的开发中，针对不同的阶段的钩子采取不同的操作，更好的实现我们的业务代码，处理更加复杂的业务逻辑。</p></li><li><p>参考资料<a href="https://cn.vuejs.org/v2/guide/instance.html">Vue官网</a></p></li><li><p>下一篇开始创建项目应用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习系列三——常用指令方式</title>
      <link href="2019/10/27/vue-xue-xi-xi-lie-san-chang-yong-zhi-ling-fang-shi/"/>
      <url>2019/10/27/vue-xue-xi-xi-lie-san-chang-yong-zhi-ling-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue学习系列-三-——常用指令方式"><a href="#Vue学习系列-三-——常用指令方式" class="headerlink" title="Vue学习系列(三)——常用指令方式"></a>Vue学习系列(三)——常用指令方式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   在<a href="https://www.cnblogs.com/i3yuan/p/11701077.html">上一篇</a>中，我们已经对组件有了更加进一步的认识，从组件的创建构造器到组件的组成，进而到组件的使用,.从组件的基本使用、组件属性，以及自定义事件实现父子通讯和巧妙运用插槽slot分发内容，进一步的认识到组件在Vue中的核心地位.。</p><p>   而今天，我们将对vue中的基本指令进行了解汇总，何为指令？</p><p>指令在Vue中是个很重要的功能，在Vue项目中是必不可少的。根据官网的介绍，指令 (Directives) 是带有 v- 前缀的特殊属性。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>今天的内容，是对Vue指令进行说明，什么是指令，以及常用的指令方式和在开发中使用的方式</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027210846861-1683097118.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027210846861-1683097118.png" alt="img"></a></p><p>根据常用的指令，进行归类总结，依据不同的方式，形成不同的表达方式，大致可分为以下这些，具体详细的很有很多，欢迎指点</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027173658280-1817528836.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027173658280-1817528836.png" alt="img"></a></p><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027203728092-103230005.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027203728092-103230005.png" alt="img"></a></p><h3 id="一、插值表达式"><a href="#一、插值表达式" class="headerlink" title="一、插值表达式"></a>一、插值表达式</h3><h4 id="V-text"><a href="#V-text" class="headerlink" title="V-text"></a>V-text</h4><p>更新解析标签包含的文本，输出文本</p><pre class=" language-vue"><code class="language-vue"><div id="app">     <div v-text="message"></div></div>   <script>      new Vue({       el: '#app',       data: {         message: 'vue的初次学习'        }      })  </script></code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027203806258-735975233.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027203806258-735975233.png" alt="img"></a></p><h4 id="V-Html"><a href="#V-Html" class="headerlink" title="V-Html"></a>V-Html</h4><p>解析html标签，用于输出html 代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span> <span class="token punctuation">{</span>         message<span class="token punctuation">:</span> <span class="token string">'&lt;h1>vue的初次学习&lt;/h1>'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="双大括号"><a href="#双大括号" class="headerlink" title="双大括号"></a>双大括号</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          message<span class="token punctuation">:</span> <span class="token string">'vue的初次学习'</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="二、条件判断式"><a href="#二、条件判断式" class="headerlink" title="二、条件判断式"></a>二、条件判断式</h3><h4 id="V-show"><a href="#V-show" class="headerlink" title="V-show"></a>V-show</h4><p>用来控制元素的显示/隐藏 ，主要是控制元素的display css属性的。v-show 指令的取值为true/false，分别对应着显示/隐藏</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/ <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>艾三元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            isShow<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-if-、v-else-if、-v-else"><a href="#v-if-、v-else-if、-v-else" class="headerlink" title="v-if 、v-else-if、 v-else"></a>v-if 、v-else-if、 v-else</h4><p> <code>v-if</code> 指令的取值是为true或false,通过一定的条件，控制元素是否被渲染出来。</p><pre><code>      &lt;div id=&quot;app&quot;&gt;            &lt;div v-if=&quot;seen&gt;10&quot;&gt;现在你看到我了&lt;/div&gt;                           &lt;div v-else-if=&quot;seen&gt;6&quot;&gt;                 &lt;p&gt;哈哈哈，你又看到我了！！！&lt;/p&gt;            &lt;/div&gt;       &lt;div v-else&gt;现在你看到我了&lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            new Vue(&#123;                el: &#39;#app&#39;,                data: &#123;                    seen:5                &#125;            &#125;)        &lt;/script&gt;</code></pre><p><strong>注意</strong>：</p><p>1、  v-show 其用法和 v-if 相同也可以设置元素的显示或隐藏。但是不具备条件判断功能</p><p>2、  v-else、v-else-if 可以给v-if 设置一个 else 模块、else-if模块</p><p>3、  v-else 、v-else-if 必须要跟在 v-if 或v-else-if 模块后面</p><h3 id="三、循环语法式"><a href="#三、循环语法式" class="headerlink" title="三、循环语法式"></a>三、循环语法式</h3><h4 id="V-for"><a href="#V-for" class="headerlink" title="V-for"></a>V-for</h4><p>指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名(有时候，我们的data中的存放的数据不是个简单的数字或者字符串，而是数组Array类型，这个时候，我们要把数组的元素展示在视图上，就需要用到vue提供的 <code>v-for</code> 指令，来实现列表的渲染)</p><p>迭代数组：</p><pre><code>      &lt;div id=&quot;app&quot;&gt;            &lt;ol&gt;                &lt;li v-for=&quot;site in sites&quot;&gt;                    &#123;&#123; site.name &#125;&#125;                &lt;/li&gt;            &lt;/ol&gt;       &lt;/div&gt;        &lt;script&gt;            new Vue(&#123;               el: &#39;#app&#39;,                data: &#123;                    sites: [                        &#123;name: &#39;i3yuan&#39;&#125;,                        &#123;name: &#39;Google&#39;&#125;,                        &#123;name: &#39;baidu&#39;&#125;                        ]                &#125;            &#125;)        &lt;/script&gt;</code></pre><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(val, key, i) in userInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{val}} --- {{key}} --- {{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   </code></pre><p>其中：【userinfo】是一个对象</p><p>迭代数字</p><p v-for="i in 10">这是第  个P标签</p><h4 id="一、属性绑定式"><a href="#一、属性绑定式" class="headerlink" title="一、属性绑定式"></a>一、属性绑定式</h4><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>绑定属性的指令。动态属性，动态绑定DOM元素的属性,就是在特性中存在变量。</p><p>  三种方法：</p><p>  1、对象型 ‘{red:isred}’ </p><p>  2、三元型  ‘isred?”red”:”blue”‘</p><p>  3、数组型  ‘[{red:”isred”},{blue:”isblue”}]’</p><pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle + &#39;ai&#39;&quot;&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &#39;#app&#39;,        data: &#123;            mytitle: &#39;这是一个自定义title&#39;        &#125;,        methods: &#123;            show: function() &#123;                alert(&#39;Hello&#39;)            &#125;        &#125;    &#125;)&lt;/script&gt;</code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="一、事件监听式"><a href="#一、事件监听式" class="headerlink" title="一、事件监听式"></a>一、事件监听式</h3><p> (一)  v-on: 绑定事件监听器。事件类型由参数给标签绑定函数，可以缩写为@，例如绑定一个点击函数 函数必须写在methods里面</p><pre><code>&lt;div id=&quot;app&quot;&gt;      &lt;!-- `show` 是在下面定义的方法名 --&gt;      &lt;button v-on:click=&quot;show&quot;&gt;show&lt;/button&gt;&lt;/div&gt;&lt;script&gt;var app = new Vue(&#123;            el: &#39;#app&#39;,            data: &#123;                name: &#39;demo&#39;            &#125;,            // 在 `methods` 对象中定义方法            methods: &#123;                show: function(event) &#123;                    // `this` 在方法里指当前 Vue 实例                    alert(&#39;Hello &#39; + this.name + &#39;!&#39;)                    // `event` 是原生 DOM 事件                    if(event) &#123;                        alert(event.target.tagName)                    &#125;                &#125;            &#125;        &#125;)&lt;/script&gt;</code></pre><h3 id="二、事件修饰符"><a href="#二、事件修饰符" class="headerlink" title="二、事件修饰符"></a>二、事件修饰符</h3><ol><li>@click.stop    阻止冒泡</li></ol><pre><code>&lt;div id=’app’&gt;         &lt;!-- 使用  .stop  阻止冒泡 --&gt;    &lt;div class=&quot;inner&quot; @click=&quot;div1Handler&quot;&gt;        &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click.stop=&quot;btnHandler&quot;&gt;     &lt;/div&gt;&lt;/div&gt;</code></pre><ol start="2"><li>@click.prevent  阻止默认事件,并阻止右键点击</li></ol><pre><code>&lt;!-- 使用 .prevent 阻止默认行为 --&gt;&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;linkClick&quot;&gt;有问题，先去百度&lt;/a&gt;</code></pre><ol start="3"><li>@click.capture  添加事件侦听器时使用事件捕获模式</li></ol><pre><code>&lt;!-- 使用  .capture 实现捕获触发事件的机制 --&gt;&lt;div class=&quot;inner&quot; @click.capture=&quot;div1Handler&quot;&gt;     &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click=&quot;btnHandler&quot;&gt;&lt;/div&gt;</code></pre><ol start="4"><li>@click.self    只当事件在该元素本身（比如不是子元素）触发时触发回调</li></ol><pre><code>&lt;!-- 使用 .self 实现只有点击当前元素时候，才会触发事件处理函数 --&gt;&lt;div class=&quot;inner&quot; @click.self=&quot;div1Handler&quot;&gt;       &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click=&quot;btnHandler&quot;&gt;&lt;/div&gt;</code></pre><ol start="5"><li>@click.once   事件只触发一次</li></ol><pre><code>&lt;!-- 使用 .once 只触发一次事件处理函数 --&gt;&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent.once=&quot;linkClick&quot;&gt;有问题，先去百度&lt;/a&gt; </code></pre><h3 id="三、按键修饰符"><a href="#三、按键修饰符" class="headerlink" title="三、按键修饰符"></a>三、按键修饰符</h3><p>允许为v-on在监听键盘事件时添加按键修饰符</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027152301837-2017112788.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027152301837-2017112788.png" alt="img"></a></p><pre><code>&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;V-on:keydown--- @keydown.left/@keydown.right/@keydown.up/@keydown.down&lt;input v-on:keydown.left=”submit”&gt;</code></pre><h2 id="样式动态式"><a href="#样式动态式" class="headerlink" title="样式动态式"></a>样式动态式</h2><h3 id="一、Class属性的绑定："><a href="#一、Class属性的绑定：" class="headerlink" title="一、Class属性的绑定："></a>一、Class属性的绑定：</h3><ol><li>根据数据的值，加载出我们对应的Class值。</li></ol><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;            .active &#123;                width: 100px;                height: 100px;                background: green;            &#125;&lt;/style&gt;&lt;script&gt;   new Vue(&#123;        el: &#39;#app&#39;,        data: &#123;             isActive: true           &#125;         &#125;) &lt;/script&gt;</code></pre><ol start="2"><li>根据数据方式，修改class实现多种样式。即v-bind:class={‘’,’’} 绑定数组的方式</li></ol><pre><code>&lt;div id=&quot;app&quot;&gt;      &lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;       &lt;!--另一种方式--&gt;      &lt;div v-bind:class=&quot;[errorClass ,isActive ? activeClass : &#39;&#39;]&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;   active &#123;       width: 100px;       height: 100px;       background: green;    &#125; .text-danger &#123;                background: red;    &#125;&lt;/style&gt;&lt;script&gt; new Vue(&#123;el: &#39;#app&#39;,      data: &#123;        isActive: true,        activeClass: &#39;active&#39;,        errorClass: &#39;text-danger&#39;        &#125;      &#125;)    &lt;/script&gt;</code></pre><h3 id="二-、Style属性的绑定"><a href="#二-、Style属性的绑定" class="headerlink" title="二 、Style属性的绑定"></a>二 、Style属性的绑定</h3><p><strong>内联样式：v-bind:style</strong></p><p>CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：</p><ol><li>直接设置样式：</li></ol><pre><code>&lt;div id=&quot;app&quot;&gt;     &lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &#39;px&#39; &#125;&quot;&gt;测试内联样式&lt;/div&gt;&lt;/div&gt;</code></pre><ol start="2"><li>绑定样式对象：</li></ol><pre><code>&lt;div id=&quot;app&quot;&gt;      &lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;    new Vue(&#123;       el: &#39;#app&#39;,       data: &#123;        styleObject: &#123;        color: red,        fontSize: &#39;10px&#39;       &#125;      &#125;    &#125;)&lt;/script&gt;</code></pre><ol start="3"><li>绑定多个样式对象：</li></ol><pre><code>&lt;div id=&quot;app&quot;&gt;      &lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;    new Vue(&#123;      el: &#39;#app&#39;,       data: &#123;           baseStyles: &#123;              color: red,               fontSize: &#39;10px&#39;           &#125;,            overridingStyles: &#123;               &#39;font-weight&#39;: &#39;bold&#39;               &#125;            &#125;          &#125;)&lt;/script&gt;</code></pre><p>注意：一个包含多个值的数组，常用于提供多个带前缀的值，<br>例如：<div :style="{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"></div><br>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>Vue除了内置的默认指令以外，也允许注册自定义指令，当需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令</p><h3 id="一、注册方式"><a href="#一、注册方式" class="headerlink" title="一、注册方式"></a>一、注册方式</h3><p>1.全局注册方式：</p><pre><code>&lt;input v-focus&gt;// 注册一个全局自定义指令 `v-focus`Vue.directive(&#39;focus&#39;, &#123;  // 当被绑定的元素插入到 DOM 中时……  inserted: function (el) &#123;    // 聚焦元素    el.focus()  &#125;&#125;)</code></pre><p>2.局部注册方式;</p><pre><code>&lt;input v-focus&gt;// 注册一个全局自定义指令 `v-focus`directives: &#123;  focus: &#123;    // 指令的定义    inserted: function (el) &#123;      el.focus()    &#125;  &#125;&#125;</code></pre><h3 id="二、钩子函数"><a href="#二、钩子函数" class="headerlink" title="二、钩子函数"></a>二、钩子函数</h3><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027160834958-206028512.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027160834958-206028512.png" alt="img"></a></p><pre><code>// 钩子函数的使用Vue.directive(&quot;demo&quot;,&#123;        // 自定义指令第一次绑定到元素时调用        bind:function()&#123;            console.log(&quot;自定义指令第一次绑定到元素时调用&quot;)        &#125;,        //这里指的是inserted函数中定义的效果实现才被调用（被绑定元素插入父节点时调用）        inserted:function(el)&#123;            el.style.color = &#39;red&#39;            console.log(&quot;也就是当自定义指令的元素上的文字变成红色就调用&quot;)        &#125;,        // 绑定的元素更新时调用        // 修改前: 绑定的元素是&lt;div v-test&gt;自定义指令的学习&lt;/div&gt;        // 修改后: 绑定的元素是&lt;div v-test&gt;自定义指令的学习与使用&lt;/div&gt;，改变时（注意是改变时，不是改变后，改变后触发的钩子函数是下面的componentUpdated函数）触发        update:function()&#123;            console.log(&quot;绑定的元素更新时调用&quot;)        &#125;,        // 绑定的元素更新后调用        componentUpdated:function()&#123;            console.log(&quot;绑定的元素更新后调用&quot;)        &#125;,        // 自定义指令和dom元素解绑后执行        unbind:function()&#123;            console.log(&quot;自定义指令和dom元素解绑后执行（也就是v-text自定义指令在dom元素上移除后）&quot;)        &#125;&#125;)</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027204445136-1539419034.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027204445136-1539419034.png" alt="img"></a></p><h3 id="三、钩子函数参数"><a href="#三、钩子函数参数" class="headerlink" title="三、钩子函数参数"></a>三、钩子函数参数</h3><ul><li><p><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM 。</p></li><li><pre><code>binding</code></pre><p>：一个对象，包含以下属性：</p><ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。</li><li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123; foo: true, bar: true &#125;</code>。</li></ul></li><li><p><code>vnode</code>：Vue 编译生成的虚拟节点。移步 <a href="https://cn.vuejs.org/v2/api/#VNode-%E6%8E%A5%E5%8F%A3">VNode API</a> 来了解更多详情。</p></li><li><p><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</p></li></ul><p>注意：除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset"><code>dataset</code></a> 来进行。</p><pre><code>&lt;div id=&quot;hook-arguments-example&quot; v-demo:foo.a.b=&quot;message&quot;&gt;&lt;/div&gt;Vue.directive(&#39;demo&#39;, &#123;  bind: function (el, binding, vnode) &#123;  //这里的el指的就是当前指令绑定的DOM元素;   binding //返回的是一个对象，包含有以下属性：    var s = JSON.stringify    el.innerHTML =      &#39;name: &#39;       + s(binding.name) + &#39;&lt;br&gt;&#39; +      &#39;value: &#39;      + s(binding.value) + &#39;&lt;br&gt;&#39; +      &#39;expression: &#39; + s(binding.expression) + &#39;&lt;br&gt;&#39; +      &#39;argument: &#39;   + s(binding.arg) + &#39;&lt;br&gt;&#39; +      &#39;modifiers: &#39;  + s(binding.modifiers) + &#39;&lt;br&gt;&#39; +      &#39;vnode keys: &#39; + Object.keys(vnode).join(&#39;, &#39;)  &#125;&#125;)new Vue(&#123;  el: &#39;#hook-arguments-example&#39;,  data: &#123;    message: &#39;hello!&#39;  &#125;&#125;)</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027161150583-1577458141.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191027161150583-1577458141.png" alt="img"></a></p><h3 id="四、动态指令参数"><a href="#四、动态指令参数" class="headerlink" title="四、动态指令参数"></a>四、动态指令参数</h3><p>指令的参数可以是动态的。</p><p>例如，在 <code>v-mydirective:[argument]=&quot;value&quot;</code> 中，<code>argument</code> 参数可以根据组件实例数据进行更新！这使得自定义指令可以在应用中被灵活使用。</p><pre><code>&lt;div id=&quot;dynamicexample&quot;&gt;  &lt;h3&gt;Scroll down inside this section ↓&lt;/h3&gt;  &lt;p v-pin:[direction]=&quot;200&quot;&gt;I am pinned onto the page at 200px to the left.&lt;/p&gt;&lt;/div&gt;Vue.directive(&#39;pin&#39;, &#123;  bind: function (el, binding, vnode) &#123;    el.style.position = &#39;fixed&#39;    var s = (binding.arg == &#39;left&#39; ? &#39;left&#39; : &#39;top&#39;)    el.style[s] = binding.value + &#39;px&#39;  &#125;&#125;)new Vue(&#123;  el: &#39;#dynamicexample&#39;,  data: function () &#123;    return &#123;      direction: &#39;left&#39;    &#125;  &#125;&#125;)</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>以上是vue中，常用的基本指令，不同的指令有着不同的效果，实现的方式不一样，所能展现的功能也不同，因此，通过使用指令，可以更好的提高开发效率</p></li><li><p>参考<a href="https://cn.vuejs.org/v2/guide/custom-directive.html">官方文档</a></p></li><li><p>下一篇将对Vue的生命周期进行详细说明。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习系列二——组件详解</title>
      <link href="2019/10/20/vue-xue-xi-xi-lie-er-zu-jian-xiang-jie/"/>
      <url>2019/10/20/vue-xue-xi-xi-lie-er-zu-jian-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue学习系列-二-——组件详解"><a href="#Vue学习系列-二-——组件详解" class="headerlink" title="Vue学习系列(二)——组件详解"></a>Vue学习系列(二)——组件详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://www.cnblogs.com/i3yuan/p/11664204.html">上一篇</a>初识Vue核心中，我们已经熟悉了vue的两大核心，理解了Vue的构建方式，通过基本的指令控制DOM,实现提高应用开发效率和可维护性。而这一篇呢，将对Vue视图组件的核心概念进行详细说明。</p><p>什么是组件呢？</p><p>组件可以扩展HTML元素，封装可重用的HTML代码，我们可以将组件看作自定义的HTML元素。</p><p>为什么要用到组件呢？</p><p>为了可重用性高，减少重复性开发，让我们可以使用独立可复用的小组件来构建大型应用。</p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020160715536-2028028844.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020160715536-2028028844.png" alt="img"></a></p><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="一、组件注册"><a href="#一、组件注册" class="headerlink" title="一、组件注册"></a>一、组件注册</h3><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191018224011967-861644947.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191018224011967-861644947.png" alt="img"></a></p><p><strong>1.通过Vue.extend()创建，然后由component来注册</strong></p><pre><code>//  extend 创建组件var MyComponent = Vue.extend(&#123;  template: &#39;&lt;div&gt;A custom component!&lt;/div&gt;&#39;&#125;);// component注册 组件Vue.component(&#39;my-component&#39;, MyComponent);//使用到了 extend 创建的组件var vm = new Vue(&#123;  el: &#39;#app&#39;,  data: &#123;  &#125;&#125;)</code></pre><p><strong>说明</strong>：</p><ol><li><p>Vue.extend()是Vue构造器的扩展，调用Vue.extend()创建的是一个组件构造器。 </p></li><li><p>Vue.extend()构造器有一个选项对象，选项对象的template属性用于定义组件要渲染的HTML。 </p></li><li><p>使用Vue.component()注册组件时，需要提供2个参数，第1个参数时组件的标签，第2个参数是组件构造器。 </p></li><li><p>组件应该挂载到某个Vue实例下，否则它不会生效。</p></li></ol><p>extend 是构造创建一个组件的语法器，你给它参数 他给你创建一个组件， 然后这个组件，你可以作用到Vue.component 这个全局注册方法里， 也可以在任意vue模板里使用组件</p><pre class=" language-vue"><code class="language-vue">var demo= Vue.extend({ …. }) Vue.component(‘demo’,demo)</code></pre><p> 可见上边的定义过程比较繁琐，也可以不用每次都调用两个，可以直接用 Vue.component 创建 ，也可以取组件 例如下</p><p>var demo= Vue.component(‘demo’)</p><p><strong>2.全局注册</strong></p><p>如果我们定义了多个 vue实例，我们都可以使用这一个组件</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;my-component&gt;&lt;/my-component&gt;&lt;/div&gt;&lt;script&gt;//注意要在vue实例之前去定义，不然渲染页面的时候，会报错  // 定义一个名为 myComponent 的新组件 Vue.component(&#39; myComponent &#39;, &#123;     template: `             &lt;div id=&quot; my-component &quot;&gt;                 &lt;p&gt;2018 &lt;a href=&quot;#&quot;&gt;艾三元&lt;/a&gt; - Hosted by &lt;a href=&quot;#&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;&lt;/p&gt;                 &lt;p&gt;                     &lt;a href=&quot;#&quot;&gt;京ICP备00000000号&lt;/a&gt;                 &lt;/p&gt;             &lt;/div&gt;             `,     data () &#123;         return &#123;             message: &#39;hello world&#39;         &#125;     &#125; &#125;)  var app = new Vue(&#123;    el: &#39;#app&#39;,//没错，vue实例所定义的DOM元素就是这个，超过了这个区域，定义的组件会无效    data: &#123;    &#125;,  &#125;)&lt;/script&gt;</code></pre><p><strong>3.局部注册</strong></p><p>表示只有在当前页面的app元素内使用</p><pre><code>var app = new Vue(&#123;    el: &#39;#app&#39;,    data: &#123;    &#125;,    components: &#123;          &#39;my-component&#39;: &#123;//这个就是我们局部组件的名字 在页面内使用 &lt;my-component&gt;&lt;/my-component&gt;         template: `             &lt;ul class =&quot;contact-list non-style-list&quot;&gt;              &lt;li&gt;                 &lt;b class =&quot;component&quot;&gt;组件&lt;/b&gt;: &lt;a href=&quot;#&quot;&gt;@艾三元&lt;/a&gt;              &lt;/li&gt;              &lt;/ul&gt;`,　　　　　　data () &#123;　　　　　　　　　　return &#123;　　　　　　　　　　　　　　message: &#39;hello world&#39;　　　　　　　　　　&#125;　　　　　　&#125;,　　　　　　directives:&#123;//自定义局部指令，使用的时候，直接可以 &lt;my-component v-focus&gt;&lt;my-component&gt;　　　　　　　　focus;&#123;　　　　　　　　　　inserted(el)&#123;　　　　　　　　　　　　el.focus();　　　　　　　　　　&#125;　　　　　　　　&#125;　　　　　　&#125;      &#125;    &#125;  &#125;)</code></pre><p>注意：全局的组件是 component，而 局部的是 components</p><h3 id="二、属性"><a href="#二、属性" class="headerlink" title="二、属性"></a>二、属性</h3><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020095501242-266285990.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020095501242-266285990.png" alt="img"></a></p><p>  定义了这个组件有哪些可配置的属性，组件的核心功能也是由它确定。props最好用对象写法，这样可以针对属性设置类型，默认值或自定义校验属性的值。</p><pre class=" language-vue"><code class="language-vue"> <script>export default {  name: "PropsDemo",  props: {    name: String,    type: {      validator: function(value) {        //从父级传入的 type，它的值必须是指定的 'success', 'warning', 'danger'中的一个，如果传入这三个以外的值，都会抛出一条警告        return ["success", "warning", "danger"].includes(value);      }    },    list: {      type: Array,      // 对象或数组默认值必须从一个工厂函数获取      default: () => []    },    isVisible: {      type: Boolean,      default: false    },    onChange: {      type: Function,      default: () => {}    }  },  methods: {    handleClick() {      // 不要这么做、不要这么做、不要这么做      // this.type = "warning";      // 可以，还可以更好      this.onChange(this.type === "success" ? "warning" : "success");    }  }};</script>  //用法<props name='Hello World' //原生属性           :type='type'             :is-visible="false"           :on-change="handlePropChange"           :list=[22,33,44]           title="Demo"  //原生属性           class="test1"   //原生属性           :class="['test2']"           :style="{ marginTop: '15px' }" //注意:style 的优先级是要高于 style           style="margin-top: 10px"></code></pre><h3 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h3><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020154534028-1444960244.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020154534028-1444960244.png" alt="艾三元"></a></p><h4 id="一、父子通讯"><a href="#一、父子通讯" class="headerlink" title="一、父子通讯"></a>一、父子通讯</h4><p><strong>1.父向子传值</strong>：</p><p>语法：在父组件中使用子组件时候，通过以下方式传递数据</p><p>&lt;child-component v-bind:子组件prop=”父组件数据属性”&gt;</child-component></p><pre class=" language-vue"><code class="language-vue">//定义一个组件，并在vue实例中定义了data选项var vm = new Vue({    el: '#app',    data: {        name: 'keepfool',        age: 28    },    components: {        'my-component': {            template: '#myComponent',            props: ['myName', 'myAge']        }    }})定义一个组件Vue.component('my-component', {     template: `             <div id="myComponent">              <table>                <tr>                  <th colspan="2">                  子组件数据                  </th>               </tr>            <tr>                <td>my name</td>                <td>{{ myName }}</td>           </tr>           <tr>            <td>my age</td>            <td>{{ myAge }}</td>           </tr>     </table>     </div>`,     props: ['foo'],//这里根据组件的props属性，来被动接受组件传递来的参数     data () {         return {             message: 'hello world'         }     } })//将父组件数据通过已定义好的props属性传递给子组件：<div id="app">    <my-component v-bind:my-name="name" v-bind:my-age="age"></my-component></div></code></pre><p>注意：在子组件中定义prop时，使用了camelCase命名法。由于HTML特性不区分大小写，浏览器会把所有大写字符解释为小写字符，所以camelCase的prop用于特性时，需要转为 kebab-case（短横线分割命名）。例如，在prop中定义的myName，在用作特性时需要转换为my-name。</p><h4 id="二、子向父传值"><a href="#二、子向父传值" class="headerlink" title="二、子向父传值"></a>二、子向父传值</h4><p>自定义事件</p><p>1） v-on绑定自定义事件：</p><p>每个 Vue 实例都实现了事件接口，即：$on(eventName) 监听事件 和 $emit(eventName) 触发事件</p><p> 在父组件中：</p><pre class=" language-vue"><code class="language-vue"><my-component  v-on:child-say="listenToMyBoy"></my-component> //3、父组件通过监听，来获取到这个广播信号 child-say ，然后触发 listenToMyBoy 方法<p>Do you like me? {{childWords}}</p> methods: {            listenToMyBoy: function (somedata){  //4、incrementTotal 被触发，获取到参数 counter 值，执行相应的操作              this.childWords = somedata            }        }</code></pre><p>在子组件my-component中</p><pre class=" language-vue"><code class="language-vue"><button v-on:click="onClickMe">like!</button>  ////1、子组件内，有一个click，当点击的时候 触发 onClickMe 方法methods: {      onClickMe: function(){        this.$emit('child-say',this.somedata);  //2、方法被触发以后，向父组件 发送一个信号广播，并传递参数 somedata，名字就是 child-say      }    }</code></pre><p> 通过子组件注册触发事件，父组件注册 触发子组件事件后的方法，传递参数，父组件通过监听子组件的事件，获取参数，执行响应的变化操作</p><p><strong>完整示列</strong></p><pre class=" language-vue"><code class="language-vue"><my-component  v-on:child-say="listenToMyBoy"></my-component> //3、父组件通过监听，来获取到这个广播信号 child-say ，然后触发 listenToMyBoy 方法<p>Do you like me? {{childWords}}</p>Vue.component('my-component', {  template: '<button v-on:click="onClickMe">like!</button>',   //1、子组件内，有一个click，当点击的时候 触发 onClickMe 方法  methods:{      onClickMe: function(){        this.$emit('child-say',this.somedata);  //2、方法被触发以后，向父组件 发送一个信号广播，并传递参数 somedata，名字就是 child-say      }  }})var vm = new Vue({  el: '#app',  data: {       childWords:''  },  methods:{    listenToMyBoy: function (somedata){  //4、incrementTotal 被触发，获取到参数 counter 值，执行相应的操作              this.childWords = somedata    }  }})</code></pre><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p> <a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020133043494-1593481044.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020133043494-1593481044.png" alt="img"></a></p><p>Vue中的插槽，是组件的一块模板，由使用父组件提供。简单的说，就是子组件暴露一个让父组件传入自定义内容的接口，这样可以让使用者更好的拓展组件，进行更丰富的复用和定制化组件。</p><p>插槽Slot的三大分类：默认插槽、具名插槽和作用域插槽</p><h4 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1.默认插槽"></a><strong>1.默认插槽</strong></h4><p>直接在子组件的标签内写入内容即可</p><pre class=" language-vue"><code class="language-vue">//父组件<template>    <div class="father">        <h3>灰色背景这是父组件</h3>        <child>            <div class="tmpl">              <span>1</span>              <span>2</span>              <span>3</span>              <span>4</span>            </div>        </child>    </div></template>//子组件<template>    <div class="child">        <h3>蓝色背景这是子组件</h3>        <slot></slot>    </div></template></code></pre><p> <a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020141602755-398973778.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020141602755-398973778.png" alt="img"></a></p><h4 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2.具名插槽"></a><strong>2.具名插槽</strong></h4><p> 用<code>name</code>属性来表示插槽的名字，不传为默认插槽</p><pre class=" language-vue"><code class="language-vue">//父组件<template>  <div class="father">    <h3>灰色背景这是父组件</h3>    <child>      <div slot="header">        <span>页头1</span>        <span>页头2</span>        <span>页头3</span>      </div>      <div>   //一个不带 name 的 <slot> 出口会带有隐含的名字“default”。        <span>内容1</span>        <span>内容2</span>        <span>内容3</span>      </div>      <div slot="footer">            <span>页脚1</span>        <span>页脚2</span>        <span>页脚3</span>      </div>    </child>  </div></template>//子组件<template>  <div class="child">    // 具名插槽    <slot name="header"></slot>    <h3>蓝色背景这是子组件</h3>    // 具名插槽    <slot></slot>  //一个不带 name 的 <slot> 出口会带有隐含的名字“default”。    // 匿名插槽    <slot name="footer"></slot>  </div></template></code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020143148240-1300278081.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020143148240-1300278081.png" alt="img"></a></p><h4 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3.作用域插槽"></a><strong>3.作用域插槽</strong></h4><p>在作用域上绑定属性来将子组件的信息传给父组件使用，这些属性会被挂在父组件slot-scope接受的对象上</p><pre class=" language-vue"><code class="language-vue">//父组件<template>  <div class="father">    <h3>灰色背景这是父组件</h3>    <child>      <template slot-scope="number">        <div>          <span v-for="item in number.data">{{item}}</span>        </div>      </template>    </child>    <child>      这就是模板    </child>  </div></template>//子组件<template>  <div class="child">    <h3>蓝色背景这是子组件</h3>    // 作用域插槽    <slot  :data="data"></slot>  </div></template> export default {    data: function(){      return {        data: ['one','two','three']      }    }}</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020145045835-46697.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020145045835-46697.png" alt="img"></a></p><h4 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a><strong>4.注意</strong></h4><p> <a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020155001925-587137946.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191020155001925-587137946.png"></a></p><p>内置指令v-slot，可以缩写为【#】</p><p> <strong>子组件用法保持不变</strong>，父组件中</p><ul><li><code>slot</code>属性弃用，具名插槽通过指令参数<code>v-slot:插槽名</code> 的形式传入，可以简化为 <code>#插槽名</code>。</li></ul><pre class=" language-vue"><code class="language-vue"><template #header>     <div>具名插槽</div>   </template></code></pre><ul><li><code>slot-scope</code>属性弃用，作用域插槽通过<code>v-slot:xxx=&quot;slotProps&quot;</code>的slotProps来获取子组件传出的属性</li></ul><pre class=" language-vue"><code class="language-vue"><!--作用域插槽-->   <template #footer="slotProps">     <div>      {{slotProps.testProps}}     </div>   </template></code></pre><ul><li><code>v-slot</code>属性只能在`上使用，但在【<strong>只有默认插槽时</strong>】可以在组件标签上使用</li></ul><pre class=" language-vue"><code class="language-vue"><template v-slot>     <div>默认插槽</div> </template> </code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>通过上述的描述，关于组件的了解有了更加进一步的认识，从组件的创建构造器到组件的组成，进而到组件的使用，已经丰富了多样式的组件，提高了复用性。</p></li><li><p>从组件的基本使用、组件属性，以及自定义事件实现父子通讯和巧妙运用插槽slot分发内容，进一步的认识到组件在Vue中的核心地位</p></li><li><p>参考资料<a href="https://cn.vuejs.org/v2/guide/components-registration.html">官方文档</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习系列一——初识Vue.js核心</title>
      <link href="2019/10/13/vue-xue-xi-xi-lie-yi-chu-shi-vue.js-he-xin/"/>
      <url>2019/10/13/vue-xue-xi-xi-lie-yi-chu-shi-vue.js-he-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue学习系列-一-——初识Vue-js核心"><a href="#Vue学习系列-一-——初识Vue-js核心" class="headerlink" title="Vue学习系列(一)——初识Vue.js核心"></a>Vue学习系列(一)——初识Vue.js核心</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  vue.js是一套构建用户界面的渐进式框架，vue.js的目标是通过尽可能简单的API实现响应的数据绑定和组合的视图组件。</p><p>  vue通过DOM事件操作和指令来进行视图层和模型层的相互通讯，会为每一处需要动态更新的DOM节点创建一个指令对象。每当一个指令对象观测的数据变化时，它便会对所绑定的目标节点执行相应的DOM操作。基于指令的数据绑定使得具体的DOM操作都被合理地封装在指令定义中，业务代码只需要涉及模板和对数据状态的操作即可，这使得应用的开发效率和可维护性都大大提升。</p><p>  因此，数据绑定，组件是整个vue的核心。响应的数据绑定就是数据驱动视图的概念。它让你在写 Web 应用介面时，只需要关注两件事：数据如何展示和数据如何变化。一旦数据发生变化时，比如用户输入，或者 ajax 请求返回后数据发现修改，对应的视图介面会自动的进行更新。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>  vue.js是MVVM的架构，如图：</p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191012221740985-911450808.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191012221740985-911450808.png" alt="img"></a></p><p>  从图中可以看出视图层和模型层的相互传递，通过用户操作来绑定一些DOM事件来重新渲染到视图层。具体的内部架构如下图：</p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191012221746392-1985944493.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191012221746392-1985944493.png" alt="img"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="一、-数据绑定："><a href="#一、-数据绑定：" class="headerlink" title="一、 数据绑定："></a>一、 数据绑定：</h3><p>  实现方式：数据绑定即是视图层和模型层的双向绑定。即数据的改变驱动了视图的自动更新。 </p><p>  通过ViewModel控制，修改数据，从而控制View的展示，实现MVVM的思想。</p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191013112045568-550790440.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191013112045568-550790440.png" alt="img"></a></p><p>  里面的两个属性getter和setter，在这两个函数内部实现依赖的收集和触发，而且完美支持嵌套的对象结构。对于数组，则通过包裹数组的可变方法（比如push）来监听数组的变化。这使得操作Vue.js的数据和操作原生对象几乎没有差别。</p><ul><li><p><strong>Obejct.defineProperty</strong> <em>【提供getter 和 setter】</em></p></li><li><p><strong>Observer</strong> <em>【提供getter 和 setter】——</em> 订阅者模式，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知，用来实时事件处理系统。</p></li><li><p><strong>watcher</strong> <em>【提供getter 和 setter】 ——</em> 模板和 <code>Observer</code> 对象结合在一起的纽带</p></li><li><p><strong>Dep</strong> <em>【负责收集watcher】</em></p></li><li><p><strong>Directive</strong> <em>【处理Vue模板指令】</em></p><p><strong>observe -&gt; 触发setter -&gt; watcher -&gt; 触发update -&gt; Directive -&gt; 触发update -&gt; 指令（如上图流程所示）</strong></p></li></ul><pre class=" language-vue"><code class="language-vue"><span>Hello, this is {{name}}</span><script>var app = new Vue({    el : '#app',    data : {        name: 'i3yuan'    }})</script></code></pre><p><strong>new Vue 执行时做了什么</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> option<span class="token punctuation">.</span>data   <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data  <span class="token comment" spellcheck="true">// 挂载 getter 和 setter</span>  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> option<span class="token punctuation">.</span>el  <span class="token comment" spellcheck="true">// 编译 模板</span>  <span class="token keyword">var</span> dom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compile</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 把编译好的模板挂载到 #app 上</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//observe构造函数</span><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">defineReactive</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//defineReactive</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 为每个变量分配一个 dep实例</span>  <span class="token keyword">var</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 配置getter和setter并且挂载到vm上</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> Dep<span class="token punctuation">.</span>target <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// JS的浏览器单线程特性， 保证整个全局变量在同一时间内， 只有一个监听器使用</span>        dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> val    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> newVal <span class="token operator">==</span> val <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 作为发布者发出通知</span>      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Dep构造函数</span><span class="token keyword">function</span> <span class="token function">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 存放watcher</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>Dep<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 添加watcher, 也就是添加订阅</span>  <span class="token function">addSub</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 通知所有watcher</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Compile</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$frag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">nodeToFragment</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$frag  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//watcher构造函数</span><span class="token keyword">function</span> <span class="token function">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> node<span class="token punctuation">,</span> name<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 单例， 使用原因未知</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment" spellcheck="true">// 姓名</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 呵呵哒 uid</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>uid<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 与变量相关的Node节点</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// vm 实例</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 变量类型  nodeValue  || value</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 触发自己原型上的update方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Watcher 实例创建结束就把单例置空</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span>Watcher<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>batcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// bastcher 单例</span>      batcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Batcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加入队列</span>    batcher<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 获取新值挂到自己的实例上</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 触发getter</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> <strong>整个流程：</strong></p><p><strong>new Vue –&gt; <code>Observe</code> 挂载 <code>setter</code> 和 <code>getter</code> –&gt; <code>Compile</code> 编译模板 –&gt; 为每个指令分配一个<code>watcher</code> –&gt; 创建时会调用一次<code>watcher.update</code> 将自己加入到<code>batcher</code>的队列 –&gt;</strong><br><strong>并且此时会触发 <code>getter</code> 将<code>watcher</code>加入<code>dep</code> –&gt; <code>batcher</code> 统一来处理<code>watcher</code>后初始化自己 –&gt; 当用户修改某个变量时 –&gt; <code>dep</code>通知<code>watcher</code> –&gt; <code>watcher</code>又被加入<code>batcher</code>处理 –&gt; <code>watcher</code> 更新<code>dom</code></strong> </p><h3 id="二、视图组件"><a href="#二、视图组件" class="headerlink" title="二、视图组件:"></a>二、视图组件:</h3><p>  组件，相信大部分开发人员在开发现代框架的时候都或多或少的遇到一些组件，可想而知，现代框架已经走向了组件化的道路，虽然不同的主流框架都有不同封装组件的方式，但是核心思想都差不多一样。通过分离页面，使得整个页面由很多个组件构成，给我们的第一个印象就是，就像我们平时使用到的MVC中的分视图，或者子视图，但是又不一样，虽然组件是一部分，但是却是自己的一个整体，和其他组件相互独立，高内聚低耦合，可以通过自定义标签的形式来使用。</p><p>  因此，在开发中， 把整一个网页的拆分成一个个区块，每个区块我们可以看作成一个组件。网页由多个组件拼接或者嵌套组成：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191013152022718-1951289488.png"><img src="https://img2018.cnblogs.com/blog/1576550/201910/1576550-20191013152022718-1951289488.png" alt="img"></a></p><pre class=" language-vue"><code class="language-vue">// 定义一个名为 Mycomponent  的新组件Vue.component('Mycomponent', {    // 模板    template: '<div>{{msg}} {{privateMsg}}</div>',    // 接受参数    props: {        msg: String        },    // 私有数据，需要在函数中返回以避免多个实例共享一个对象    data: function () {        return {            privateMsg: 'component!'        }    }})<Mycomponent msg="i3yuan"></Mycomponent></code></pre><h3 id="三、组件的核心选项"><a href="#三、组件的核心选项" class="headerlink" title="三、组件的核心选项"></a>三、组件的核心选项</h3><p>1 模板（template）：模板声明了数据和最终展现给用户的DOM之间的映射关系。</p><p>2 初始数据（data）：一个组件的初始数据状态。对于可复用的组件来说，这通常是私有的状态。</p><p>3 接受的外部参数(props)：组件之间通过参数来进行数据的传递和共享。</p><p>4 方法（methods）：对数据的改动操作一般都在组件的方法内进行。</p><p>5 生命周期钩子函数（lifecycle hooks）：一个组件会触发多个生命周期钩子函数，最新2.0版本对于生命周期函数名称改动很大。</p><p>6 私有资源（assets）：Vue.js当中将用户自定义的指令、过滤器、组件等统称为资源。一个组件可以声明自己的私有资源。私有资源只有该组件和它的子组件可以调用。</p><p>注意事项</p><ul><li>组件注册一定要在实例化Vue对象之前，否则会报错</li><li>属性名为components，s千万别忘了</li><li>不管是全局组件还是局部组件，data都必须是一个函数，且return不能换行</li><li>因为this指向的问题，建议用es5的方式写方法</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>通过<a href="https://cn.vuejs.org/">官方文档</a>的学习和总结，认识到了vue的框架和通讯方式，以视图组件和数据绑定为核心构建完整的渐进式的框架。</p></li><li><p>从上述的两大核心的描述，我们大体理解了Vue的构建方式，通过基本的指令控制DOM,实现提高应用开发效率和可维护性。</p></li><li><p>下一节我们将对Vue视图组件的核心概念进行详细说明。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印方案之web打印</title>
      <link href="2019/09/30/da-yin-fang-an-zhi-web-da-yin/"/>
      <url>2019/09/30/da-yin-fang-an-zhi-web-da-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="打印方案之web打印"><a href="#打印方案之web打印" class="headerlink" title="打印方案之web打印"></a>打印方案之web打印</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  前一段时间在工作中，遇到需要通过打印实现对报表或者工作流清单等事情时，都需要运用到打印功能，那么 ，这个时候你会怎么处理？</p><p>在这里，我们可以通过最简单的方式实现web打印功能，简单易懂，方便快捷</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190930144616500-1028102892.gif"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190930144616500-1028102892.gif" alt="img"></a></p><p>1.在处理工作流项目中，需求中；  2.使用JQprint做为web打印插件</p><p>3.兼容：FireFox,Chrome,IE；    4.没有依赖也没有配置，使用简单</p><h2 id="申请表为例"><a href="#申请表为例" class="headerlink" title="申请表为例"></a>申请表为例</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190930141022812-101128876.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190930141022812-101128876.png" alt="img"></a></p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>       <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-migrate-1.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery.jqprint-0.3.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="进行打印"><a href="#进行打印" class="headerlink" title="进行打印"></a>进行打印</h2><p>只需要打印指定的DIV内容：</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#print"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jqprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//指定的内容打印</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h2><pre class=" language-js"><code class="language-js">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jqprint</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             debug<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//如果是true则可以显示iframe查看效果（iframe默认高和宽都很小，可以再源码中调大），默认是false</span>             importCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//true表示引进原来的页面的css，默认是true。（如果是true，先会找$("link[media=print]")，若没有会去找$("link")中的css文件）</span>             printContainer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//表示如果原来选择的对象必须被纳入打印（注意：设置为false可能会打破你的CSS规则）。</span>             operaSupport<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">//表示如果插件也必须支持歌opera浏览器，在这种情况下，它提供了建立一个临时的打印选项卡。默认是true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="打印效果"><a href="#打印效果" class="headerlink" title="打印效果"></a>打印效果</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190930142146700-1287263698.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190930142146700-1287263698.png" alt="img"></a></p><p>使用的方法很简单，jqprint源码也极其简洁易懂</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>  jquery print去掉页眉页脚</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>style media<span class="token operator">=</span><span class="token string">"print"</span><span class="token operator">></span>    @page <span class="token punctuation">{</span>        size<span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* auto is the initial value */</span>        margin<span class="token punctuation">:</span> 0mm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* this affects the margin in the printer settings */</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>   很多朋友遇到 Cannot read property ‘opera’ of undefined错误问题是juqery版本兼容问题</p><p>  解决方法：加入迁移辅助插件jquery-migrate-1.0.0.js可解决版本问题</p><p> <a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1569836807373&di=258c23b1d2f6facc34456c04984b4209&imgtype=0&src=http://5b0988e595225.cdn.sohucs.com/images/20171008/869458c42c7c4d679bf1a4823171c3c9.gif"><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1569836807373&di=258c23b1d2f6facc34456c04984b4209&imgtype=0&src=http://5b0988e595225.cdn.sohucs.com/images/20171008/869458c42c7c4d679bf1a4823171c3c9.gif" alt="img"></a></p><p>项目源码：<a href="https://files-cdn.cnblogs.com/files/i3yuan/web%E6%89%93%E5%8D%B0.rar">web打印</a></p>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 认证方案之初步认识JWT</title>
      <link href="2019/09/14/ji-yu.netcore3.1-xi-lie-ren-zheng-fang-an-zhi-chu-bu-ren-shi-jwt/"/>
      <url>2019/09/14/ji-yu.netcore3.1-xi-lie-ren-zheng-fang-an-zhi-chu-bu-ren-shi-jwt/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-NetCore3-1系列-——-认证方案之初步认识JWT"><a href="#基于-NetCore3-1系列-——-认证方案之初步认识JWT" class="headerlink" title="基于.NetCore3.1系列 —— 认证方案之初步认识JWT"></a>基于.NetCore3.1系列 —— 认证方案之初步认识JWT</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914194400364-799646460.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914194400364-799646460.png" alt="img"></a></p><p> 现在越来越多的项目或多或少会用到JWT，为什么会出现使用JWT这样的场景的呢？</p><p> 假设现在有一个APP，后台是分布式系统。APP的首页模块部署在上海机房的服务器上，子页面模块部署在深圳机房的服务器上。此时你从首页登录了该APP，然后跳转到子页面模块。session在两个机房之间不能同步，用户是否需要重新登录？</p><p>传统的方式（cookie+session）需要重新登录，用户体验不好。session共享（在多台物理机之间传输和复制session）方式对网络IO的压力大，延迟太长，用户体验也不好。</p><p> 说到这大家可能会想到，用服务器的session_id存储到cookies中也能做到，为什么非要用token呢？网上有许多文章来比较token和session的优缺点，其实，开发web应用的话用哪种都行。但如果是开发api接口，前后端分离，最好使用token，为什么这么说呢，因为session+cookies是基于web的。但是针对 api接口，可能会考虑到移动端，app是没有cookies和session的。</p><p> <strong>Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。</strong></p><p> <strong>而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端</strong></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914194119695-1766361608.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914194119695-1766361608.png" alt="img"></a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>JSON Web Token（缩写 JWT）</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914163023170-16947129.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914163023170-16947129.png" alt="img"></a></p><p>  JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，以后，用户与服务端通信的时候，都要发回这个 JSON 对象。</p><p> 服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</p><p> 服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p> JWT 的三个部分依次是：<strong>Header</strong>（头部）、<strong>Payload</strong>（负载）、<strong>Signature</strong>（签名）</p><p>写成一行，就是下面的样子。</p><pre class=" language-javascript"><code class="language-javascript">Header<span class="token punctuation">.</span>Payload<span class="token punctuation">.</span>Signature</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914165234634-1931478502.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914165234634-1931478502.png" alt="img"></a></p><h3 id="一、Header"><a href="#一、Header" class="headerlink" title="一、Header"></a>一、Header</h3><p>header典型的由两部分组成：token的类型（“JWT”）和算法名称（比如：HMAC SHA256或者RSA等等）</p><pre><code>        &#123;          &quot;alg&quot;: &quot;HS256&quot;, //alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）          &quot;typ&quot;: &quot;JWT&quot;   //typ属性表示这个令牌（token）的类型（type）        &#125;</code></pre><p>然后用Base64对这个JSON编码就得到JWT的第一部分</p><h3 id="二、Payload"><a href="#二、Payload" class="headerlink" title="二、Payload"></a>二、Payload</h3><p>JWT的第二部分是payload，它包含声明（要求）。声明是关于实体(通常是用户)和其他数据的声明</p><p>JWT 规定了7个官方字段</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子</p><pre><code>&#123;  &quot;sub&quot;: &quot;1234567890&quot;,  &quot;name&quot;: &quot;John Doe&quot;,  &quot;admin&quot;: true&#125;注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的</code></pre><h3 id="三、Signature"><a href="#三、Signature" class="headerlink" title="三、Signature"></a>三、Signature</h3><p>Signature 部分是对前两部分的签名，防止数据篡改。签名是用于验证消息在传递过程中有没有被更改，并且，对于使用私钥签名的token，它还可以验证JWT的发送方是否为它所称的发送方。</p><p>为了得到签名部分，你必须有编码过的header、编码过的payload、一个秘钥，签名算法是header中指定的那个，然对它们签名即可。按照下面的公式产生签名。</p><p>HMACSHA256(base64UrlEncode(header) + “.” + base64UrlEncode(payload), secret)</p><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，就可以返回给用户。</p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914172700258-2086273628.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914172700258-2086273628.png" alt="img"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p> 一、客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p><pre><code>Authorization: Bearer &lt;token&gt;</code></pre><p>二、JWT 就放在 POST 请求的数据体里面，那么跨源资源共享(CORS)将不会成为问题，因为它不使用cookie</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914173553701-2114219325.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914173553701-2114219325.png" alt="img"></a></p><p>1.应用（或者客户端）想授权服务器请求授权。例如，如果用授权码流程的话，就是/oauth/authorize</p><p>2.当授权被许可以后，授权服务器返回一个access token给应用</p><p>3.应用使用access token访问受保护的资源（比如：API）</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p></li><li><p>JWT 不加密的情况下，不能将秘密数据写入 JWT。</p></li><li><p>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p></li><li><p>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p></li></ol><p><strong>注意</strong>：</p><p>JWT 是 JSON 格式的被加密了的字符串</p><p>JWT 的核心是密钥，就是 JSON 数据。这是你关心的，并希望安全传递出去的数据。JWT 如何做到这一点，并使你信任它，就是加密签名。</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914174429821-1669739189.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914174429821-1669739189.png" alt="img"></a></p><p>被篡改之后</p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914174435739-85849832.png"><img src="https://img2018.cnblogs.com/blog/1576550/201909/1576550-20190914174435739-85849832.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考官方文档：<a href="https://jwt.io/">JSON Web Tokens</a></p>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> JWT认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window服务基于Quartz.Net组件实现定时任务调度（二）</title>
      <link href="2019/08/18/window-fu-wu-ji-yu-quartz.net-zu-jian-shi-xian-ding-shi-ren-wu-diao-du-er/"/>
      <url>2019/08/18/window-fu-wu-ji-yu-quartz.net-zu-jian-shi-xian-ding-shi-ren-wu-diao-du-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Window服务基于Quartz-Net组件实现定时任务调度（二）"><a href="#Window服务基于Quartz-Net组件实现定时任务调度（二）" class="headerlink" title="Window服务基于Quartz.Net组件实现定时任务调度（二）"></a>Window服务基于Quartz.Net组件实现定时任务调度（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在<a href="https://i3yuan.cnblogs.com/p/11332931.html">上一章</a>中，我们通过利用控制台实现定时任务调度，已经大致了解了如何基于Quartz.Net组件实现任务，至少包括三部分：job(作业），trigger（触发器），scheduler（调度器）。其中job是需要在一个定时任务中具体执行的业务逻辑，trigger通过规定job何时并按照何种指定的规则进行执行，最后job和trigger会被注册到scheduler中，利用scheduler（调度器）来负责协调job和trigger的搭配运行。</p><p> 你是否在工作中会遇到需要软件具有自动执行任务的功能，但是又不希望直接启动软件来手动执行任务？ </p><p>​             <a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818143837137-827902360.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818143837137-827902360.png" alt="img"></a></p><p> 这个时候，我们可以考虑用到window服务，基于Quartz.Net组件定时轮询数据库同步，定时邮件通知，定时处理数据等功能。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>首先创建一个windows服务项目</strong></p><p><strong><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818115413632-1194648318.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818115413632-1194648318.png" alt="img"></a></strong></p><p><strong>在创建好的项目中，Service1.cs文件中点击“单击此处切换到代码视图”切换到代码</strong></p><p><strong><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818120010865-1695622154.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818120010865-1695622154.png" alt="img"></a></strong></p><p>这个时候我们可以注意到两个方法：<strong>OnStart</strong> <strong>（服务启动）</strong>和 <strong>OnStop（服务停止）</strong></p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 服务启动</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="args">&lt;/param></span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span></code></pre><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 服务停止</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span></code></pre><h3 id="一、创建一个scheduler的引用："><a href="#一、创建一个scheduler的引用：" class="headerlink" title="一、创建一个scheduler的引用："></a>一、创建一个scheduler的引用：</h3><pre class=" language-csharp"><code class="language-csharp">            ISchedulerFactory schedFact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IScheduler sched <span class="token operator">=</span> <span class="token keyword">await</span> schedFact<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二、启动-scheduler："><a href="#二、启动-scheduler：" class="headerlink" title="二、启动 scheduler："></a>二、启动 scheduler：</h3><pre class=" language-csharp"><code class="language-csharp">            <span class="token keyword">await</span> sched<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="三、实现IJob"><a href="#三、实现IJob" class="headerlink" title="三、实现IJob:"></a>三、实现IJob:</h3><p>SyncJob.cs 实现IJob，在Execute方法里编写要处理的业务逻辑，系统就会按照Quartz的配置，定时处理</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token punctuation">[</span><span class="token function">Invoke</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">"SyncJob"</span><span class="token punctuation">,</span> Remark <span class="token operator">=</span> <span class="token string">"Quartz服务"</span><span class="token punctuation">,</span> Group <span class="token operator">=</span> <span class="token string">"Quartz服务管理"</span><span class="token punctuation">,</span> Begin <span class="token operator">=</span> <span class="token string">"2018-05-01 12:00:00"</span><span class="token punctuation">,</span> Interval <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncJob</span> <span class="token punctuation">:</span> IJob    <span class="token punctuation">{</span>        <span class="token keyword">public</span> Task <span class="token function">Execute</span><span class="token punctuation">(</span>IJobExecutionContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//每次执行 获取当前时间 输出当前时间</span>                <span class="token comment" spellcheck="true">//可以在这里编写每次定时执行需要的方法</span>                LogHelper<span class="token punctuation">.</span><span class="token function">SaveLog</span><span class="token punctuation">(</span><span class="token string">"输出日志"</span><span class="token punctuation">,</span> <span class="token string">"在当前时间:"</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">"--上一次执行时间："</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                LogHelper<span class="token punctuation">.</span><span class="token function">SaveLog</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="四、创建trigger"><a href="#四、创建trigger" class="headerlink" title="四、创建trigger"></a>四、创建trigger</h3><p>（建立一个某个时间点的触发器，并且每5秒执行一次）</p><pre class=" language-csharp"><code class="language-csharp">            ITrigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//触发器 组</span>                <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="五、触发器执行任务："><a href="#五、触发器执行任务：" class="headerlink" title="五、触发器执行任务："></a>五、触发器执行任务：</h3><pre class=" language-csharp"><code class="language-csharp">            <span class="token keyword">await</span> sched<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>将几个步骤整合后代码如下：</strong></p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 服务启动</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="args">&lt;/param></span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LogHelper<span class="token punctuation">.</span><span class="token function">SaveLog</span><span class="token punctuation">(</span><span class="token string">"服务"</span><span class="token punctuation">,</span> <span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 服务停止</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    scheduler<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                LogHelper<span class="token punctuation">.</span><span class="token function">SaveLog</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            LogHelper<span class="token punctuation">.</span><span class="token function">SaveLog</span><span class="token punctuation">(</span><span class="token string">"服务"</span><span class="token punctuation">,</span> <span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        IScheduler scheduler<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">async</span> Task <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                NameValueCollection props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NameValueCollection</span>                <span class="token punctuation">{</span>                    <span class="token punctuation">{</span> <span class="token string">"quartz.serializer.type"</span><span class="token punctuation">,</span> <span class="token string">"binary"</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                StdSchedulerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>                scheduler <span class="token operator">=</span> <span class="token keyword">await</span> factory<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Jobs<span class="token punctuation">.</span>Jobs<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                LogHelper<span class="token punctuation">.</span><span class="token function">SaveLog</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>以管理员的身份打开cmd</strong></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818141838753-1961291655.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818141838753-1961291655.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818141921565-1200769606.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818141921565-1200769606.png" alt="img"></a></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>间隔5秒执行一次后的效果：</p><p>通过日志的方式输出数据，查看效果</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818140811855-1560990971.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818140811855-1560990971.png" alt="img"></a></p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><h3 id="一、删除服务"><a href="#一、删除服务" class="headerlink" title="一、删除服务"></a>一、删除服务</h3><p><strong>以管理员的身份打开cmd</strong></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818142007380-844770354.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818142007380-844770354.png" alt="img"></a></p><h3 id="二、调试window服务"><a href="#二、调试window服务" class="headerlink" title="二、调试window服务"></a>二、调试window服务</h3><p><strong>1</strong>）安装并运行服务</p><p><strong><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818141921565-1200769606.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818141921565-1200769606.png" alt="img"></a></strong></p><p><strong>2</strong>）附加进程</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818142130236-1798190575.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818142130236-1798190575.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818142231572-393929800.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818142231572-393929800.png" alt="img"></a></p><p><strong>3</strong>）在代码中加入断点进行调试</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818142342243-875972866.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190818142342243-875972866.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>当我们在需要用到定时执行任务的时候，可以考虑使用通过window服务加上quartz组件结合的方式，实现对任务的定时执行，这也是在很多场景中可以实现的方法，比如：定时轮询数据库同步，定时邮件通知，定时处理数据等</p></li><li><p>通过管理工具显示当前执行的任务和执行情况，也利用调试工具调试Window服务中遇到的问题。</p></li><li><p>quartz还有更多的用法，可以参考资料：<a href="https://www.quartz-scheduler.net/">Quartz.Net官方文档</a>  和 <a href="https://github.com/quartznet/quartznet">Quartz.Net开源地址</a></p></li><li><p>搜索关注公众号【DotNet技术谷】–回复【定时服务】，可获取源码下载地址内容</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quartz </tag>
            
            <tag> .Net/C# </tag>
            
            <tag> DotCore/C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制台基于Quartz.Net组件实现定时任务调度（一）</title>
      <link href="2019/08/10/kong-zhi-tai-ji-yu-quartz.net-zu-jian-shi-xian-ding-shi-ren-wu-diao-du-yi/"/>
      <url>2019/08/10/kong-zhi-tai-ji-yu-quartz.net-zu-jian-shi-xian-ding-shi-ren-wu-diao-du-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="控制台基于Quartz-Net组件实现定时任务调度（一）"><a href="#控制台基于Quartz-Net组件实现定时任务调度（一）" class="headerlink" title="控制台基于Quartz.Net组件实现定时任务调度（一）"></a>控制台基于Quartz.Net组件实现定时任务调度（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  你曾经需要应用执行一个任务吗？比如现在有一个需求，需要每天在零点定时执行一些操作，那应该怎样操作呢？</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810203728409-702927033.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810203728409-702927033.png" alt="img"></a></p><p>  这个时候，如果你和你的团队是用.NET编程的话，可以考虑使用Quartz.NET调度器。允许开发人员根据日期间隔来实现任务调度任务。非常适合在平时的工作中，定时轮询数据库同步，定时邮件通知，定时处理数据等。</p><p>  Quartz一个开源的作业调度框架，是OpenSymphony 的 Quartz API的.NET移植每隔，基于C#写成，可应用于winform、asp.net、asp.net core应用中。提供了巨大的灵活性，是一个更为强大，方便管理，集群部署的作业调度框架。</p><p>所以，有时候项目需要在不同时刻，执行一个或很多个不同的作业，你可以用它来完成执行创建简单或复杂的任务调度。</p><p><strong>导图</strong>：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810163426877-704304277.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810163426877-704304277.png" alt="img"></a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>1：支持集群，作业分组，作业远程管理。 </p><p>2：自定义精细的时间触发器，使用简单，作业和触发分离。</p><p>3：数据库支持，可以寄宿Windows服务，WebSite，winform等。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Scheduler    作业调度器</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810164017025-75585221.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810164017025-75585221.png" alt="img"></a></p><p>所有的scheduler都应该由<code>SchedulerFactory来创建</code></p><pre class=" language-csharp"><code class="language-csharp"> <span class="token comment" spellcheck="true">//创建scheduler</span>            Scheduler scheduler <span class="token operator">=</span> StdSchedulerFactory<span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>IJob       作业接口，继承并实现Execute， 编写执行的具体作业逻辑。</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810211111567-1170484749.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810211111567-1170484749.png" alt="img"></a></p><p>通过实现IJob接口来使你的.NET组件可以很简单地被scheduler执行</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleJob</span> <span class="token punctuation">:</span> IJob    <span class="token punctuation">{</span>        <span class="token keyword">public</span> Task <span class="token function">Execute</span><span class="token punctuation">(</span>IJobExecutionContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Console<span class="token punctuation">.</span>Out<span class="token punctuation">.</span><span class="token function">WriteLineAsync</span><span class="token punctuation">(</span>$<span class="token string">"执行作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>JobBuilder    根据设置，生成一个详细作业信息(JobDetail)。</p><p>JobBuilder是一个建造者模式，链式建造。通过静态方法构建一个JobBuilder实例，然后再调用类方法Build()创建一个IJobDetail的实现。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> JobBuilder <span class="token function">Create</span><span class="token punctuation">(</span>Type jobType<span class="token punctuation">)</span><span class="token punctuation">{</span>    JobBuilder b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">OfType</span><span class="token punctuation">(</span>jobType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>TriggerBuilder  根据规则，生产对应的Trigger，触发器可以规划执行任务</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810164955090-1595130121.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810164955090-1595130121.png" alt="img"></a></p><p>通过静态方法构建一个TriggerBuilder实例，然后再调用类方法Build()创建一个ITrigger的实现。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> TriggerBuilder <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 根据任务设置触发的开始时间和结束时间</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 开始时间</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="startTimeUtc">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> TriggerBuilder <span class="token function">StartAt</span><span class="token punctuation">(</span>DateTimeOffset startTimeUtc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        startTime <span class="token operator">=</span> startTimeUtc<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 结束时间</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="endTimeUtc">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> TriggerBuilder <span class="token function">EndAt</span><span class="token punctuation">(</span>DateTimeOffset<span class="token operator">?</span> endTimeUtc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        endTime <span class="token operator">=</span> endTimeUtc<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810211252009-1554131320.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810211252009-1554131320.png" alt="img"></a></p><p>1、创建一个ISchedulerFactory，然后并且获取 Scheduler</p><p>2、启动 Scheduler</p><p>3、创建 job 任务</p><p>4、创建 trigger 触发器</p><p>5、使用触发器规划执行任务</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>新建一个Quartz项目后,需要安装下面的程序包:</p><p>你可以用控制台命令的方式安装</p><pre class=" language-csharp"><code class="language-csharp">Install<span class="token operator">-</span>Package Quartz</code></pre><p>也可以使用下面这种方式选择安装版本</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810140058871-1160674530.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810140058871-1160674530.png" alt="img"></a></p><h3 id="一、创建一个scheduler的引用："><a href="#一、创建一个scheduler的引用：" class="headerlink" title="一、创建一个scheduler的引用："></a>一、创建一个scheduler的引用：</h3><pre class=" language-csharp"><code class="language-csharp">            ISchedulerFactory schedFact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IScheduler sched <span class="token operator">=</span> <span class="token keyword">await</span> schedFact<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二、启动-scheduler："><a href="#二、启动-scheduler：" class="headerlink" title="二、启动 scheduler："></a>二、启动 scheduler：</h3><pre class=" language-csharp"><code class="language-csharp">            <span class="token keyword">await</span> sched<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="三、实现IJob"><a href="#三、实现IJob" class="headerlink" title="三、实现IJob:"></a>三、实现IJob:</h3><p>ConsoleJob.cs 实现IJob，在Execute方法里编写要处理的业务逻辑，系统就会按照Quartz的配置，定时处理</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 实现IJob,Execute方法里编写要处理的业务逻辑</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleJob</span> <span class="token punctuation">:</span> IJob    <span class="token punctuation">{</span>        <span class="token keyword">public</span> Task <span class="token function">Execute</span><span class="token punctuation">(</span>IJobExecutionContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Console<span class="token punctuation">.</span>Out<span class="token punctuation">.</span><span class="token function">WriteLineAsync</span><span class="token punctuation">(</span>$<span class="token string">"ConsoleJob执行工作 在当前时间{DateTime.Now}--上一次执行时间：{DateTime.Now.AddSeconds(-5)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="四、创建trigger"><a href="#四、创建trigger" class="headerlink" title="四、创建trigger"></a>四、创建trigger</h3><p>（建立一个某个时间点的触发器，并且每5秒执行一次）</p><pre class=" language-csharp"><code class="language-csharp">            ITrigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//触发器 组</span>                <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="五、触发器执行任务："><a href="#五、触发器执行任务：" class="headerlink" title="五、触发器执行任务："></a>五、触发器执行任务：</h3><pre class=" language-csharp"><code class="language-csharp">            <span class="token keyword">await</span> sched<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将几个步骤整合后代码如下：</p><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 任务调度的使用过程</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token keyword">static</span> Task <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.创建scheduler的引用</span>            ISchedulerFactory schedFact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IScheduler sched <span class="token operator">=</span> <span class="token keyword">await</span> schedFact<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.启动 scheduler</span>            <span class="token keyword">await</span> sched<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.创建 job</span>            IJobDetail job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token generic-method function">Create<span class="token punctuation">&lt;</span>ConsoleJob<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.创建 trigger （创建 trigger 触发器）</span>            ITrigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//触发器 组</span>                <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5.使用trigger规划执行任务job （使用触发器规划执行任务）</span>            <span class="token keyword">await</span> sched<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>间隔5秒执行一次后的效果：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810142950161-1989743547.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810142950161-1989743547.png" alt="img"></a></p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>这里使用的quartz为3.x 版本，整个版本相对于2.0版本进行了大量的修改，正式支持了.NET Core 和async/await</p><p>引用<a href="https://www.cnblogs.com/shanyou/p/8269641.html">张队</a>文章的内容：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810202017163-509222503.png"><img src="https://img2018.cnblogs.com/blog/1576550/201908/1576550-20190810202017163-509222503.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.其实在实际项目中，可以将上面的方法进行封装处理，形成不同的任务，特别是处理多任务的时候，在不同的job中调用不同的trigger，后续会继续完善开发</p><p>2.quartz还有更多的用法，可以参考资料：<a href="https://www.quartz-scheduler.net/">Quartz.Net官方文档</a>  和 <a href="https://github.com/quartznet/quartznet">Quartz.Net开源地址</a></p><p>3.<a href="https://files-cdn.cnblogs.com/files/i3yuan/ConsoleQuartz.rar">项目源码地址</a></p>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quartz </tag>
            
            <tag> .Net/C# </tag>
            
            <tag> DotCore/C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由门禁系统引起的升级改造</title>
      <link href="2019/07/27/you-men-jin-xi-tong-yin-qi-de-sheng-ji-gai-zao/"/>
      <url>2019/07/27/you-men-jin-xi-tong-yin-qi-de-sheng-ji-gai-zao/</url>
      
        <content type="html"><![CDATA[<h1 id="由门禁系统引起的升级改造"><a href="#由门禁系统引起的升级改造" class="headerlink" title="由门禁系统引起的升级改造"></a>由门禁系统引起的升级改造</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 前阵子，公司大门口的指纹识别终端机器开始闹情绪了，经常出现识别不了，指纹识别速度有时快，有时慢，识别率忽高忽低，经常出现偏差错误， 最终导致指纹系统出现错乱的情况，可想而知，你连门都进不了，这班还怎么上呢？特别是现在天气热，赶着大热天去上班，汗流浃背的，连指尖都夹杂着汗水，心理特别想着赶紧到办公司里，坐在座位上，吹着空调，再喝上一杯快乐水，可没想到，赶到公司门口，对着指纹机拼命的按着，就是不让你识别通过，气死你，就只能在门外干等着，一天的好心情就这样给败坏了。</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727161611140-602779274.jpg"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727161611140-602779274.jpg" alt="img"></a></p><p> 不过没关系，总会办法进去的嘛，怎么说你也是公司员工，不可能把你拒之门外，这时候，前台的小姐姐就已经在门内帮你按下开门按钮了，嘿！还傻愣在哪干嘛呢，快进来啊！</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727153102417-1118370769.gif"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727153102417-1118370769.gif" alt="img"></a></p><p> 没过多久，部门在一次开早会的时候，有个同事就吐槽说，最近天气这么热，这指纹机器老是出问题，本来我还可以压哨打卡的，现在被它活生生拖到迟到了。是不是应该解决一下这个问题呢？领导一听，笑着说，你平时提早一点出门到公司不就解决了嘛。</p><p> 我就顺带说了句（此刻的我应该还没睡醒），说：要不把门口的指纹机换了吧，弄个人脸识别设备什么的，我看很多地方都开始投入使用人脸识别了，是不是我们也可以考虑采用这个，弄起来这样大门前看起来也高大上点嘛。正所谓说者无意听者有心， 领导一听，就说：嗯，这想法可以哦，之前也有人提议说过这个，我看这样吧，就把门口的指纹机换成人脸识别的吧，市面上也有很多人脸识别设备了，也比较成熟，可以引进了使用，这样一来可以提高大门的档次，二来嘛 也可以给你们了解了解接触一下什么是人脸识别门禁吧。行吧 ，就这么决定了。</p><p> 领导就这样一拍板的决定了。最后，大伙都知道，要落实这件事，总得有个人来负责吧，你看看我，我看看你的。这时候，部门经理就说：阿元，你来负责吧，你带着几个同事，先去了解一下，整理一下资料，出一个方案，然后我们再讨论一下，可以实施的话，就抓紧开始吧。</p><p> 我一听，啊？嗯？ 想了想，行吧，等会我去整理一下，就这样答应了。（其实当时的想法是这样的，一定是昨晚没睡好吧，才开始胡说八道，没想到就落我身上了（哭笑脸））</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727153133251-1940108994.png"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727153133251-1940108994.png" alt="img"></a></p><p> 就这样，经过了一段时间的搜索查询资料和咨询了这方面的业内人士。也总算整明白了。升级改造方案就此开始进行——</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>  人脸识别终端采用全新模具外观设计和行业领先的人脸识别技术，精确提取人脸特征，作为身份识别的依据，从而提供安全的、便捷的人员通行管理，是一款完全脱机的人脸识别门禁考勤产品，它定位于中高端门禁考勤市场，取代市场上的刷卡、指纹门禁考勤机。</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727161655016-1268184570.jpg"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727161655016-1268184570.jpg" alt="img"></a></p><p>人脸识别具有如下特性：</p><p>1、<strong>唯一性</strong>:每个人都有一张脸，且无法被复制，仿冒，因此安全性更高。</p><p>2、<strong>自然性好</strong>:人脸识别技术同人类（甚至其它生物）进行个体识别时所利用的生物特征相同，其他生物特征如指纹、虹膜不具备这个特征。</p><p>3、<strong>简单方便</strong>:无需携带卡,识别速度快，操作简单便捷</p><p>4、<strong>非接触性</strong>:无需接触设备，不用担心病毒的接触性传染,既卫生，又安全</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>  人脸识别技术融合了计算机图像处理技术与生物统计学原理于一体，利用计算机图像处理技术从视频中提取人像特征点，利用生物统计学的原理进行分析建立数学模型,即人脸特征模板。利用已建成的人脸特征模板与被测者的人的面像进行特征分析，根据分析的结果来给出一个相似值。通过这个值即可确定是否为同一人。人脸识别门禁系统就是把人脸识别和门禁系统结合，并且通过人脸识别作为门禁开启的要素之一。</p><table><thead><tr><th>系统功能</th><th>人脸建库</th></tr></thead><tbody><tr><td>人脸抓拍</td><td></td></tr><tr><td>图像传送</td><td></td></tr><tr><td>人脸比对</td><td></td></tr><tr><td>门禁控制</td><td></td></tr><tr><td>语音播报</td><td></td></tr><tr><td>记录查询</td><td></td></tr></tbody></table><h3 id="1、人脸建库"><a href="#1、人脸建库" class="headerlink" title="1、人脸建库"></a>1、人脸建库</h3><p>  在录入人脸库时，后台系统将客户图像信息导入人脸识别服务器人脸库，系统将登记入库的人像数据进行建模提取人脸的特征，并将其生成人脸模板（人脸特征文件）保存到数据库中，然后分发到各个人脸是被设备，使各设备都存储客户信息。</p><h3 id="2、人脸抓拍"><a href="#2、人脸抓拍" class="headerlink" title="2、人脸抓拍"></a>2、人脸抓拍</h3><p>  用摄像机或摄像头进行不间断视频录像，如有客户走到摄像头可视区域时，摄像头将客户的相关信息传送到后台人脸识别服务器。在一幅图像或视频流的一帧中检测出人像并将人像从背景中分离出来，并自动地将其保存。并利用人像捕获技术，当指定的人像在摄像头拍摄的可视区域中移动时自动地对其进行跟踪。</p><h3 id="3、图像传送"><a href="#3、图像传送" class="headerlink" title="3、图像传送"></a>3、图像传送</h3><p>  从摄像头获取的图像信息经过网络传送到交换机，再到人脸识别服务器。人脸服务器发送指令先经过交换机然后到达门禁控制器。</p><h3 id="4、人脸比对"><a href="#4、人脸比对" class="headerlink" title="4、人脸比对"></a>4、人脸比对</h3><p>  服务器收到摄像头传递过来的图像与客户人脸库中的图像一一进行比对，最终将根据所比对的相似值列出最相似的人员。</p><h3 id="5、门禁控制"><a href="#5、门禁控制" class="headerlink" title="5、门禁控制"></a>5、门禁控制</h3><p>  门禁控制器收到服务器传送过来的指令后，将指令转换为电信号，断开电磁锁，使电磁锁解锁，自动门打开。当客户进入到门内后电磁锁自动上锁，等待下一次控制。</p><h3 id="6、语音播报"><a href="#6、语音播报" class="headerlink" title="6、语音播报"></a>6、语音播报</h3><p>  若对比成功，音响发出“XXX客户欢迎光临”；若比对不成功，门禁状态不改变，音响发出提示信息；</p><h3 id="7、记录查询"><a href="#7、记录查询" class="headerlink" title="7、记录查询"></a>7、记录查询</h3><p>  系统将所有进入门内的客户图像进行分类储存，可按时间方式保存或其他方式保存，以供事后查询。</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190726220409367-1353660266.png"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190726220409367-1353660266.png" alt="img"></a></p><h2 id="系统组成"><a href="#系统组成" class="headerlink" title="系统组成"></a>系统组成</h2><p> 该系统由硬件设备（人脸识别终端、门禁控制器、门铃、电锁等），控制管理软件（人脸识别实时监控、人脸识别门禁考勤管理系统）组成。</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727153736690-1676171174.png"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727153736690-1676171174.png" alt="img"></a></p><h2 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190726220458111-477169632.png"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190726220458111-477169632.png" alt="img"></a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727165455233-275070605.gif"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727165455233-275070605.gif" alt="img"></a></p><p>  服务器将人脸进行一一比对，若比对成功之后，门禁控制器收到服务器传送过来的指令后，将指令转换为电信号，断开电磁锁，使电磁锁解锁，自动门打开。这样你也就可以大跨步的往前走了，再也不用麻烦前台小姐姐帮你开门了</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727164921721-2058523517.gif"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190727164921721-2058523517.gif" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>人脸识别门禁机，它采用行业领先的人脸识别技术，精确提取人脸特征，作为身份识别的依据，从而提供安全的、便捷的人员通行管理解决方案。</p></li><li><p>经过这一次，不仅了解了人脸识别这一行业，也结交了不少专业的业内人士。同时也感谢他们给予的帮助与支持。</p></li><li><p>如果有不对的地方，希望大家可以多多指正，提出问题。能更好的完善这一次的升级改造方案。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 位运算及实例计算</title>
      <link href="2019/07/07/c-wei-yun-suan-ji-shi-li-ji-suan/"/>
      <url>2019/07/07/c-wei-yun-suan-ji-shi-li-ji-suan/</url>
      
        <content type="html"><![CDATA[<h1 id="C-位运算及实例计算"><a href="#C-位运算及实例计算" class="headerlink" title="C# 位运算及实例计算"></a>C# 位运算及实例计算</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  平时在实际工作中很少用到这个，虽然都是一些比较基础的东西，但一旦遇到了，又不知所云。刚好最近接触了一些相关这方面的项目，所以也算是对 这些内容重新温习实践了一遍。所以这篇不仅作为个人备忘，也分享给各位重温一遍。</p><p>  要学会位运算，首先要清楚什么是位运算？程序中的所有内容在计算机内存中都是以二进制的形式储存的（即：0或1），位运算就是直接对在内存中的二进制数的每位进行运算操作。</p><p>了解：</p><p>  在C#中可以对整型运算对象按位进行逻辑运算。按位进行逻辑运算的意义是：依次取被运算对象的每个位，进行逻辑运算，每个位的逻辑运算结果是结果值的每个位</p><table><thead><tr><th>运算符号</th><th>意义</th><th>运算对象类型</th><th>运算结果类型</th><th>对象数</th><th>实例</th></tr></thead><tbody><tr><td>~</td><td>位逻辑<strong>非</strong>运算</td><td>整型，字符型</td><td>整型</td><td>1</td><td>~a</td></tr><tr><td>&amp;</td><td>位逻辑<strong>与</strong>运算</td><td>2</td><td>a &amp; b</td><td></td><td></td></tr><tr><td>|</td><td>位逻辑<strong>或</strong>运算</td><td>2</td><td>a | b</td><td></td><td></td></tr><tr><td>^</td><td>位逻辑<strong>异或</strong>运算</td><td>2</td><td>a ^ b</td><td></td><td></td></tr><tr><td>&lt;&lt;</td><td>位<strong>左移</strong>运算</td><td>2</td><td>a&lt;&lt;4</td><td></td><td></td></tr><tr><td>&gt;&gt;</td><td>位<strong>右移</strong>运算</td><td>2</td><td>a&gt;&gt;2</td><td></td><td></td></tr></tbody></table><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="一、位逻辑非运算"><a href="#一、位逻辑非运算" class="headerlink" title="一、位逻辑非运算"></a>一、位逻辑非运算</h3><p>  位逻辑非运算是单目的，只有一个运算对象。位逻辑非运算按位对运算对象的值进行非运算。符号为：~</p><p>即：如果某一位等于0，就将其转变为1；如果某一位等于1，就将其转变为0</p><p>对二进制的10010001进行位逻辑非运算，结果等于01101110</p><p>用十进制：~145等于110</p><h3 id="二、位逻辑与运算"><a href="#二、位逻辑与运算" class="headerlink" title="二、位逻辑与运算"></a>二、位逻辑与运算</h3><p>  位逻辑与运算将两个运算对象按位进行与运算。符号为&amp;。</p><p>运算规则为：1&amp;1=1；0&amp;1=0；0&amp;0=0</p><pre class=" language-csharp"><code class="language-csharp">            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 位运算与运算</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//11的二进制是0000 1011</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//13的二进制是0000 1101</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//11 &amp; 13的结果就是0000 1001 即结果是9</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><em><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190707210442322-636994216.png"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190707210442322-636994216.png" alt="img"></a></em></p><h3 id="三、位逻辑或运算"><a href="#三、位逻辑或运算" class="headerlink" title="三、位逻辑或运算"></a>三、位逻辑或运算</h3><p>  位逻辑或运算将两个运算对象按位进行或运算。符号为 |</p><p>运算规则为：1|1=1；1|0=1；0|0=0</p><pre class=" language-csharp"><code class="language-csharp">            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 位运算或运算</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//11的二进制是0000 1011</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//13的二进制是0000 1101</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//11 | 13的结果就是0000 1111 即结果是15</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><h3 id="四、位逻辑异或运算"><a href="#四、位逻辑异或运算" class="headerlink" title="四、位逻辑异或运算"></a>四、位逻辑异或运算</h3><p>  位逻辑异或运算将两个运算对象按位进行异或运算。符号为<strong>^</strong></p><p>运算规则：1^1=0；1^0=1；0^0=0 （相同得0，相异得1）</p><pre class=" language-csharp"><code class="language-csharp">            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 位运算异或运算</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//11的二进制是0000 1011</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//13的二进制是0000 1101</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//11 ^ 13的结果就是0000 0110 即结果是6</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><h3 id="五、位左移运算"><a href="#五、位左移运算" class="headerlink" title="五、位左移运算"></a>五、位左移运算</h3><p>  位左移运算将整个数按位左移若干位，左移后空出的部分0。符号为：&lt;&lt;</p><p>运算规则：a&lt;&lt;1 =a乘以2的1次方；a&lt;&lt;2 =a乘以2的2次方；a&lt;&lt;3 =a乘以2的3次方</p><pre class=" language-csharp"><code class="language-csharp">            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 位左移运算</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//11的二进制是0000 1011</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//0000 1011 左位移2位的结果就是0010 1100 即结果是44 (11*2^2=44)</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190707212717801-780350843.png"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190707212717801-780350843.png" alt="img"></a></p><h3 id="六、位右移运算"><a href="#六、位右移运算" class="headerlink" title="六、位右移运算"></a>六、位右移运算</h3><p>  位右移运算将整个数按位右移若干位，右移后空出的部分填0。符号为：&gt;&gt;</p><p>运算规则：<em>a&gt;&gt;1 = a整除2的1次方；**</em>a&gt;&gt;2 = a整除2的2次方；**<strong><em>a&gt;&gt;3 = a整除2的3次方</em></strong></p><pre class=" language-csharp"><code class="language-csharp">            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 位右移运算</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//11的二进制是0000 1011</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a <span class="token operator">></span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//0000 1011 右位移2位的结果就是0000 0010 即结果是2 (11÷(2^2)=2)</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p> <a href="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190707213413246-138125855.png"><img src="https://img2018.cnblogs.com/blog/1576550/201907/1576550-20190707213413246-138125855.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>位运算，虽然平时很少用到位运算符，但是在某些时候，这些确实能够给我们提供很好的解决方案。</p></li><li><p>在实际应用中，不断的重温基础的知识，加强巩固。毕竟很多时候，只有将基础的知识打牢固，后续才能更好的功能拓展和衍生</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【干货分享】C# 实体类生成工具</title>
      <link href="2019/06/22/gan-huo-fen-xiang-c-shi-ti-lei-sheng-cheng-gong-ju/"/>
      <url>2019/06/22/gan-huo-fen-xiang-c-shi-ti-lei-sheng-cheng-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="【干货分享】C-实体类生成工具"><a href="#【干货分享】C-实体类生成工具" class="headerlink" title="【干货分享】C# 实体类生成工具"></a>【干货分享】C# 实体类生成工具</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 项目实战中不论是业务编码还是通用编码，总会归纳出一些通用的工具类。放入项目中一劳永逸，让兄弟姐妹们避免编写重复代码。所以利用了工作之余的时间，将这些散落在多个项目中精致优雅的工具类，归纳起来形成工程，方便后续工作的使用和便捷开发。</p><p>根据实际需求，编写了此工具。目前只支持SQLServer数据库，不过我自己有时间也会完成其他数据库支持的，有兴趣的读者可以继续扩展支持其他数据库。</p><p><strong>功能</strong>：</p><ol><li>能自动获得用户数据库中的所有数据表；</li><li>能根据用户所选的数据表，自动生成实体类；</li><li>能自动产生 C# 实体类的(*.cs)代码文件；</li></ol><h2 id="实体工具："><a href="#实体工具：" class="headerlink" title="实体工具："></a>实体工具：</h2><h3 id="一、界面截图"><a href="#一、界面截图" class="headerlink" title="一、界面截图"></a>一、界面截图</h3><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190622223321402-654656107.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190622223321402-654656107.png" alt="img"></a></p><h3 id="二、SQL语句部分代码"><a href="#二、SQL语句部分代码" class="headerlink" title="二、SQL语句部分代码"></a>二、SQL语句部分代码</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">----1. 获取所有的数据库名-----</span><span class="token keyword">SELECT</span> NAME <span class="token keyword">FROM</span> MASTER<span class="token punctuation">.</span>DBO<span class="token punctuation">.</span>SYSDATABASES <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> NAME<span class="token comment" spellcheck="true">-----2. 获取所有的表名------</span><span class="token keyword">SELECT</span> NAME <span class="token keyword">FROM</span> SYSOBJECTS <span class="token keyword">WHERE</span> XTYPE<span class="token operator">=</span><span class="token string">'U'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> NAME<span class="token comment" spellcheck="true">--XTYPE='U':表示所有用户表;</span><span class="token comment" spellcheck="true">--XTYPE='S':表示所有系统表;</span><span class="token keyword">SELECT</span> NAME <span class="token keyword">FROM</span> SYSOBJECTS <span class="token keyword">WHERE</span> <span class="token keyword">TYPE</span> <span class="token operator">=</span> <span class="token string">'U'</span> <span class="token operator">AND</span> SYSSTAT <span class="token operator">=</span> <span class="token string">'83'</span><span class="token comment" spellcheck="true">----注意：一般情况只需要TYPE = 'U'，但有时候会有系统表混在其中（不知道什么原因），加上后面一句后就能删除这些系统表了。</span></code></pre><h3 id="三、C-部分代码"><a href="#三、C-部分代码" class="headerlink" title="三、C#部分代码"></a>三、C#部分代码</h3><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 获取所有数据库</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="connection">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>DbTable<span class="token operator">></span> <span class="token function">GetAllDataBaseName</span><span class="token punctuation">(</span><span class="token keyword">string</span> connection<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>DbTable<span class="token operator">></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>DbTable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> ConnString <span class="token operator">=</span> <span class="token string">"select name from Master.sys.SysDatabases order by name"</span><span class="token punctuation">;</span>            SqlConnection connect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlCommand</span><span class="token punctuation">(</span>ConnString<span class="token punctuation">,</span> connect<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>connect<span class="token punctuation">.</span>State <span class="token operator">==</span> ConnectionState<span class="token punctuation">.</span>Closed<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    connect<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    IDataReader dr <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    dic<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>dr<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DbTable</span> <span class="token punctuation">{</span> <span class="token keyword">value</span> <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    dr<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AggregateException</span><span class="token punctuation">(</span><span class="token string">"获得数据库地址错误，你想上天吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>connect <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> connect<span class="token punctuation">.</span>State <span class="token operator">==</span> ConnectionState<span class="token punctuation">.</span>Open<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    connect<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> dic<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><pre class=" language-csharp"><code class="language-csharp">        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 写文件</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="fileName">文件完整路径&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="content">内容&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">WriteAndSave</span><span class="token punctuation">(</span><span class="token keyword">string</span> fileName<span class="token punctuation">,</span> <span class="token keyword">string</span> content<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化一个文件流--->与写入文件相关联</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//实例化一个StreamWriter-->与fs相关联</span>                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamWriter</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//开始写入</span>                    sw<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//清空缓冲区</span>                    sw<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//关闭流</span>                    sw<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    fs<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="四、工具下载"><a href="#四、工具下载" class="headerlink" title="四、工具下载"></a>四、工具下载</h3><p><a href="https://files-cdn.cnblogs.com/files/i3yuan/CodeTool.rar">实体类生成工具</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.避免编写重复代码，编写此工具生成实体类快速开发。</p><p>2.这类工具在网上已有不少，但是自己可以归纳起来形成工程，放入项目中，不仅自己从中可以学到新的知识也同时提升了自己的总结归纳能力。</p><p>3.此工具还未完善，只支持SQLServer数据库，不过我自己有时间也会完成其他数据库支持的，有兴趣的读者可以继续扩展支持其他数据库。</p><p>4.如果有不对的或不理解的地方，希望大家可以多多指正，提出问题，才能站在更多用户角度，编写了出更便捷实用的工具。</p>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core部署系列二：发布到CentOS上</title>
      <link href="2019/06/15/asp.net-core-bu-shu-xi-lie-er-fa-bu-dao-centos-shang/"/>
      <url>2019/06/15/asp.net-core-bu-shu-xi-lie-er-fa-bu-dao-centos-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="ASP-NET-Core部署系列二：发布到CentOS上"><a href="#ASP-NET-Core部署系列二：发布到CentOS上" class="headerlink" title="ASP.NET Core部署系列二：发布到CentOS上"></a>ASP.NET Core部署系列二：发布到CentOS上</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 在<a href="https://www.cnblogs.com/i3yuan/p/10988358.html">上一节</a>中，通过一系列的步骤，已经将项目部署到IIS上，虽然遇到了一些问题，但最终解决并成功运行了。而在这一节中，将尝试通过linux系统的环境下,部署项目，实现Net Core跨平台的亮点。</p><p>虽然网上已经有很多关于asp.net core在linux下的部署教程了，但我还是想写一篇，主要增强我自己的记忆，同时分享下我部署遇到的坑。</p><p>我在我电脑win7的操作系统中用来虚拟机建了个CentOS7,来演示，我们的项目如何发布在Linux上运行。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="一、安装-Dotnet-Core-2-2"><a href="#一、安装-Dotnet-Core-2-2" class="headerlink" title="一、安装.Dotnet Core 2.2"></a>一、安装.Dotnet Core 2.2</h3><p> Linux上运行Dotnet Core程序的前提是安装Dotnet Core Runtime，如果想要在Linux做 .NET Core的开发和编译工作，那么需要安装 <a href="https://dotnet.microsoft.com/download/linux-package-manager/centos/sdk-current">Dotnet Core SDK</a>。Dotnet Core SDK中包括了Dotnet Core Runtime，所以这里就直接安装了Dotnet Core SDK</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615164520341-1759462081.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615164520341-1759462081.png" alt="img"></a></p><p> Step 1：安装Dotnet产品的必要前提</p><p> 在安装Dotnet Core前，需要注册Microsoft签名密钥并添加Microsoft产品提要，每台机器只需注册一次，执行如下命令：</p><pre><code>sudo rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm</code></pre><p> Step 2：安装Dotnet Core SDk，执行下列命令</p><pre><code>sudo yum updateysudo yum install dotnet-sdk-2.2y  大家注意，会有两个“y”的原因是，命令执行的中途停顿了，让你确认下是否进行安装，你要输入“y”确认安装才会执行安装  安装完后，我们输入如下命令看下是否安装成功</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615164930802-494875697.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615164930802-494875697.png" alt="img"></a></p><h3 id="二、部署Asp-net-Core-应用程序"><a href="#二、部署Asp-net-Core-应用程序" class="headerlink" title="二、部署Asp.net Core 应用程序"></a>二、部署Asp.net Core 应用程序</h3><p> <strong>在CentOS系统中，新建publish文件夹</strong></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615165147367-987774383.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615165147367-987774383.png" alt="img"></a></p><p> 上传<a href="https://www.cnblogs.com/i3yuan/p/10988358.html">上一节</a>发布的文件到至/home/publish/。</p><p> 这边我使用了Xftp进行文件的上传。（如果是在本地虚拟机操作的话，也可以直接复制到系统对应的文件夹目录下）</p><p> <strong>进入目录：cd publish</strong></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615165405145-1868405077.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615165405145-1868405077.png" alt="img"></a></p><p>  <strong>检查是否可以运行：dotnet LCzarCms.Admin.dll</strong></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615165437438-917731895.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615165437438-917731895.png" alt="img"></a></p><p> 如果出现这些信息则表示成功运行</p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615165453321-1804454540.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615165453321-1804454540.png" alt="img"></a></p><p> 到此，项目就运行成功了，这时候我们是无法访问到这个页面的，这时候我们需要部署一个web容器来进行转发，我们可能还要安装 nginx 、配置我们的 FireWall 以及配置守护服务 Supervisor 等等</p><h3 id="三、配置Nginx托管"><a href="#三、配置Nginx托管" class="headerlink" title="三、配置Nginx托管"></a>三、配置Nginx托管</h3><p> 微软官方提供的<a href="https://docs.microsoft.com/zh-cn/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-2.2#monitor-the-app%EF%BC%8C%E6%8A%8Adotnet%E5%88%9B%E5%BB%BA%E6%88%90%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1">https://docs.microsoft.com/zh-cn/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-2.2#monitor-the-app，把dotnet创建成一个服务</a></p><p> <strong>安装nginx</strong></p><pre class=" language-bash"><code class="language-bash">curl -o  nginx.rpm http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170106969-330192408.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170106969-330192408.png" alt="img"></a></p><pre class=" language-shell"><code class="language-shell"> rpm -ivh nginx.rpm</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170144495-1390746366.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170144495-1390746366.png" alt="img"></a></p><pre class=" language-shell"><code class="language-shell">yum install nginx</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170216719-1658333328.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170216719-1658333328.png" alt="img"></a></p><p> <strong>启动</strong> <strong>Nginx</strong>：</p><pre class=" language-shell"><code class="language-shell">systemctl start nginx</code></pre><p> <strong>设置开机启动</strong>（linux宕机、重启会自动运行nginx不需要连上去输入命令）：</p><pre class=" language-shell"><code class="language-shell">systemctl enable nginx</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170321208-468281574.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170321208-468281574.png" alt="img"></a></p><h3 id="四、配置防火墙"><a href="#四、配置防火墙" class="headerlink" title="四、配置防火墙"></a>四、配置防火墙</h3><p> <strong>开放80端口</strong>：</p><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --add-port=80/tcp –permanent</code></pre><p> <strong>重启防火墙以使配置即时生效</strong>：</p><pre class=" language-shell"><code class="language-shell">systemctl restart firewalld</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170501351-1892243798.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170501351-1892243798.png" alt="img"></a></p><p> <strong>测试nginx是否可以访问</strong></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170517984-2072450028.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170517984-2072450028.png" alt="img"></a></p><h3 id="五、配置Nginx对ASP-net-Core-应用的转发"><a href="#五、配置Nginx对ASP-net-Core-应用的转发" class="headerlink" title="五、配置Nginx对ASP.net Core 应用的转发"></a>五、配置Nginx对ASP.net Core 应用的转发</h3><p> <strong>修改Nginx的default.conf文件</strong></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170621321-2053993723.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170621321-2053993723.png" alt="img"></a></p><p> 将文件内容替换为：</p><pre class=" language-shell"><code class="language-shell">server {    listen 80;    location / {        proxy_pass http://localhost:5000;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection keep-alive;        proxy_set_header Host $host;        proxy_cache_bypass $http_upgrade;    }}</code></pre><p> 进行修改覆盖</p><p> <strong>重新加载，即时生效</strong>：</p><pre class=" language-shell"><code class="language-shell">nginx -s reload</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170820720-44536001.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170820720-44536001.png" alt="img"></a></p><p> 再次运行ASP.NET Core应用程序</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170838729-516777564.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170838729-516777564.png" alt="img"></a></p><p> 但是，测试我们再次浏览运行的时候，会出现如下这种情况：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170926935-691393282.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615170926935-691393282.png" alt="img"></a></p><p> 这是什么情况？经过后续了解，这个问题是由于SELinux保护机制所导致，我们需要将nginx添加至SELinux的白名单</p><p> 接下来我们通过一些命令解决这个问题</p><pre class=" language-shell"><code class="language-shell">①   yum install policycoreutils-python</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171012901-492396132.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171012901-492396132.png" alt="img"></a></p><pre class=" language-shell"><code class="language-shell">②     sudo cat /var/log/audit/audit.log | grep nginx | grep denied | audit2allow -M mynginx</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171110113-1588533631.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171110113-1588533631.png" alt="img"></a></p><pre class=" language-shell"><code class="language-shell">③     sudo semodule -i mynginx.pp</code></pre><p> 我们再次访问运行一下：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171203441-903715426.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171203441-903715426.png" alt="img"></a></p><p> 这次已经可以成功的运行起来了。</p><p> <strong>至此基本完成了部署</strong>。</p><p>但是，我们还是存在着其他的问题：</p><p> 1.<strong>ASP.NET Core</strong>应用程序运行在<strong>shell</strong>之中，如果关闭<strong>shell</strong>则会发现<strong>ASP.NET Core</strong>应用被关闭，从而导致应用无法访问，这种情况当然是我们不想遇到的，而且生产环境对这种情况是零容忍的。</p><p> 2.<strong>如果</strong>ASP.NET Core<strong>进程意外终止那么需要人为连进shell进行再次启动，往往这种操作都不够及时。</strong></p><p> 3.<strong>如果服务器宕机或需要重启我们则还是需要连入shell进行启动</strong>。</p><p> 为了解决这些问题，我们需要有一个程序来监听ASP.NET Core 应用程序的状况。</p><p> 那么要解决这些问题，我们就必须要实现这么一个功能：如果ASP.NET Core 意外终止，那么我们要自动重启；如果服务器服务器重启后，我们要有个类似脚本命令一样，自动执行 dotnet 命令。现在正好有个基于 Python 开发的工具 Supervisor 可以解决我们上述问题</p><p>六、配置Supervisor守护服务</p><p> 在应用程序停止运行的时候立即重新启动。这边我们用到了Supervisor这个工具，Supervisor使用Python开发的。</p><p> <strong>安装Supervisor</strong>：</p><pre class=" language-shell"><code class="language-shell">yum install python-setuptools</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171828889-638782086.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171828889-638782086.png" alt="img"></a></p><pre class=" language-shell"><code class="language-shell">easy_install supervisor</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171855299-1195992512.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615171855299-1195992512.png" alt="img"></a></p><p> <strong>配置Supervisor</strong>：</p><p>①运行supervisord 服务的时候，需要指定 Supervisor 配置文件，所以，先通过如下命令创建目录，以便让 supervisor 成功加载默认配置：</p><pre class=" language-shell"><code class="language-shell">mkdir /etc/supervisor</code></pre><p>②目录创建成功后, 通过 echo_supervisord_conf 程序（用来生成初始配置文件,文件名可以自定义）来初始化一个配置文件： </p><pre class=" language-shell"><code class="language-shell">echo_supervisord_conf > /etc/supervisor/supervisord.conf</code></pre><p>③通过vim命令修改创建好的supervisord.conf配置信息：</p><pre class=" language-shell"><code class="language-shell">vi /etc/supervisor/supervisord.conf</code></pre><p>④最下边找到如下文本片段：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172045505-288073919.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172045505-288073919.png" alt="img"></a></p><p> 修改为：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172056907-850403774.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172056907-850403774.png" alt="img"></a></p><p> <strong>为我们部署的.NET Core添加进程配置文件</strong>：</p><p>①创建配置文件LCzarCmsAdmin.ini(文件名自定义)</p><pre class=" language-shell"><code class="language-shell">[program:LCzarCmsAdmin]command=dotnet /root/publish/LCzarCms.Admin.dlldirectory=/root/publish/autostart=trueautorestart=truestderr_logfile=/var/log/LCzarCms.err.logstdout_logfile=/var/log/LCzarCms.out.logenvironment=ASPNETCORE_ENVIRONMENT=Productionuser=rootstopsignal=INT</code></pre><p>②在/etc/supervisor/目录下创建一个文件夹conf.d</p><pre class=" language-shell"><code class="language-shell">mkdir /etc/supervisor/conf.d/</code></pre><p> 将刚创建的配置文件LCzarCmsAdmin.ini移到conf.d文件夹下</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172339866-884463152.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172339866-884463152.png" alt="img"></a></p><p> 如果服务已经启动，则需要使用 supervisorctl reload 命令来使新的配置生效，当然，我们这里并没有启动，所以不需要这一步。</p><p> <strong>启动 Supervisor 服务</strong></p><pre class=" language-shell"><code class="language-shell">supervisord -c /etc/supervisor/supervisord.conf</code></pre><p> <strong>启动服务后，我们可以检测看一下</strong>：</p><pre class=" language-shell"><code class="language-shell">ps -ef | grep LCzarCms.Admin.dll</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172542403-1508420852.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172542403-1508420852.png" alt="img"></a></p><p> 这个时候, 我们已经不需要使用dotnet命令运行程序, 同样可以访问我们部署的.NET Core程序了。</p><p> <strong>至此关于ASP.NET Core应用程序的守护即配置完成</strong>。</p><p>七、配置Supervisor开机启动：</p><p>①进入/usr/lib/systemd/system/目录，并创建supervisord.service文件(或者在本地写好了再通过ftp工具传输到指定目录下)</p><pre class=" language-shell"><code class="language-shell">vi /usr/lib/systemd/system/supervisord.service</code></pre><p> 修改文件</p><pre class=" language-shell"><code class="language-shell">[Unit]Description=Supervisor daemon[Service]Type=forkingExecStart=/usr/bin/supervisord -c /etc/supervisor/supervisord.confExecStop=/usr/bin/supervisorctl $OPTIONS shutdownExecReload=/usr/bin/supervisorctl $OPTIONS reloadKillMode=processRestart=on-failureRestartSec=42s</code></pre><p>②设置开机启动</p><p> 激活开机启动：</p><pre class=" language-shell"><code class="language-shell">systemctl enable supervisord.service</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172847010-292877124.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615172847010-292877124.png" alt="img"></a></p><p> 启动supervisor进程：</p><pre class=" language-shell"><code class="language-shell">systemctl start supervisord.servicesystemctl daemon-reload</code></pre><p> 验证一下是否为开机启动：</p><pre class=" language-shell"><code class="language-shell">systemctl is-enabled supervisord</code></pre><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615173001736-962815921.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190615173001736-962815921.png" alt="img"></a></p><p> 重启，测试是否可以开机自启</p><p> <strong>好了。最终也成功的在重启之后，可以访问地址。</strong></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>在虚拟机上安装CentOS7操作系统，这里就不做具体的安装内容了，可以参考<a href="https://www.jianshu.com/p/ce08cdbc4ddb">VMwear安装Centos7</a></p></li><li><p>学习了linux(CentOS) 环境下，新建、删除、移动文件夹和文件的命令。同时，Linux下路径是区分目录大小写的</p></li><li><p>很多东西都是翻阅了网上大神的资料加上自己的实践理解总结记录的。如果有不对的或不理解的地方，希望大家可以指正和多多交流</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NetCore </tag>
            
            <tag> 部署环境 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发 —— 用户管理</title>
      <link href="2019/05/31/wei-xin-gong-zhong-hao-kai-fa-yong-hu-guan-li/"/>
      <url>2019/05/31/wei-xin-gong-zhong-hao-kai-fa-yong-hu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="微信公众号开发-——-用户管理"><a href="#微信公众号开发-——-用户管理" class="headerlink" title="微信公众号开发 —— 用户管理"></a>微信公众号开发 —— 用户管理</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 微信公众号提供了用户和用户组的管理,我们可以在微信公众号官方里面进行操作，添加备注和标签,以及移动用户组别，同时,微信公众号提供了相应的接口方便我们调用，可方便的把用户同步到本地,这样我们可以自己为用户定义更多的信息，以及与本地的业务更好的对接起来。以方便做各种应用分析。所以本节内容主要是用户和用户组的管理。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="用户关注与退订事件"><a href="#用户关注与退订事件" class="headerlink" title="用户关注与退订事件"></a>用户关注与退订事件</h3><p> 在之前的<a href="https://www.cnblogs.com/i3yuan/p/10850169.html">消息处理</a>中，我们在UserMessageHandler.cs，需要继承Senparc.Weixin.MP.MessageHandlers<TC>这个抽象类,并重写所有方法，在这里面，我们可以添加2个事件，一个是用户关注时候触发事件，一个是退订时候触发事件</p><pre class=" language-c#"><code class="language-c#">public override IResponseMessageBase OnEvent_ScanRequest(RequestMessageEvent_Scan requestMessage){    //通过扫描关注    var responseMessage = CreateResponseMessage<ResponseMessageText>();    responseMessage.Content = responseMessage.Content ?? string.Format("通过扫描二维码进入，场景值：{0}", requestMessage.EventKey);    return responseMessage;}/// <summary>/// 订阅（关注）事件/// </summary>/// <returns></returns>public override IResponseMessageBase OnEvent_SubscribeRequest(RequestMessageEvent_Subscribe requestMessage){    var responseMessage = base.CreateResponseMessage<ResponseMessageText>();    responseMessage.Content = "欢迎关注";    return responseMessage;}/// <summary>/// 退订/// 实际上用户无法收到非订阅账号的消息，所以这里可以随便写。/// unsubscribe事件的意义在于及时删除网站应用中已经记录的OpenID绑定，消除冗余数据。并且关注用户流失的情况。/// </summary>/// <returns></returns>public override IResponseMessageBase OnEvent_UnsubscribeRequest(RequestMessageEvent_Unsubscribe requestMessage){    var responseMessage = base.CreateResponseMessage<ResponseMessageText>();    responseMessage.Content = "有空再来";    return responseMessage;}</code></pre><h3 id="设计数据库"><a href="#设计数据库" class="headerlink" title="设计数据库"></a>设计数据库</h3><p> 根据<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140837">微信公众号开发文档</a>，用户管理对应字段而建立，基本与官方提供的用户信息是一样的</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190531223005351-850556524.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190531223005351-850556524.png" alt="img"></a></p><p> 建立用户组管理表(WX_Group)和用户表(WX_User)</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190531223245289-169059907.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190531223245289-169059907.png" alt="img"></a>   <a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190531223410098-1720532985.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190531223410098-1720532985.png" alt="img"></a></p><h3 id="提交同步数据"><a href="#提交同步数据" class="headerlink" title="提交同步数据"></a>提交同步数据</h3><p> 接口的实现方式我们使用了开源的Senparc.Weixin提供的专业的微信操作SDK来快速完成操作，在Senparc WX SDK下的Senparc.Weixin.MP.AdvancedAPIs ，通过OpenID到公众号同步到数据，再将本地数据修改。</p><pre class=" language-c#"><code class="language-c#">        /// <summary>        /// 同步数据        /// </summary>        /// <param name="id">用户id</param>        /// <param name="officeId">对应的公众号id</param>        /// <returns></returns>        [HttpPost]        [SupportFilter]        public JsonResult SyncUser(string id,string officeId)        {            if (!string.IsNullOrWhiteSpace(id))            {                //填充数据                string[] arrs = id.Split(',');                List<BatchGetUserInfoData> list = new List<BatchGetUserInfoData>();                foreach (var m in arrs)                {                    list.Add(new BatchGetUserInfoData() {                        openid = m,                        lang = "zh-CN",                        LangEnum = Senparc.Weixin.Language.zh_CN                    });                }                //批量同步数据                WC_OfficalAccountsModel accountModel =  account_BLL.GetById(officeId);                var batchList =  Senparc.Weixin.MP.AdvancedAPIs.UserApi.BatchGetUserInfo(accountModel.AccessToken, list);                foreach (var info in batchList.user_info_list)                {                    WC_UserModel userModel = m_BLL.GetById(info.openid);                    if (userModel != null)                    {                        userModel.City = info.city;                        userModel.OpenId = info.openid;                        userModel.Id = info.openid;                        userModel.HeadImgUrl = info.headimgurl;                        userModel.Language = info.language;                        userModel.NickName = info.nickname;                        userModel.Province = info.province;                        userModel.Sex = info.sex;                        m_BLL.Edit(ref errors, userModel);                    }                }                LogHandler.WriteServiceLog(GetUserId(), "Ids:" + id, "成功", "删除", "WX_User");                return Json(JsonHandler.CreateMessage(1, Resource.SaveSucceed));            }            else            {                return Json(JsonHandler.CreateMessage(0, Resource.SaveFail));            }        }</code></pre><p>通过以上方式，将用户和分组的方式同步提交，实现用户的分组。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>实现用户的分组，能更好的对关注者进行管理和分析业务应用</p></li><li><p>使用了开源的Senparc.Weixin，可以快速的实现分组和同步数据</p></li><li><p>参考<a href="https://github.com/JeffreySu/WeiXinMPSDK">官网示例源代码</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> 微信开发 </tag>
            
            <tag> 公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core部署系列一：发布到IIS上</title>
      <link href="2019/05/19/asp.net-core-bu-shu-xi-lie-yi-fa-bu-dao-iis-shang/"/>
      <url>2019/05/19/asp.net-core-bu-shu-xi-lie-yi-fa-bu-dao-iis-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="ASP-NET-Core部署系列一：发布到IIS上"><a href="#ASP-NET-Core部署系列一：发布到IIS上" class="headerlink" title="ASP.NET Core部署系列一：发布到IIS上"></a>ASP.NET Core部署系列一：发布到IIS上</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 当构建一个ASP.NET Core应用程序并且计划将其运行在IIS中时，你会发现Core应用程序和之前版本的ASP.NET程序在IIS中的运行方式是完全不一样的。与ASP.NET时代不同，ASP.NET Core不再是由IIS工作进程（w3wp.exe）托管，而是使用自托管Web服务器（Kestrel）运行，IIS则是作为反向代理的角色转发请求到Kestrel不同端口的ASP.NET Core程序中，随后就将接收到的请求推送至中间件管道中去，处理完你的请求和相关业务逻辑之后再将HTTP响应数据重新回写到IIS中，最终转达到不同的客户端（浏览器，APP，客户端等）。而配置文件和过程都会由些许调整，中间最重要的角色便是AspNetCoreModule，它是其中一个的IIS模块，请求进入到IIS之后便立即由它转发，并迅速重定向到ASP.NET Core项目中，所以这时候我们无需设置应用程序池来托管我们的代码，它只负责转发请求而已。</p><p>回顾之前的ASP.NET的经典托管</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607145203938-1253744508.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607145203938-1253744508.png" alt="img"></a></p><p>  在经典ASP.NET应用程序中，所有一切都托管在IIS工作进程中（w3wp.exe）,这也被称为IIS应用程序池。ASP.NET程序被托管在应用程序池中，并且被按照IIS内建的ASP.NET托管特性所实例化。当请求从http.sys传入到ASP.NET应用程序管道时，本地运行时管理器会实例化一个代表应用程序的.NET运行时，同时引入HttpRuntime对象用来处理这个请求。来自http.sys的请求被派送到对应的应用程序池和HttpRuntime实例的托管站点。</p><p>ASP.NET CORE与IIS</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607145324449-1002464532.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607145324449-1002464532.png" alt="img"></a></p><p> ASP.NET Core则完全不同，它并不是运行在IIS的工作进程中，而是独立运行的。它运行于控制台应用程序之中，控制台中则运行了Kestrel Web服务器组件。Kestrel作为一款.NET Web服务器的实现，它在吞吐量性能方面做了很多工作。它可以快速将来自网络的请求接入到应用程序中，但是它仅仅是一个最基本的Web服务器。它没有类似IIS的Web管理服务，也没有IIS那么多的功能。</p><p> ASP.NET Core程序独立运行在控制台应用程序中，并通过dotnet运行时命令调用。它并没有被加载到IIS工作进程中，但是IIS却加载了名为AspNetCoreModule的本地Module，这个Module用于执行外部的控制台程序。AspNetCoreModule是作为ASP.NET Core Server Hosting Bundle的一部分被安装在服务器上的。</p><p> 部署之前要确保你的IIS上已经安装了AspNetCoreModule托管模块，如果没有的话，点击<a href="https://go.microsoft.com/fwlink/?linkid=844461">这里</a>进行下载并安装</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607151708247-881286079.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607151708247-881286079.png" alt="img"></a></p><h2 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h2><h3 id="一、安装IIS"><a href="#一、安装IIS" class="headerlink" title="一、安装IIS"></a>一、安装IIS</h3><p> 在控制面板→程序→启用或关闭Windows功能→勾选Internet Information Services以及Web管理工具下的IIS管理控制台</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607152102307-1742051109.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607152102307-1742051109.png" alt="img"></a></p><h3 id="二、发布项目"><a href="#二、发布项目" class="headerlink" title="二、发布项目"></a>二、发布项目</h3><p> 发布我们建好的ASP.NET Core项目，然后选择IIS，新建一项发布配置</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607152542818-2086981550.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607152542818-2086981550.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607152833151-733469586.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607152833151-733469586.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607152848686-1465451690.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607152848686-1465451690.png" alt="img"></a></p><h3 id="三、在IIS上绑定添加网站"><a href="#三、在IIS上绑定添加网站" class="headerlink" title="三、在IIS上绑定添加网站"></a>三、在IIS上绑定添加网站</h3><p> 添加一个网站，设置一下名称，并将路径指向你刚才发布的文件夹，然后启动网站即可</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607153500048-1510785388.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607153500048-1510785388.png" alt="img"></a></p><p> 设置应用程序池的.NET CLR版本为“无托管代码”，因为刚才也说了，IIS是作为一个反向代理的角色，并不需要它来托管代码</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607153838163-453542768.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607153838163-453542768.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607154321630-216141828.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607154321630-216141828.png" alt="img"></a></p><h3 id="四、浏览网站"><a href="#四、浏览网站" class="headerlink" title="四、浏览网站"></a>四、浏览网站</h3><p> 这个时候出现了这个问题</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607154556586-1503870082.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607154556586-1503870082.png" alt="img"></a></p><h3 id="五、错误分析"><a href="#五、错误分析" class="headerlink" title="五、错误分析"></a>五、错误分析</h3><p>IIS服务器上的.net core 运行时不是最新的,导致AspNetCoreModuleV2模块缺失或者报错</p><p>检查发现 项目的版本是 .netcore2.2 ，而运行时安装的为 .netcore runtime 2.1.6</p><p>查看程序 如果没有安装.netcore2.2 就需要安装</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607154907650-1285569613.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607154907650-1285569613.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607154924200-219466467.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607154924200-219466467.png" alt="img"></a></p><p>下载完成后安装</p><p>就可以打开网站了</p><h3 id="六、效果"><a href="#六、效果" class="headerlink" title="六、效果"></a>六、效果</h3><p><a href="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607161812504-1350029402.png"><img src="https://img2018.cnblogs.com/blog/1576550/201906/1576550-20190607161812504-1350029402.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 至此，整个IIS的搭建已经完成，作为个人的笔记记录备忘，同时也共享出来，不知道你是否有所收获。接下来会遇到什么样坑。不管怎样，你的每一步，回过头来看，都是值得的</p>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NetCore </tag>
            
            <tag> 部署环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发 —— 自定义菜单</title>
      <link href="2019/05/19/wei-xin-gong-zhong-hao-kai-fa-zi-ding-yi-cai-dan/"/>
      <url>2019/05/19/wei-xin-gong-zhong-hao-kai-fa-zi-ding-yi-cai-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="微信公众号开发-——-自定义菜单"><a href="#微信公众号开发-——-自定义菜单" class="headerlink" title="微信公众号开发 —— 自定义菜单"></a>微信公众号开发 —— 自定义菜单</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   回顾之前的<a href="https://www.cnblogs.com/i3yuan/p/10802410.html">微信公众号配置</a>和<a href="https://www.cnblogs.com/i3yuan/p/10850169.html">消息处理</a>的内容，我们已经掌握了如何配置服务器与微信公众号建立连接，也掌握了通过消息管理的方式，对用户的信息进行处理，完成公众号消息回复功能，实现公众号与用户之间的完整对话。而在本文将针对自定义菜单做简单的开发应用，微信公众平台具有自定义菜单的功能。开发者可利用该功能为公众账号的会话界面底部增加自定义菜单，用户点击菜单中的选项，可以调出相应的回复信息或网页链接。自定义菜单接口将为公众账号的信息展示空间提供更多可能性。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><pre><code> 1、自定义菜单最多包括3个一级菜单，每个一级菜单最多包含5个二级菜单。 2、一级菜单最多4个汉字，二级菜单最多7个汉字，多出来的部分将会以“...”代替。 3、创建自定义菜单后，菜单的刷新策略是，在用户进入公众号会话页或公众号profile页时，如果发现上一次拉取菜单的请求在5分钟以前，就会拉取一下菜单，如果菜单有更新，就会刷新客户端的菜单。测试时可以尝试取消关注公众账号后再次关注，则可以看到创建后的效果。</code></pre><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>   自定义菜单接口可实现多种类型按钮，如下：</p><pre><code> 1、click：点击推事件用户点击click类型按钮后，微信服务器会通过消息接口推送消息类型为event的结构给开发者（参考消息接口指南），并且带上按钮中开发者填写的key值，开发者可以通过自定义的key值与用户进行交互； 2、view：跳转URL用户点击view类型按钮后，微信客户端将会打开开发者在按钮中填写的网页URL，可与网页授权获取用户基本信息接口结合，获得用户基本信息。 3、scancode_push：扫码推事件用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后显示扫描结果（如果是URL，将进入URL），且会将扫码的结果传给开发者，开发者可以下发消息。 4、scancode_waitmsg：扫码推事件且弹出“消息接收中”提示框用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后，将扫码的结果传给开发者，同时收起扫一扫工具，然后弹出“消息接收中”提示框，随后可能会收到开发者下发的消息。 5、pic_sysphoto：弹出系统拍照发图用户点击按钮后，微信客户端将调起系统相机，完成拍照操作后，会将拍摄的相片发送给开发者，并推送事件给开发者，同时收起系统相机，随后可能会收到开发者下发的消息。 6、pic_photo_or_album：弹出拍照或者相册发图用户点击按钮后，微信客户端将弹出选择器供用户选择“拍照”或者“从手机相册选择”。用户选择后即走其他两种流程。 7、pic_weixin：弹出微信相册发图器用户点击按钮后，微信客户端将调起微信相册，完成选择操作后，将选择的相片发送给开发者的服务器，并推送事件给开发者，同时收起相册，随后可能会收到开发者下发的消息。 8、location_select：弹出地理位置选择器用户点击按钮后，微信客户端将调起地理位置选择工具，完成选择操作后，将选择的地理位置发送给开发者的服务器，同时收起位置选择工具，随后可能会收到开发者下发的消息。 9、media_id：下发消息（除文本消息）用户点击media_id类型按钮后，微信服务器会将开发者填写的永久素材id对应的素材下发给用户，永久素材类型可以是图片、音频、视频、图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。 10、view_limited：跳转图文消息URL用户点击view_limited类型按钮后，微信客户端将打开开发者在按钮中填写的永久素材id对应的图文消息URL，永久素材类型只支持图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。</code></pre><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><pre><code> 1、借助Senparc.Weixin SDK 2、只需要前端和控制器，不需要数据库</code></pre><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>   新建一个UserMessageHandler.cs，实现编辑菜单，获取菜单，删除菜单</p><h4 id="编辑-新增-菜单"><a href="#编辑-新增-菜单" class="headerlink" title="编辑(新增)菜单"></a>编辑(新增)菜单</h4><pre class=" language-c#"><code class="language-c#">/// <summary>/// 编辑新增菜单/// </summary>/// <param name="resultFull">获取菜单的完整结果</param>/// <param name="MenuMatchRule">个性化菜单规则</param>/// <returns></returns>[HttpPost]public ActionResult CreateMenu(GetMenuResultFull resultFull, MenuMatchRule MenuMatchRule){    // 使用appid 和appsecret 向微信凭证获取接口请求access_token    string AccessToken = Senparc.Weixin.MP.CommonAPIs.CommonApi.GetToken(AppId, AppSecret).access_token;  //获取AccessToken值    var IsAddCondidional = MenuMatchRule != null && !MenuMatchRule.CheckAllNull();    var apiName = string.Format("使用接口：{0}。", (IsAddCondidional ? "个性化菜单接口" : "普通自定义菜单接口"));    try    {        //重新整理按钮信息        WxJsonResult result = null;        IButtonGroupBase buttonGroup = null;        if (IsAddCondidional)        {            //个性化接口            //微信公众平台新增了个性化菜单接口，开发者可以通过该接口，让公众号的不同用户群体看到不一样的自定义菜单            buttonGroup = Senparc.Weixin.MP.CommonAPIs.CommonApi.GetMenuFromJsonResult(resultFull, new ConditionalButtonGroup()).menu;            var ConditionalButtonGroup = buttonGroup as ConditionalButtonGroup;            ConditionalButtonGroup.matchrule = MenuMatchRule;            result = Senparc.Weixin.MP.CommonAPIs.CommonApi.CreateMenuConditional(AccessToken, ConditionalButtonGroup);            apiName += string.Format("menuid：{0}。", (result as CreateMenuConditionalResult).menuid);        }        else        {            //普通接口            buttonGroup = Senparc.Weixin.MP.CommonAPIs.CommonApi.GetMenuFromJsonResult(resultFull, new ButtonGroup()).menu;            result = Senparc.Weixin.MP.CommonAPIs.CommonApi.CreateMenu(AccessToken, buttonGroup);        }        var json = new        {            Success = result.errmsg == "ok",            Message = "菜单更新成功。" + apiName        };        return Json(json);    }    catch (Exception ex)    {        var json = new { Success = false, Message = string.Format("更新失败：{0}。{1}", ex.Message, apiName) };        return Json(json);    }}</code></pre><h4 id="获取菜单"><a href="#获取菜单" class="headerlink" title="获取菜单"></a>获取菜单</h4><pre class=" language-c#"><code class="language-c#">/// <summary>/// 获取菜单/// </summary>/// <returns></returns>public ActionResult GetMenu(){    string AccessToken = Senparc.Weixin.MP.CommonAPIs.CommonApi.GetToken(AppId, AppSecret).access_token;  //获取AccessToken值    var result = Senparc.Weixin.MP.CommonAPIs.CommonApi.GetMenu(AccessToken);    if (result == null)    {        return Json(new { error = "菜单不存在或验证失败！" }, JsonRequestBehavior.AllowGet);    }    return Json(result, JsonRequestBehavior.AllowGet);}</code></pre><h4 id="删除菜单"><a href="#删除菜单" class="headerlink" title="删除菜单"></a>删除菜单</h4><pre class=" language-c#"><code class="language-c#">/// <summary>/// 删除菜单/// </summary>/// <returns></returns>public ActionResult DeleteMenu(){    try    {        string AccessToken = Senparc.Weixin.MP.CommonAPIs.CommonApi.GetToken(AppId, AppSecret).access_token;  //获取AccessToken值        var result = Senparc.Weixin.MP.CommonAPIs.CommonApi.DeleteMenu(AccessToken);        var json = new        {            Success = result.errmsg == "ok",            Message = result.errmsg        };        return Json(json, JsonRequestBehavior.AllowGet);    }    catch (Exception ex)    {        var json = new { Success = false, Message = ex.Message };        return Json(json, JsonRequestBehavior.AllowGet);    }}}</code></pre><p>借助<a href="https://www.cnblogs.com/szw/p/weixin-conditional-menu.html">Senparc.Weixin SDK</a>，快速的完成了对普通菜单和个性化菜单的实现。</p><p>前端界面：</p><p>在前端页面中，我们可以将页面设计为这种布局的样式</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190519153620027-96252402.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190519153620027-96252402.png" alt="img"></a></p><h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"button"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"灌篮高手"</span><span class="token punctuation">,</span>            <span class="token property">"sub_button"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"view"</span><span class="token punctuation">,</span>                    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.cnblogs.com/i3yuan/"</span><span class="token punctuation">,</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"陵南高中"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"view"</span><span class="token punctuation">,</span>                    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.cnblogs.com/i3yuan/"</span><span class="token punctuation">,</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"海南高中"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"view"</span><span class="token punctuation">,</span>                    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.cnblogs.com/i3yuan/"</span><span class="token punctuation">,</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"湘北高中"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"漫画集"</span><span class="token punctuation">,</span>            <span class="token property">"sub_button"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"view"</span><span class="token punctuation">,</span>                    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.cnblogs.com/i3yuan/"</span><span class="token punctuation">,</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"趣味漫画"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"view"</span><span class="token punctuation">,</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"个人中心"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190519154233777-948520114.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190519154233777-948520114.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>公众号菜单分为个性化菜单和普通菜单，普通菜单是关注之后就可以查看的，而个性化菜单是根据条件才能看到的（条件：用户标签、性别、手机操作系统、地区、语言），个性化菜单更好实现灵活的业务运营</p></li><li><p>通过开源项目中的Senparc.Weixin SDK，快速的完成菜单的编辑、获取、删除，只需将前端生成的菜单内容转换为对应的json格式，后台获取内容，实现菜单功能</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> 微信开发 </tag>
            
            <tag> 公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识概述</title>
      <link href="2019/05/18/ji-suan-ji-wang-luo-zhi-shi-gai-shu/"/>
      <url>2019/05/18/ji-suan-ji-wang-luo-zhi-shi-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络知识概述"><a href="#计算机网络知识概述" class="headerlink" title="计算机网络知识概述"></a>计算机网络知识概述</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>　　对于程序员来说，计算机网络的知识是很重要也很基础的。尤其是做web开发就要对http或者https很熟。有的时候涉及到域名，还会碰到跨域问题。这些其实都是计算机网络相关的知识，所以前阵子也抽空对韩老师的所讲的《计算机网络原理》的教学视频重新看了一遍，真是受益匪浅呢。同时也查阅了许多相关资料，更是深入的了解和掌握了。</p><p>此文主要参考了博主Poll的笔记的文章 <a href="https://www.cnblogs.com/maybe2030/p/4781555.html">网络基础的总结</a>，详细的总结了计算机网络知识。因此本文作为个人笔记总结使用，希望大家多多指教。</p><h2 id="了解："><a href="#了解：" class="headerlink" title="了解："></a>了解：</h2><p>　　如今，在这个网络技术发达的年代，我们的生活几乎已经离不开网络。而网络是什么呢？</p><p>　　计算机网络，是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p><p>　　计算机网络学习的核心内容就是网络协议的学习。网络协议是为计算机网络中进行数据交换而建立的规则、标准或者说是约定的集合。因为不同用户的数据终端可能采取的字符集是不同的，两者需要进行通信，必须要在一定的标准上进行。</p><p>　　一个很形象地比喻就是我们的语言，我们大天朝地广人多，地方性语言也非常丰富，而且方言之间差距巨大。A地区的方言可能B地区的人根本无法接受，所以我们要为全国人名进行沟通建立一个语言标准，这就是我们的普通话的作用。同样，放眼全球，我们与外国友人沟通的标准语言是英语，所以我们才要苦逼的学习英语。</p><p>　　计算机网络协议同我们的语言一样，多种多样。而ARPA公司与1977年到1979年推出了一种名为ARPANET的网络协议受到了广泛的热捧，其中最主要的原因就是它推出了人尽皆知的TCP/IP标准网络协议。目前TCP/IP协议已经成为Internet中的“通用语言”，下图为不同计算机群之间利用TCP/IP进行通信的示意图。</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512163852025-619182363.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512163852025-619182363.png" alt="img"></a></p><p>网络层级划分：</p><p>　　为了使不同计算机厂家生产的计算机能够相互通信，以便在更大的范围内建立计算机网络，国际标准化组织（ISO）在1978年提出了“开放系统互联参考模型”，即著名的OSI/RM模型（Open System Interconnection/Reference Model）。它将计算机网络体系结构的通信协议划分为七层，自下而上依次为：物理层（Physics Layer）、数据链路层（Data Link Layer）、网络层（Network Layer）、传输层（Transport Layer）、会话层（Session Layer）、表示层（Presentation Layer）、应用层（Application Layer）。其中第四层完成数据传送服务，上面三层面向用户。</p><p>除了标准的OSI七层模型以外，常见的网络层次划分还有TCP/IP四层协议以及TCP/IP五层协议，它们之间的对应关系如下图所示：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512164031944-986195810.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512164031944-986195810.png" alt="img"></a></p><p>OSI七层网络模型：</p><p>　　TCP/IP协议毫无疑问是互联网的基础协议，没有它就根本不可能上网，任何和互联网有关的操作都离不开TCP/IP协议。不管是OSI七层模型还是TCP/IP的四层、五层模型，每一层中都要自己的专属协议，完成自己相应的工作以及与上下层级之间进行沟通。由于OSI七层模型为网络的标准层次划分，所以我们以OSI七层模型为例从下向上进行一一介绍。</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512164132262-297732023.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512164132262-297732023.png" alt="img"></a></p><p>　　<strong>1）物理层（Physical Layer）</strong></p><p>　　激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。<strong>该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。</strong>物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</p><p>　　<strong>2）数据链路层（Data Link Layer）</strong></p><p>　　数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧（frame），帧是数据链路层的传送单位；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p><p>　　有关数据链路层的重要知识点：</p><p>　　<strong>1&gt; 数据链路层为网络层提供可靠的数据传输；</strong></p><p>　　<strong>2&gt; 基本数据单位为帧；</strong></p><p>　　<strong>3&gt; 主要的协议：以太网协议；</strong></p><p>　　<strong>4&gt; 两个重要设备名称：网桥和交换机。</strong></p><p>  <strong><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518215030398-1851070290.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518215030398-1851070290.png" alt="img"></a></strong></p><p>　　<strong>3）网络层（Network Layer）</strong></p><p>　　网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。如果您想用尽量少的词来记住网络层，那就是“路径选择、路由及逻辑寻址”。</p><p>　　网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。具体的协议我们会在接下来的部分进行总结，有关网络层的重点为：</p><p>　　<strong>1&gt; 网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能；</strong></p><p>　　<strong>2&gt; 基本数据单位为IP数据报；</strong></p><p>　　<strong>3&gt; 包含的主要协议：</strong></p><p>　　<strong>IP协议（Internet Protocol，因特网互联协议）;</strong></p><p> <strong><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518215511424-2073697191.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518215511424-2073697191.png" alt="img"></a></strong></p><p>　　<strong>ICMP协议（Internet Control Message Protocol，因特网控制报文协议）;</strong></p><p>　　ICMP,Internet Control Message Protocol 控制报文协议。这个协议其实日常使用非常多，比如ping和traceroute，它主要用于主机和路由之间传递控制消息。比如网络痛不痛、主机达不达、路由是否可用等等。</p><p><strong><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518215526010-1243536126.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518215526010-1243536126.png" alt="img"></a></strong></p><p>　　<strong>ARP协议（Address Resolution Protocol，地址解析协议）;</strong></p><p>　　ARP,Address Resolution Protocol 地址解析协议，是根据IP地址获取对应的物理地址。大致的流程是：</p><p>　　比如A主机访问B主机，对应的ip分别为ipa,ipb；对应的Mac地址为maca,macb</p><p>　　那么：</p><ol><li>A主机现在自己机器上的路由表，查找ipb对应的macb</li><li>如果找不到则广播请求，如果收到对应的应答，则记录到路由表中</li></ol><p>　　这个APR的缓存一般都是在网卡中记录的。</p><p>　　<strong>RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。</strong></p><p>RARP，Reverse Address Resolution Protocol 用于不知道自己IP只知道Mac地址而想要与其他主机通信的场景。原理过程与ARP差不多。</p><p>　　<strong>4&gt; 重要的设备：路由器。</strong></p><p>　　<strong>4）传输层（Transport Layer）</strong></p><p>　　第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。</p><p>　　传输层的任务是根据通信子网的特性，最佳的利用网络资源，为两个端系统的会话层之间，提供建立、维护和取消传输连接的功能，负责端到端的可靠数据传输。在这一层，信息传送的协议数据单元称为段或报文。</p><p>　　网络层只是根据网络地址将源结点发出的数据包传送到目的结点，而传输层则负责将数据可靠地传送到相应的端口。</p><p>　　有关网络层的重点：</p><p>　　<strong>1&gt; 传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输以及端到端的差错控制和流量控制问题；</strong></p><p>　　<strong>2&gt; 包含的主要协议：TCP协议（Transmission Control Protocol，传输控制协议）、UDP协议（User Datagram Protocol，用户数据报协议）；</strong></p><p>　　<strong>3&gt; 重要设备：网关。</strong></p><p><strong><em>*</em>*<a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518220206316-1918959376.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518220206316-1918959376.png" alt="img"></a><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518220234547-231600829.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518220234547-231600829.png" alt="img"></a>*\</strong>***</p><p>　　<strong>5）会话层</strong></p><p>　　会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p><p>　　<strong>6）表示层</strong></p><p>　　表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</p><p>　　<strong>7）应用层</strong></p><p>　　为操作系统或网络应用程序提供访问网络服务的接口。</p><p>　　会话层、表示层和应用层重点：</p><p>　　<strong>1&gt; 数据传输基本单位为报文；</strong></p><p>　　<strong>2&gt; 包含的主要协议：FTP（文件传送协议）、Telnet（远程登录协议）、DNS（域名解析协议）、SMTP（邮件传送协议），POP3协议（邮局协议），HTTP协议（Hyper Text Transfer Protocol）。</strong></p><p><strong><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518223224960-2060985238.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518223224960-2060985238.png" alt="img"></a></strong></p><p>IP地址：</p><p>　　IP地址是一台机器在局域网或者公网上唯一的标识，比如最常见的我们检测本机的网络好不好使需要<code>ping 127.0.0.1</code>；在局域网的时候，需要设置局域网的地址，比如<code>192.168.0.1</code>；上网的时候，还需要配置猫…种种的操作都与IP地址有关系。</p><p>　　<strong>1）网络地址</strong></p><p>　　IP地址由网络号（包括子网号）和主机号组成，网络地址的主机号为全0，网络地址代表着整个网络。</p><p>　　<strong>2）广播地址</strong></p><p>　　广播地址通常称为直接广播地址，是为了区分受限广播地址。</p><p>　　广播地址与网络地址的主机号正好相反，广播地址中，主机号为全1。当向某个网络的广播地址发送消息时，该网络内的所有主机都能收到该广播消息。</p><p>　　<strong>3）组播地址</strong></p><p>​    <strong><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518213010021-2078247026.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518213010021-2078247026.png" alt="img"></a></strong></p><p>　　D类地址就是组播地址。</p><p>　　先回忆下A，B，C，D类地址吧：</p><p>　　A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255；</p><p>　　B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255;</p><p>　　C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255。</p><p>　　D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）；</p><p>　　E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</p><p>　　注：只有A,B,C有网络号和主机号之分，D类地址和E类地址没有划分网络号和主机号。</p><p>　　<strong>4）255.255.255.255</strong></p><p>　　该IP地址指的是受限的广播地址。受限广播地址与一般广播地址（直接广播地址）的区别在于，受限广播地址只能用于本地网络，路由器不会转发以受限广播地址为目的地址的分组；一般广播地址既可在本地广播，也可跨网段广播。例如：主机192.168.1.1/30上的直接广播数据包后，另外一个网段192.168.1.5/30也能收到该数据报；若发送受限广播数据报，则不能收到。</p><p>　　注：一般的广播地址（直接广播地址）能够通过某些路由器（当然不是所有的路由器），而受限的广播地址不能通过路由器。</p><p>　　<strong>5）0.0.0.0</strong></p><p>　　常用于寻找自己的IP地址，例如在我们的RARP，BOOTP和DHCP协议中，若某个未知IP地址的无盘机想要知道自己的IP地址，它就以255.255.255.255为目的地址，向本地范围（具体而言是被各个路由器屏蔽的范围内）的服务器发送IP请求分组。</p><p>　　<strong>6）回环地址</strong></p><p>　　127.0.0.0/8被用作回环地址，回环地址表示本机的地址，常用于对本机的测试，用的最多的是127.0.0.1。</p><p>　　127.0.0.1是专门给本机用的，叫做lookback，即回环，它是一块虚拟的网卡。如果本机的两个软件进行通信，就可以直接使用127.0.0.1，这样可以避免再走一次协议栈（物理层、数据链路层、ip层），节省了大量的时间。这个地址一般配置再电脑的hosts文件里面，当然你也可以改…改完大量的软件都可能不好使了…localhost默认就是指向的这个ip地址。</p><p>　　<strong>7）A、B、C类私有地址</strong></p><p>　　私有地址(private address)也叫专用地址，它们不会在全球使用，只具有本地意义。</p><p>　　A类私有地址：10.0.0.0/8，范围是：10.0.0.0~10.255.255.255</p><p>　　B类私有地址：172.16.0.0/12，范围是：172.16.0.0~172.31.255.255</p><p>　　C类私有地址：192.168.0.0/16，范围是：192.168.0.0~192.168.255.255</p><p>子网掩码及网络划分：</p><p>　　随着互连网应用的不断扩大，原先的IPv4的弊端也逐渐暴露出来，即网络号占位太多，而主机号位太少，所以其能提供的主机地址也越来越稀缺，目前除了使用NAT在企业内部利用保留地址自行分配以外，通常都对一个高类别的IP地址进行再划分，以形成多个子网，提供给不同规模的用户群使用。</p><p>　　这里主要是为了在网络分段情况下有效地利用IP地址，通过对主机号的高位部分取作为子网号，从通常的网络位界限中扩展或压缩子网掩码，用来创建某类地址的更多子网。但创建更多的子网时，在每个子网上的可用主机地址数目会比原先减少。</p><p>　　<strong>什么是子网掩码？</strong></p><p>　　子网掩码是标志两个IP地址是否同属于一个子网的，也是32位二进制地址，其每一个为1代表该位是网络位，为0代表主机位。它和IP地址一样也是使用点式十进制来表示的。如果两个IP地址在子网掩码的按位与的计算下所得结果相同，即表明它们共属于同一子网中。</p><p>　　<strong>在计算子网掩码时，我们要注意IP地址中的保留地址，即“ 0”地址和广播地址，它们是指主机地址或网络地址全为“ 0”或“ 1”时的IP地址，它们代表着本网络地址和广播地址，一般是不能被计算在内的。</strong></p><p>　　<strong>子网掩码的计算：</strong></p><p>　　对于无须再划分成子网的IP地址来说，其子网掩码非常简单，即按照其定义即可写出：如某B类IP地址为 10.12.3.0，无须再分割子网，则该IP地址的子网掩码255.255.0.0。如果它是一个C类地址，则其子网掩码为 255.255.255.0。其它类推，不再详述。下面我们关键要介绍的是一个IP地址，还需要将其高位主机位再作为划分出的子网网络号，剩下的是每个子网的主机号，这时该如何进行每个子网的掩码计算。</p><p>　　下面总结一下有关子网掩码和网络划分常见的面试考题：</p><p>　　<strong>1）利用子网数来计算</strong></p><p>　　在求子网掩码之前必须先搞清楚要划分的子网数目，以及每个子网内的所需主机数目。</p><p>　　(1) 将子网数目转化为二进制来表示;</p><p>　　如欲将B类IP地址168.195.0.0划分成27个子网：27=11011；</p><p>　　(2) 取得该二进制的位数，为N；</p><p>　　该二进制为五位数，N = 5</p><p>　　(3) 取得该IP地址的类子网掩码，将其主机地址部分的的前N位置1即得出该IP地址划分子网的子网掩码。</p><p>　　将B类地址的子网掩码255.255.0.0的主机地址前5位置 1，得到 255.255.248.0</p><p>　　<strong>2）利用主机数来计算</strong></p><p>　　如欲将B类IP地址168.195.0.0划分成若干子网，每个子网内有主机700台：</p><p>　　(1) 将主机数目转化为二进制来表示；</p><p>　　700=1010111100；</p><p>　　(2) 如果主机数小于或等于254（注意去掉保留的两个IP地址），则取得该主机的二进制位数，为N，这里肯定 N&lt;8。如果大于254，则 N&gt;8，这就是说主机地址将占据不止8位；</p><p>　　该二进制为十位数，N=10；</p><p>　　(3) 使用255.255.255.255来将该类IP地址的主机地址位数全部置1，然后从后向前的将N位全部置为 0，即为子网掩码值。</p><p>　　将该B类地址的子网掩码255.255.0.0的主机地址全部置1，得到255.255.255.255，然后再从后向前将后 10位置0,即为：11111111.11111111.11111100.00000000，即255.255.252.0。这就是该欲划分成主机为700台的B类IP地址 168.195.0.0的子网掩码。</p><p>　　<strong>3）还有一种题型，要你根据每个网络的主机数量进行子网地址的规划和**</strong>计算子网掩码。这也可按上述原则进行计算。**</p><p>　　比如一个子网有10台主机，那么对于这个子网需要的IP地址是：</p><p>　　10＋1＋1＋1＝13</p><p>　　<strong>注意：加的第一个1是指这个网络连接时所需的网关地址，接着的两个1分别是指网**</strong>络地址和广播地址。**</p><p>　　因为13小于16（16等于2的4次方），所以主机位为4位。而256－16＝240，所以该子网掩码为255.255.255.240。</p><p>　　如果一个子网有14台主机，不少人常犯的错误是：依然分配具有16个地址空间的子网，而忘记了给网关分配地址。这样就错误了，因为14＋1＋1＋1＝17，17大于16，所以我们只能分配具有32个地址（32等于2的5次方）空间的子网。这时子网掩码为：255.255.255.224。</p><p>ARP/RARP协议：</p><p>　　<strong>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。</strong>主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。<strong>ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。</strong></p><p>　　ARP工作流程举例：</p><p>　　主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；</p><p>　　主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；</p><p>　　当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：</p><p>　　（1）根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。</p><p>　　（2）如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。</p><p>　　（3）主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</p><p>　　（4）主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</p><p>　　（5）当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p><p>　　<strong>逆地址解析协议，即RARP，功能和ARP协议相对，其将局域网中某个主机的物理地址转换为IP地址</strong>，比如局域网中有一台主机只知道物理地址而不知道IP地址，那么可以通过RARP协议发出征求自身IP地址的广播请求，然后由RARP服务器负责回答。</p><p>　　RARP协议工作流程：</p><p>　　（1）给主机发送一个本地的RARP广播，在此广播包中，声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个IP地址；</p><p>　　（2）本地网段上的RARP服务器收到此请求后，检查其RARP列表，查找该MAC地址对应的IP地址；</p><p>　　（3）如果存在，RARP服务器就给源主机发送一个响应数据包并将此IP地址提供给对方主机使用；</p><p>　　（4）如果不存在，RARP服务器对此不做任何的响应；</p><p>　　（5）源主机收到从RARP服务器的响应信息，就利用得到的IP地址进行通讯；如果一直没有收到RARP服务器的响应信息，表示初始化失败。</p><p>路由选择协议：</p><p>　　常见的路由选择协议有：RIP协议、OSPF协议。</p><p>　　<strong>RIP**</strong>协议** ：底层是贝尔曼福特算法，它选择路由的度量标准（metric)是跳数，最大跳数是15跳，如果大于15跳，它就会丢弃数据包。</p><p><strong>OSPF**</strong>协议** ：Open Shortest Path First开放式最短路径优先，底层是迪杰斯特拉算法，是链路状态路由选择协议，它选择路由的度量标准是带宽，延迟。</p><p>TCP/IP协议：</p><p>　　<strong>TCP/IP协议是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</strong></p><p>　　IP层接收由更低层（网络接口层例如以太网设备驱动程序）发来的数据包，并把该数据包发送到更高层—TCP或UDP层；相反，IP层也把从TCP或UDP层接收来的数据包传送到更低层。IP数据包是不可靠的，因为IP并没有做任何事情来确认数据包是否按顺序发送的或者有没有被破坏，IP数据包中含有发送它的主机的地址（源地址）和接收它的主机的地址（目的地址）。</p><p> 　TCP是面向连接的通信协议，通过三次握手建立连接，通讯完成时要拆除连接，由于TCP是面向连接的所以只能用于端到端的通讯。TCP提供的是一种可靠的数据流服务，采用“带重传的肯定确认”技术来实现传输的可靠性。TCP还采用一种称为“滑动窗口”的方式进行流量控制，所谓窗口实际表示接收能力，用以限制发送方的发送速度。</p><p>　　<strong>TCP报文首部格式：</strong></p><p><strong><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512165409142-1344486140.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512165409142-1344486140.png" alt="img"></a></strong></p><p>​    <strong>TCP协议的三次握手和四次挥手：</strong></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512165446310-1232089931.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512165446310-1232089931.png" alt="img"></a><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518223301807-278127913.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190518223301807-278127913.png" alt="img"></a></p><p>　　<strong>注：seq</strong>:”sequance”序列号；<strong>ack</strong>:”acknowledge”确认号；<strong>SYN</strong>:”synchronize”请求同步标志；<strong>；ACK</strong>:”acknowledge”确认标志”<strong>；**</strong>FIN**：”Finally”结束标志。</p><p>　　<strong>TCP连接建立过程：</strong>首先Client端发送连接请求报文，Server段接受连接后回复ACK报文，并为这次连接分配资源。Client端接收到ACK报文后也向Server段发生ACK报文，并分配资源，这样TCP连接就建立了。</p><p>　　<strong>TCP连接断开过程：</strong>假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p><p>　　<strong>为什么要三次挥手？</strong></p><p>　　在只有两次“握手”的情形下，假设Client想跟Server建立连接，但是却因为中途连接请求的数据报丢失了，故Client端不得不重新发送一遍；这个时候Server端仅收到一个连接请求，因此可以正常的建立连接。但是，有时候Client端重新发送请求不是因为数据报丢失了，而是有可能数据传输过程因为网络并发量很大在某结点被阻塞了，这种情形下Server端将先后收到2次请求，并持续等待两个Client请求向他发送数据…问题就在这里，Cient端实际上只有一次请求，而Server端却有2个响应，极端的情况可能由于Client端多次重新发送请求数据而导致Server端最后建立了N多个响应在等待，因而造成极大的资源浪费！所以，“三次握手”很有必要！</p><p>　　<strong>为什么要四次挥手？</strong></p><p>　　试想一下，假如现在你是客户端你想断开跟Server的所有连接该怎么做？第一步，你自己先停止向Server端发送数据，并等待Server的回复。但事情还没有完，虽然你自身不往Server发送数据了，但是因为你们之前已经建立好平等的连接了，所以此时他也有主动权向你发送数据；故Server端还得终止主动向你发送数据，并等待你的确认。其实，说白了就是保证双方的一个合约的完整执行！</p><p>　　使用TCP的协议：FTP（文件传输协议）、Telnet（远程登录协议）、SMTP（简单邮件传输协议）、POP3（和SMTP相对，用于接收邮件）、HTTP协议等。</p><p>UDP协议：</p><p>　　<strong>UDP用户数据报协议，是面向无连接的通讯协议，UDP数据包括目的端口号和源端口号信息，由于通讯不需要连接，所以可以实现广播发送。**</strong>UDP通讯时不需要接收方确认，属于不可靠的传输，可能会出现丢包现象，实际应用中要求程序员编程验证。**</p><p>　　UDP与TCP位于同一层，但它不管数据包的顺序、错误或重发。因此，UDP不被应用于那些使用虚电路的面向连接的服务，UDP主要用于那些面向查询—应答的服务，例如NFS。相对于FTP或Telnet，这些服务需要交换的信息量较小。</p><p>　　每个UDP报文分UDP报头和UDP数据区两部分。报头由四个16位长（2字节）字段组成，分别说明该报文的源端口、目的端口、报文长度以及校验值。UDP报头由4个域组成，其中每个域各占用2个字节，具体如下：<br>　　（1）源端口号；</p><p>　　（2）目标端口号；</p><p>　　（3）数据报长度；</p><p>　　（4）校验值。</p><p>　　使用UDP协议包括：TFTP（简单文件传输协议）、SNMP（简单网络管理协议）、DNS（域名解析协议）、NFS、BOOTP。</p><p>　　<strong>TCP</strong> <strong>与</strong> <strong>UDP</strong> <strong>的区别：</strong>TCP是面向连接的，可靠的字节流服务；UDP是面向无连接的，不可靠的数据报服务。</p><p>DNS协议：</p><p>DNS是域名系统(DomainNameSystem)的缩写，该系统用于命名组织到域层次结构中的计算机和网络服务，<strong>可以简单地理解为将URL转换为IP地址</strong>。域名是由圆点分开一串单词或缩写组成的，每一个域名都对应一个惟一的IP地址，在Internet上域名与IP地址之间是一一对应的，DNS就是进行域名解析的服务器。DNS命名用于Internet等TCP/IP网络中，通过用户友好的名称查找计算机和服务。</p><p>NAT协议：</p><p>　　NAT网络地址转换(Network Address Translation)属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术，它被广泛应用于各种类型Internet接入方式和各种类型的网络中。原因很简单，NAT不仅完美地解决了lP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p><p> DHCP协议：</p><p>​    DHCP动态主机设置协议（Dynamic Host Configuration Protocol）是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。</p><p> HTTP协议：</p><p>​    超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。</p><p>　　<strong>HTTP</strong> <strong>协议包括哪些请求？</strong></p><p>　　GET：请求读取由URL所标志的信息。</p><p>　　POST：给服务器添加信息（如注释）。</p><p>　　PUT：在给定的URL下存储一个文档。</p><p>　　DELETE：删除给定的URL所标志的资源。</p><p>　　<strong>HTTP</strong> <strong>中，</strong> <strong>POST</strong> <strong>与</strong> <strong>GET</strong> <strong>的区别</strong></p><p>　　1）Get是从服务器上获取数据，Post是向服务器传送数据。</p><p>　　2）Get是把参数数据队列加到提交表单的Action属性所指向的URL中，值和表单内各个字段一一对应，在URL中可以看到。</p><p>　　3）Get传送的数据量小，不能大于2KB；Post传送的数据量较大，一般被默认为不受限制。</p><p>　　4）根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p><p>　　I. 所谓 <strong>安全的</strong> 意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><p>　　II. <strong>幂等</strong> 的意味着对同一URL的多个请求应该返回同样的结果。</p><p>举个例子：</p><p>　　<strong>在浏览器中输入</strong> <a href="http://www.baidu.com/"><strong>www.baidu.com</strong> </a> <strong>后执行的全部过程</strong></p><p>　　现在假设如果我们在客户端（客户端）浏览器中输入<a href="http://www.baidu.com,而baidu.com为要访问的服务器（服务器），下面详细分析客户端为了访问服务器而执行的一系列关于协议的操作：">http://www.baidu.com,而baidu.com为要访问的服务器（服务器），下面详细分析客户端为了访问服务器而执行的一系列关于协议的操作：</a></p><p>　　1）客户端浏览器通过DNS解析到<a href="http://www.baidu.com的ip地址220.181.27.48,通过这个ip地址找到客户端到服务器的路径.客户端浏览器发起一个http会话到220.161.27.48,然后通过tcp进行封装数据包,输入到网络层./">www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。</a></p><p>　　2）在客户端的**传输层(添加TCP头)**，把HTTP会话请求分成报文段，添加源和目的端口，如服务器使用80端口监听客户端的请求，客户端由系统随机选择一个端口如5000，与服务器进行交换，服务器把相应的请求返回给客户端的5000端口。然后使用IP层的IP地址查找目的端。</p><p>　　3）客户端的<strong>网络层（添加IP头）</strong>不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。</p><p>　　4）客户端的<strong>链路层（添加MAC头）</strong>，包通过链路层发送到路由器，通过邻居协议查找给定IP地址的MAC地址，然后发送ARP请求查找目的地址，如果得到回应后就可以使用ARP的请求应答交换的IP数据包现在就可以传输了，然后发送IP数据包到达服务器的地址。</p>]]></content>
      
      
      <categories>
          
          <category> 网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发 —— 消息处理</title>
      <link href="2019/05/12/wei-xin-gong-zhong-hao-kai-fa-xiao-xi-chu-li/"/>
      <url>2019/05/12/wei-xin-gong-zhong-hao-kai-fa-xiao-xi-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="微信公众号开发——消息处理"><a href="#微信公众号开发——消息处理" class="headerlink" title="微信公众号开发——消息处理"></a>微信公众号开发——消息处理</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    回顾<a href="https://www.cnblogs.com/i3yuan/p/10802410.html">上一节</a>服务器配置的内容，我们已经可以自己完成公众号服务器的配置。配置完成之后，我们就可以通过调用的方式，完成对消息管理的处理。当用户关注公众号或者发送消息的时候，我们应该启用默认回复，要不然用户得不到回应，</p><p>从而导致丢失体验。所以这一章节，我们将通过消息管理的方式，对用户的信息进行处理，完成公众号消息回复功能，实现公众号与用户之间的完整对话。</p><h2 id="了解"><a href="#了解" class="headerlink" title="了解:"></a>了解:</h2><p>​    微信公众平台对信息做了比较清晰的分类，最基本的包括请求（Request）和响应（Response）两大类信息，这两类信息有分为文字、语音、图片等格式。Senparc.Weixin.MP提供了MessageHandler消息处理类，这些类型在以枚举的方式区分，</p><p>同时根据严格命名规则命名了所有类型的RequestMessage和ResponseMessage。在<a href="https://github.com/JeffreySu/WeiXinMPSDK/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8MessageHandler%E7%AE%80%E5%8C%96%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B">Senparc</a>里也详细说明了如何这个类的</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512145627171-881007020.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512145627171-881007020.png" alt="img"></a></p><h2 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h2><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>​    新建一个UserMessageHandler.cs，需要继承Senparc.Weixin.MP.MessageHandlers<TC>这个抽象类,并重写所有方法：</p><pre class=" language-c#"><code class="language-c#">public class UserMessageHandler : MessageHandler<UserMessageContext>{    /// <summary>    /// 构造函数    /// </summary>    /// <param name="inputStream">构造函数的inputStream用于接收来自微信服务器的请求流（如果需要在外部处理，这里也可以传入XDocument）</param>    /// <param name="postModel">微信公众服务器Post过来的加密参数集合（不包括PostData）</param>    public UserMessageHandler(Stream inputStream, PostModel postModel)        : base(inputStream, postModel)        {        }    public override IResponseMessageBase DefaultResponseMessage(IRequestMessageBase requestMessage)    {        /* 所有没有被处理的消息会默认返回这里的结果            */        var responseMessage = this.CreateResponseMessage<ResponseMessageText>();//ResponseMessageText也可以是News等其他类型        responseMessage.Content = "这条消息来自DefaultResponseMessage。";        return responseMessage;    }}</code></pre><pre class=" language-c#"><code class="language-c#">using Senparc.Weixin.Context;using Senparc.Weixin.MP.Entities;using System;using System.Collections.Generic;using System.Linq;using System.Web;namespace WeiXinHandler{    public class UserMessageContext: MessageContext<IRequestMessageBase, IResponseMessageBase>    {        public UserMessageContext()        {            /*            * 注意：即使使用其他类实现IMessageContext，            * 也务必在这里进行下面的初始化，尤其是设置当前时间，            * 这个时间关系到及时从缓存中移除过期的消息，节约内存使用            */            base.MessageContextRemoved += UserMessageContext_MessageContextRemoved;        }        /// <summary>        /// 当上下文过期，被移除时触发的时间        /// </summary>        /// <param name="sender"></param>        /// <param name="e"></param>        void UserMessageContext_MessageContextRemoved(object sender, Senparc.Weixin.Context.WeixinContextRemovedEventArgs<IRequestMessageBase, IResponseMessageBase> e)        {            /* 注意，这个事件不是实时触发的（当然你也可以专门写一个线程监控）             * 为了提高效率，根据WeixinContext中的算法，这里的过期消息会在过期后下一条请求执行之前被清除             */            var messageContext = e.MessageContext as CustomMessageContext;            if (messageContext == null)            {                return;//如果是正常的调用，messageContext不会为null            }            //TODO:这里根据需要执行消息过期时候的逻辑，下面的代码仅供参考            //Log.InfoFormat("{0}的消息上下文已过期",e.OpenId);            //api.SendMessage(e.OpenId, "由于长时间未搭理客服，您的客服状态已退出！");        }    }}</code></pre><p>   重写的方法对应了接收不同的Request类型，构造函数的inputStream用于接收来自微信服务器的请求流</p><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>   基本用户不同类型的请求，比如用户向我们发送一条信息，那么会最终会调用OnTextRequest这个方法，所以在不同的重写方法内，实现自己的方法。</p><p>比如：我们对于文字（Text）信息进行这样的处理，在UserMessageHandler中我们可以重写方法OnTextRequest:</p><pre class=" language-c#"><code class="language-c#">public override IResponseMessageBase OnTextRequest(RequestMessageText requestMessage){    var responseMessage = base.CreateResponseMessage<ResponseMessageText>();    responseMessage.Content = "您刚刚发送了文字信息：" + requestMessage.Content;  //requestMessage.Content即用户发过来的文字内容    return responseMessage;}</code></pre><p> 对于图片信息进行这样的处理，在UserMessageHandler中我们可以重写方法OnImageRequest</p><pre class=" language-c#"><code class="language-c#">/// <summary>/// 处理图片请求/// </summary>/// <param name="requestMessage"></param>/// <returns></returns>public override IResponseMessageBase OnImageRequest(RequestMessageImage requestMessage){    var responseMessage = CreateResponseMessage<ResponseMessageNews>();    responseMessage.Articles.Add(new Article()                                 {                                     Title = "您刚才发送了图片信息",                                     Description = "您发送的图片将会显示在边上",                                     PicUrl = requestMessage.PicUrl,                                     Url = "https://www.cnblogs.com/i3yuan/"                                 });    return responseMessage;}</code></pre><p> 对于语音信息进行这样的处理，在UserMessageHandler中我们可以重写方法OnVoiceRequest</p><pre class=" language-c#"><code class="language-c#">/// <summary>/// 处理语音请求/// </summary>/// <param name="requestMessage"></param>/// <returns></returns>public override IResponseMessageBase OnVoiceRequest(RequestMessageVoice requestMessage){    //获取公众号    AccessTokenResult account = Senparc.Weixin.MP.CommonAPIs.CommonApi.GetToken(AppId, AppSecret);    var responseMessage = CreateResponseMessage<ResponseMessageMusic>();    //上传缩略图    var uploadResult = Senparc.Weixin.MP.AdvancedAPIs.MediaApi.UploadTemporaryMedia(account.access_token, UploadMediaFileType.image,                                                                                    Server.GetMapPath("~/Images/Logo.jpg"));    //设置音乐信息    responseMessage.Music.Title = "天籁之音";    responseMessage.Music.Description = "播放您上传的语音";    responseMessage.Music.MusicUrl = "http://sdk.weixin.senparc.com/Media/GetVoice?mediaId=" + requestMessage.MediaId;    responseMessage.Music.HQMusicUrl = "http://sdk.weixin.senparc.com/Media/GetVoice?mediaId=" + requestMessage.MediaId;    responseMessage.Music.ThumbMediaId = uploadResult.media_id;    return responseMessage;}   </code></pre><p>对于视频信息进行这样的处理，在UserMessageHandler中我们可以重写方法OnVideoRequest</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 处理视频请求</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="requestMessage">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">override</span> IResponseMessageBase <span class="token function">OnVideoRequest</span><span class="token punctuation">(</span>RequestMessageVideo requestMessage<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> responseMessage <span class="token operator">=</span> <span class="token generic-method function">CreateResponseMessage<span class="token punctuation">&lt;</span>ResponseMessageText<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    responseMessage<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token string">"您发送了一条视频信息，ID："</span> <span class="token operator">+</span> requestMessage<span class="token punctuation">.</span>MediaId<span class="token punctuation">;</span>    <span class="token keyword">return</span> responseMessage<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于地理信息进行这样的处理，在UserMessageHandler中我们可以重写方法OnLocationRequest</p><pre class=" language-c#"><code class="language-c#">/// <summary>/// 处理位置请求/// </summary>/// <param name="requestMessage"></param>/// <returns></returns>public override IResponseMessageBase OnLocationRequest(RequestMessageLocation requestMessage){    var locationService = new LocationService();    var responseMessage = locationService.GetResponseMessage(requestMessage as RequestMessageLocation);    return responseMessage;}</code></pre><p>对于链接信息进行这样的处理，在UserMessageHandler中我们可以重写方法OnLinkRequest</p><pre class=" language-c#"><code class="language-c#">/// <summary>/// 处理链接消息请求/// </summary>/// <param name="requestMessage"></param>/// <returns></returns>public override IResponseMessageBase OnLinkRequest(RequestMessageLink requestMessage){    var responseMessage = ResponseMessageBase.CreateFromRequestMessage<ResponseMessageText>(requestMessage);    responseMessage.Content = string.Format(@"您发送了一条连接信息：            Title：{0}            Description:{1}            Url:{2}", requestMessage.Title, requestMessage.Description, requestMessage.Url);    return responseMessage;}</code></pre><h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>​     在Action中使用MessageHandler，返回对用户的处理，在上一节中我们已经新建了WXController.cs,在其中通过Post的方式处理用户的请求</p><pre class=" language-c#"><code class="language-c#">[HttpPost][ActionName("Index")]public Task<ActionResult> Post(PostModel postModel){    return Task.Factory.StartNew<ActionResult>(() =>                                               {                                                   if (!CheckSignature.Check(postModel.Signature, postModel.Timestamp, postModel.Nonce, Token))                                                   {                                                       return new WeixinResult("参数错误！");                                                   }                                                   var messageHandler = new UserMessageHandler(Request.InputStream);                                                   messageHandler.Execute(); //执行微信处理过程                                                   return new FixWeixinBugWeixinResult(messageHandler);                                               }).ContinueWith<ActionResult>(task => task.Result);}}</code></pre><p>​    messageHandler.Execute();用于执行整个信息处理过程，其中会调用重写的OnxxRequest方法</p><p>效果：</p><p> 测试发送文本</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512122546209-2046252474.jpg"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512122546209-2046252474.jpg" alt="img"></a></p><p>​    通过测试公众号，我们可以发现，当我们发送文本的时候，系统会对用户的信息进行处理，完成公众号消息回复功能，实现公众号与用户之间的完整对话。</p><p>测试发送图文消息</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512122529889-644024472.jpg"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190512122529889-644024472.jpg" alt="img"></a></p><pre class=" language-c#"><code class="language-c#">public override IResponseMessageBase OnTextRequest(RequestMessageText requestMessage){    var responseMessage = CreateResponseMessage<ResponseMessageNews>();    responseMessage.Articles.Add(new Article()                                 {                                     Title = "灌篮高手",                                     Description = "灌篮高手",                                     PicUrl = "http://images.cnblogs.com/cnblogs_com/i3yuan/1462639/o_timg%20(1).jpg",                                     Url = "https://www.cnblogs.com/i3yuan/"                                 });    return responseMessage;}</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​    1.通过MessageHandler的简单处理，我们就可以进行对用户文本消息的处理，完成公众号与用户的会话</p><p>​    2.发送不同的消息，处理不同的回复，实现更多类型的消息回复</p><p>​    3.参考了<a href="https://github.com/JeffreySu/WeiXinMPSDK/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8MessageHandler%E7%AE%80%E5%8C%96%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B">如何使用MessageHandler简化消息处理流程</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> 微信开发 </tag>
            
            <tag> 公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发 —— 服务器配置</title>
      <link href="2019/05/02/wei-xin-gong-zhong-hao-kai-fa-fu-wu-qi-pei-zhi/"/>
      <url>2019/05/02/wei-xin-gong-zhong-hao-kai-fa-fu-wu-qi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="微信公众号开发-——-服务器配置"><a href="#微信公众号开发-——-服务器配置" class="headerlink" title="微信公众号开发 —— 服务器配置"></a>微信公众号开发 —— 服务器配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  如果让大家说出一款国内比较热门的社交软件，那无疑就是QQ和微信了，说到微信，无不例外的会想到微信公众号和小程序，所以现在它们已经是很多企业流量及品牌推广的主要途径，</p><p>  而作为一个开发者而言呢，如果想要开发打造一款属于自己或企业的公众号，就是需要对微信公众号平台API文档的熟悉。</p><p>  你可以花上半天的时间大致阅读一下文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421135319">微信公众号开发文档</a></p><p>资源：</p><p>当你大致了解了微信公众号开发文档之后，就可以开始入手了</p><p>  1.需要登录微信公众号平台<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>  2.注册公众号账号，选择类型，如果你是作为个人开发的话，可以选择订阅号，如果作为企业开发的话，也可以选择服务号、企业，在这里，为了测试使用，所以暂时使用个人的订阅号作为开发</p><p>  3.注册成功后，登录 选择成为开发者</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>  1.需要appID，appsecret来获得Token</p><p>  2.需要一个服务器，可以去买一个服务器或者通过内网映射的方式让外部网络通过域名可以访问本地IIS站点</p><p>  3.通过C# VS2017 并且结合微信公众平台SDK Senparc.Weixin for C#,所以你必须对Senparc进行独立的了解 <a href="http://weixin.senparc.com/">http://weixin.senparc.com/</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1-登录公众号"><a href="#1-登录公众号" class="headerlink" title="1.登录公众号"></a>1.登录公众号</h3><p>  可以看到系统分配了一个AppID(应用ID)和AppSecret(应用密钥) </p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502143613709-50588203.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502143613709-50588203.png" alt="img"></a></p><p>   而里面需要我们手动填写服务器配置并启用开发者模式： URL地址,Token令牌,EncodingAESKey消息加密密钥</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502143738733-321931022.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502143738733-321931022.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502143836677-409213537.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502143836677-409213537.png" alt="img"></a></p><p>  这里的Token令牌可以自己创建，EncodingAESKey消息密码系统自动生成的，而URL呢，我们的资源服务器，资源服务器是给微信中转的服务器，微信将对这个接口（我们的站点）进行Get和POST的请求</p><p>具体的可以查看<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421135319">微信公众号开发文档</a></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502144719094-1435975234.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502144719094-1435975234.png" alt="img"></a></p><h3 id="2-配置服务器地址"><a href="#2-配置服务器地址" class="headerlink" title="2.配置服务器地址"></a>2.配置服务器地址</h3><h4 id="2-1引入安装Senparc-Weixin-MP库"><a href="#2-1引入安装Senparc-Weixin-MP库" class="headerlink" title="2.1引入安装Senparc.Weixin.MP库"></a>2.1引入安装Senparc.Weixin.MP库</h4><h4 id="2-2新建控制器"><a href="#2-2新建控制器" class="headerlink" title="2.2新建控制器"></a>2.2新建控制器</h4><p>新建控制器WXController ,控制器包含一个GET请求，Get是验证使用</p><pre class=" language-c#"><code class="language-c#">    public class WXController : Controller    {        public static readonly string Token = "WXToken";//与微信公众账号服务器配置的Token设置保持一致，区分大小写。        public static readonly string EncodingAESKey = "Q3vhz8zLwPYPbjz6S7JXiwSyAgW4vmInz6RzWWltEpk";//与微信公众账号服务器配置的EncodingAESKey设置保持一致，区分大小写。        public static readonly string AppId = ".........";//与微信公众账号后台的AppId设置保持一致，区分大小写。(这里的AppId填写自己的)        // GET: WC/WX        public ActionResult Index()        {            return View();        }        [HttpGet]        [ActionName("Index")]        public Task<ActionResult> Get(string signature, string timestamp, string nonce, string echostr)        {            return Task.Factory.StartNew(() =>            {                if (CheckSignature.Check(signature, timestamp, nonce, Token))                {                    return echostr; //返回随机字符串则表示验证通过                }                else                {                    return "failed:" + signature + "," + CheckSignature.GetSignature(timestamp, nonce, Token) + "。" +                           "当你打开URL访问当前地址的时候，说明该地址可以作为微信公众号服务器配置地址的URL，请注意保持Token一致。";                }            }).ContinueWith<ActionResult>(task => Content(task.Result));        }        }</code></pre><p>2.3 完成以上几个值的填写和配置后，发布站点，在公众号中修改服务器配置，提交之后，就可以成功配置服务器了</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502145551268-1923345129.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502145551268-1923345129.png" alt="img"></a></p><p>到了这里，我们已经完成了微信公众号基本的服务器配置了，在后续中，对微信的请求都是基于这个服务器地址配置对微信公众号调用请求。</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>如果你是通过测试公众号的话，也可以测试是否可以配置成功</p><p>访问<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">测试公众号平台地址</a>，登录授权成功后：</p><p>在接口配置中输入URL和Token值后，提交后，显示提交成功，这说明这个URL地址也是可以配置成功的</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502150425486-2376662.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502150425486-2376662.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502150616512-1215522879.png"><img src="https://img2018.cnblogs.com/blog/1576550/201905/1576550-20190502150616512-1215522879.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.在微信公众号开发中，只要我们对开发文档熟悉和在正确的配置的参数要求之后，就基本可以完成这个基本的服务器配置要求了，对后续微信公众号其他的开发也是一个美好的开端</p><p>2.在这里也利用了SDK Senparc，仅仅需要关心我们的业务，其他的内容已经帮我们处理好了，可以通过它进行更快速更高效的开发</p><p>3.最重要的一点，也是对大部分人合适的一点就是：熟悉之后就开始动手实践吧，只有自己动手实践一遍，才能让自己理解的更透彻，记得更牢固。</p><p>好记性不如烂笔头，撸起代码吧！！！燃烧我的代码吧！（这好像不太合适，O(∩_∩)O哈哈~）</p>]]></content>
      
      
      <categories>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> 微信开发 </tag>
            
            <tag> 公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#调用接口注意要点</title>
      <link href="2019/04/19/c-diao-yong-jie-kou-zhu-yi-yao-dian/"/>
      <url>2019/04/19/c-diao-yong-jie-kou-zhu-yi-yao-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="C-调用接口注意要点"><a href="#C-调用接口注意要点" class="headerlink" title="C#调用接口注意要点"></a>C#调用接口注意要点</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在用C#调用接口的时候，遇到需要通过调用登录接口才能调用其他的接口，因为在其他的接口需要在登录的状态下保存Cookie值才能有权限调用，</p><p>所以首先需要通过调用登录接口来保存cookie值，再进行其他接口的调用</p><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><h3 id="1-Get方式"><a href="#1-Get方式" class="headerlink" title="1.Get方式"></a>1.Get方式</h3><pre class=" language-c#"><code class="language-c#">        #region get方式        public string HttpGet(string url)        {            Encoding encoding = Encoding.UTF8;            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);            request.Method = "GET";            request.ContentType = "application/json";            request.Headers["Accept-Encoding"] = "gzip,deflase";            request.AutomaticDecompression = DecompressionMethods.GZip;            HttpWebResponse response = (HttpWebResponse)request.GetResponse();            // HttpCookie cookies = new HttpCookie("admin");  //如果有需要通过登录实现保存cookie值的话可以加一部分            // cookies.Value = Convert.ToString(response.Headers["Set-Cookie"]); // 通过响应请求读取带cookie的http数据            // cookies.Expires = DateTime.Now.AddDays(1);            //  HttpContext.Current.Response.Cookies.Add(cookies);            using (StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.UTF8))            {                return reader.ReadToEnd();            }        }        #endregion</code></pre><p>但是并不是所有的get请求都需要添加这个heard的内容，有些加了这个可能出现乱码的情况，所以不要设置Accept-Encoding的Header</p><p>此处之所以加此header，是因为看到网页分析工具中所得到的浏览器浏览该网页，对应的http的header的内容中，就是这样设置的。</p><p>所以，代码中，也是模拟浏览器去访问网页，就设置了对应的Accept-Encoding为gzip,deflate了</p><p>普通浏览器访问网页，之所以添加：”Accept-Encoding” = “gzip,deflate”</p><p>那是因为，浏览器对于从服务器中返回的对应的gzip压缩的网页，会自动解压缩，所以，其request的时候，添加对应的头，表明自己接受压缩后的数据。</p><p>同时添加了 request.AutomaticDecompression = DecompressionMethods.GZip;这一句，便可以获得正确的数据。</p><p>如果你获取网页内容太大的话，那么还是可以用这个办法的，这样就可以让HttpWebRequest自动帮你实现对应的解压缩了，可以减少数据数据传输量，节省时间，提高效率。</p><h3 id="2-post方式"><a href="#2-post方式" class="headerlink" title="2.post方式"></a>2.post方式</h3><pre class=" language-c#"><code class="language-c#">public string HttpPost2(string url, string body){   //把用户传过来的数据转成“UTF-8”的字节流    Encoding encoding = Encoding.UTF8;    //先根据用户请求的uri构造请求地址    //创建Web访问对象    HttpWebRequest request = (HttpWebRequest) WebRequest.Create(url);    request.Method = "POST";    // request.Accept = "application/json";   request.ContentType = "application/json; charset=UTF-8";   request.Headers["Accept-Encoding"] = "gzip, deflate";   request.AutomaticDecompression = DecompressionMethods.GZip;   //HttpCookie Cookie = System.Web.HttpContext.Current.Request.Cookies["admin"];  //若是需要登录过后再能访问获取url的数据，需要在请求头中设置cookie值   //if (Cookie != null)   //    request.Headers.Add("Cookie", Cookie.Value.ToString());   byte[] buffer = encoding.GetBytes(body);   request.ContentLength = buffer.Length;   request.GetRequestStream().Write(buffer, 0, buffer.Length);   //通过Web访问对象获取响应内容   HttpWebResponse response = (HttpWebResponse) request.GetResponse();   //通过响应内容流创建StreamReader对象，因为StreamReader更高级更快   using (StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.UTF8))   {    return reader.ReadToEnd();//利用StreamReader就可以从响应内容从头读到尾   } }</code></pre><h3 id="3-put请求"><a href="#3-put请求" class="headerlink" title="3.put请求"></a>3.put请求</h3><pre class=" language-c#"><code class="language-c#">        #region Put请求        public string Put(string data, string uri)        {//创建Web访问对象            HttpWebRequest Request = (HttpWebRequest)WebRequest.Create(uri);            //把用户传过来的数据转成“UTF-8”的字节流            byte[] buf = System.Text.Encoding.GetEncoding("UTF-8").GetBytes(data);            Request.Method = "PUT";            Request.ContentLength = buf.Length;            Request.ContentType = "application/json";            Request.MaximumAutomaticRedirections = 1;            Request.AllowAutoRedirect = true;            //发送请求            Stream stream = Request.GetRequestStream();            stream.Write(buf, 0, buf.Length);            stream.Close();            //获取接口返回值            //通过Web访问对象获取响应内容            HttpWebResponse Response = (HttpWebResponse)Request.GetResponse();            //通过响应内容流创建StreamReader对象，因为StreamReader更高级更快            StreamReader reader = new StreamReader(Response.GetResponseStream(), Encoding.UTF8);            //string returnXml = HttpUtility.UrlDecode(reader.ReadToEnd());//如果有编码问题就用这个方法            string returnXml = reader.ReadToEnd();//利用StreamReader就可以从响应内容从头读到尾            reader.Close();            Response.Close();            return returnXml;        }                   #endregion</code></pre><h3 id="4-Delete请求"><a href="#4-Delete请求" class="headerlink" title="4.Delete请求"></a>4.Delete请求</h3><pre class=" language-c#"><code class="language-c#">        #region Delete请求        public string Delete(string data, string uri)        {            //创建Web访问对象            HttpWebRequest Request = (HttpWebRequest)WebRequest.Create(uri);            //把用户传过来的数据转成“UTF-8”的字节流            byte[] buf = System.Text.Encoding.GetEncoding("UTF-8").GetBytes(data);            Request.Method = "DELETE";            Request.ContentLength = buf.Length;            Request.ContentType = "application/json";            Request.MaximumAutomaticRedirections = 1;            Request.AllowAutoRedirect = true;            //发送请求            Stream stream = Request.GetRequestStream();            stream.Write(buf, 0, buf.Length);            stream.Close();            //获取接口返回值            //通过Web访问对象获取响应内容            HttpWebResponse Response = (HttpWebResponse)Request.GetResponse();            //通过响应内容流创建StreamReader对象，因为StreamReader更高级更快            StreamReader reader = new StreamReader(Response.GetResponseStream(), Encoding.UTF8);            //string returnXml = HttpUtility.UrlDecode(reader.ReadToEnd());//如果有编码问题就用这个方法            string returnXml = reader.ReadToEnd();//利用StreamReader就可以从响应内容从头读到尾            reader.Close();            Response.Close();            return returnXml;        }       #endregion</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不同的场景需求，使用不同的方式，应用在不同的场景 。</p><p>通过这几种组合方式 ，可以调用http接口，完成调用和测试。</p>]]></content>
      
      
      <categories>
          
          <category> .Net/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> C# </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm安装和Vue运行</title>
      <link href="2019/01/10/npm-an-zhuang-he-vue-yun-xing/"/>
      <url>2019/01/10/npm-an-zhuang-he-vue-yun-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="npm安装和Vue运行"><a href="#npm安装和Vue运行" class="headerlink" title="npm安装和Vue运行"></a>npm安装和Vue运行</h1><h2 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h2><p>下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109231517750-1590282814.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109231517750-1590282814.png" alt="img"></a></p><p>下载安装：</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109231750869-892766504.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109231750869-892766504.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109231955207-1376363516.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109231955207-1376363516.png" alt="img"></a></p><p>直到</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232038596-1837282269.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232038596-1837282269.png" alt="img"></a></p><h2 id="打开CMD-检查是否正常"><a href="#打开CMD-检查是否正常" class="headerlink" title="打开CMD,检查是否正常"></a>打开CMD,检查是否正常</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232211724-595264381.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232211724-595264381.png" alt="img"></a></p><p>在安装目录里新增两个文件夹</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232959828-611213450.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232959828-611213450.png" alt="img"></a></p><p>然后运行命令：如下图：</p><p> <strong>npm config set prefix “D:\InstallSoftWare\nodejs\node_global</strong></p><p>  <strong>npm config set cache “D:\InstallSoftWare\nodejs\node_cache</strong></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232229460-1275456670.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232229460-1275456670.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232245220-1915883066.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232245220-1915883066.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232500626-1630730718.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232500626-1630730718.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232405614-789787020.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232405614-789787020.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232345430-618553526.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109232345430-618553526.png" alt="img"></a></p><p> 注意：如果直接运行npm install 等命令可能会报错的</p><p>（增加系统环境变量，新增之后，关闭cmd,重新打开）</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109233447636-405683297.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109233447636-405683297.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109233501118-1039350234.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109233501118-1039350234.png" alt="img"></a></p><h2 id="开始安装项目："><a href="#开始安装项目：" class="headerlink" title="开始安装项目："></a>开始安装项目：</h2><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109233820476-165935511.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109233820476-165935511.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109234118748-2021326469.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109234118748-2021326469.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109234433772-2130087684.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109234433772-2130087684.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109234600829-1049983337.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109234600829-1049983337.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109235129596-854162765.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109235129596-854162765.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109235151836-1708185039.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109235151836-1708185039.png" alt="img"></a></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>这个就成功打开运行第一个项目了：</p><p> <a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109235345729-1977007710.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109235345729-1977007710.png" alt="img"></a></p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>项目目录文件（此图来源网络）</p><p><a href="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109235511699-1802166309.png"><img src="https://img2018.cnblogs.com/blog/1576550/201901/1576550-20190109235511699-1802166309.png" alt="img"></a></p>]]></content>
      
      
      <categories>
          
          <category> vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
