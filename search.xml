<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>你好,Hexo</title>
      <link href="2020/09/13/ni-hao-hexo/"/>
      <url>2020/09/13/ni-hao-hexo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/13/hello-world/"/>
      <url>2020/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于.NetCore3.1系列 —— 使用Swagger做Api文档 (上篇)</title>
      <link href="2020/04/12/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-zuo-api-wen-dang-shang-pian/"/>
      <url>2020/04/12/ji-yu.netcore3.1-xi-lie-shi-yong-swagger-zuo-api-wen-dang-shang-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 为什么在开发中，接口文档越来越成为前后端开发人员沟通的枢纽呢？</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321180953967-38981577.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321180953967-38981577.png" alt="img"></a></p><p> 随着业务的发张，项目越来越多，而对于支撑整个项目架构体系而言，我们对系统业务的水平拆分，垂直分层，让业务系统更加清晰，从而产生一系统平台和系统，并使用接口进行数据交互。因此可见，业务的不断发展，接口不断增多，很多接口各自寄宿在不同的项目中，如果没有使用api工具进行管理，那么使用和说明将变得非常复杂。所以，接口管理运营应运而生。</p><p> 在过去的开发中，没有API文档管理工具之前，很多的API文档在什么地方写的都有，有在word写的，有在excel写的，也有对应的项目目录下readme.md写的，每个公司都有每个公司的玩法，但是文档规范极其不统一，甚至出现开发接口更新，但文档不更新，最终导致代码和接口不匹配，开发功能出问题。撸码一分钟，对接三小时。这往往是大家最痛苦的。  </p><p>​           <a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321181526115-2016249557.gif"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321181526115-2016249557.gif" alt="img"></a></p><p> 因此，在前后端分离的情况下，怎样让前后端开发人员更容易、更直观、更舒服的方式进行沟通交流。在这里，推荐一款轻量级的项目框架Swagger给大家使用。Swagger就是一款让你更好书写API文档的框架</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>一、 引用Swagger的nuget包</p><p> Swashbuckle.AspNetCore</p><p><strong><em><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321163627506-1938834143.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321163627506-1938834143.png" alt="img"></a></em></strong></p><p> 然后就在项目的Nuget依赖里看到刚刚引入的Swagger</p><p><strong><em><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321163723153-1780552190.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321163723153-1780552190.png" alt="img"></a></em></strong></p><p>二、服务配置环节</p><p>在Startup.cs页面中：</p><p>编辑 ConfigureServices 类：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>        public void ConfigureServices(IServiceCollection services)        &#123;            services.AddSwaggerGen(c =&gt;            &#123;                c.SwaggerDoc(&quot;V1&quot;, new OpenApiInfo                &#123;                    Version = &quot;V1&quot;,   //版本                     Title = $&quot;XUnit.Core 接口文档-NetCore3.1&quot;,  //标题                    Description = $&quot;XUnit.Core Http API v1&quot;,    //描述                    Contact = new OpenApiContact &#123; Name = &quot;艾三元&quot;, Email = &quot;&quot;, Url = new Uri(&quot;http://i3yuan.cnblogs.com&quot;) &#125;,                      License = new OpenApiLicense &#123; Name = &quot;艾三元许可证&quot;, Url = new Uri(&quot;http://i3yuan.cnblogs.com&quot;) &#125;                &#125;);            &#125;);            services.AddControllers();        &#125;</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>其中的Url地址不能为空。</p><p>三、中间件启动环节</p><p>编辑Configure类</p><p>注意：路径配置，设置为空，表示直接在根域名（localhost:8001）访问该文件,注意localhost:8001/swagger是访问不到的，去launchSettings.json把launchUrl去掉，如果你想换一个路径，直接写名字即可，比如直接写c.RoutePrefix = “swagger”;</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)        &#123;            if (env.IsDevelopment())            &#123;                app.UseDeveloperExceptionPage();            &#125;            app.UseSwagger();            app.UseSwaggerUI(c =&gt; &#123;                c.SwaggerEndpoint($&quot;/swagger/V1/swagger.json&quot;, $&quot;XUnit.Core V1&quot;);                c.RoutePrefix = string.Empty;     //如果是为空 访问路径就为 根域名/index.html,注意localhost:8001/swagger是访问不到的                //路径配置，设置为空，表示直接在根域名（localhost:8001）访问该文件                // c.RoutePrefix = &quot;swagger&quot;; // 如果你想换一个路径，直接写名字即可，比如直接写c.RoutePrefix = &quot;swagger&quot;; 则访问路径为 根域名/swagger/index.html            &#125;);            app.UseRouting();            app.UseAuthorization();            app.UseEndpoints(endpoints =&gt;            &#123;                endpoints.MapControllers();            &#125;);        &#125;</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>到这里之后，我们已经完成了对swagger的添加，F5运行之后，</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170149179-524173739.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170149179-524173739.png" alt="img"></a></p><p> 运行项目之后，我们发现官方默认的是 /WeatherForecast地址，所以我们修改成在域名后面输入/index.html，就可以正常访问了。</p><p>如果想修改默认的启动地址，可以在launchSetting.json文件中的launchUrl设置为空，或者删除掉就可以了。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170628366-374910445.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170628366-374910445.png" alt="img"></a></p><p> 这个时候我们再次启动项目，就可以直接访问根目录下的文件了。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170735936-1347232918.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321170735936-1347232918.png" alt="img"></a></p><p>如果启动应用，并导航到 <code>http://localhost:/swagger/V1/swagger.json</code>。 生成的描述终结点的文档显示如下json格式。</p><p><a href="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321172758004-1507633468.png"><img src="https://img2020.cnblogs.com/blog/1576550/202003/1576550-20200321172758004-1507633468.png" alt="img"></a></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p> \1. 已经有接口了，但如何添加注释呢？</p><p> \2. 作为接口使用者，我们关心的是接口的返回内容和响应类型，那我们如何定义描述响应类型呢？</p><p> \3. 在项目开发中，使用的实体类，又如何在Swagger中展示呢？</p><p> \4. 在部署项目，引用Swagger既有文档又不需要额外部署，但是如何在开发环境中使用，而在生产环境中禁用呢？</p><p>以上的这些内容，会在下一篇讲解Swagger做Api文档做详解。</p><p>好了，今天的使用Swagger做Api文档上篇内容就说到这里了，希望能给大家在使用Core开发项目中使用Swagger生产接口文档带来帮助。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> \1. 从过去手写Api文档，到引入Swagger工具自动生产API接口说明文档，这一转换，让更多的接口可以以通俗易懂的方式展现给开发人员。</p><p> \2. 后续会继续介绍Swagger的一些高级用法，希望对大家使用Swagger有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> DotCore/C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
